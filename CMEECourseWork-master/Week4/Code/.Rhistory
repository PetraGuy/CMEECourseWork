File =  "test.csv"
path = paste("../Data", File, sep = "/")
strsplit("File", "\\.")[[1]]
InputFileName = "test.csv"
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
tmp = strsplit("InputFilename", "\\.")[[1]]
tmpout = paste(tmp,"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp,"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmp[[1]]
tmp = (strsplit(InputFileName, "\\.")[[1]])
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
?paste
?runif
M = matrix(runif(1000000), 1000,1000)
SumAllElements =  function(M) {
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
rm(list=ls())
M = matrix(rnorm(100),10,10)
R1 = rowMeans(M)
R2 = apply(M,1,mea
R2 = apply(M,1,mean)
R2 = apply(M,1,mean)
R1 = rowMeans(M)
R2 = apply(M,1,mean)
C1 = colMeans(M)
C2 = apply(M,2,mean)
SomeOperation = function(v) {
if sum(v) > 0
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation)
SomeOperation = function(v) {
if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
SomeOperation = function(v) {
if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
x = 1:20
y = factor(rep(letters[1:5], each = 4))
y
tapply(x,y,sum)
attach(iris)
print(iris)
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
require(dplyr)
install.packages("dplyr")
library(dplyr)
dplyr::tbl_df(iris)
dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length >7)
dplyr::slice(iris, 10:15)
?tibble
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tmpdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile
)
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m
)
?mapply
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyFunction <- function(Arg1, Arg2) {
print(paste("Argument", as.character(Arg1), "is a", class(Arg1)))
print(paste("Argument", as.character(Arg2), "is a", class(Arg2)))
return(c(Arg1,Arg2))
}
MyFunction(1,2)
MyFunction("Bob","Geoff")
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
rm(list=ls())
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 <- stochricknew()))
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
MyFuncn
plot(Exponential(), type = "1", main = "Exponential growth")
N
N
N
N
N
plot(Exponential(), type = "1", main = "Exponential growth")
?plot
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "l", main = "Exponential growth")
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
MyMatrix =  stochricknew
# print("Vectorized Stochastic Ricker takes:")
print(system.time(stochrick()))
M = matrix(runif(1000000), 1000,1000)
SumAllElements =  function(M) {
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
library(ggplot2)
SparrowsData = read.table("../Data/SparrowSize.txt", header = TRUE)
Winghist = ggplot(SparrowsData, aes(Wing))+
geom_histogram()
BodyMassHist = ggplot(SparrowsData, aes(Mass))+
geom_histogram()
BillHist = ggplot(SparrowsData, aes(Bill))+
geom_histogram()
MeanBill = mean(SparrowsData$Bill, na.rm = TRUE)
# Ex 7.15
a = TRUE
if (a ==TRUE){
print("a is TRUE")
} else {
print(" a is FALSE")
}
z =  runif(1)
if (z <= 0.5){
print("less than half")
}
for (i in 1:100){
j = i*i
print(paste(i,"squared is", j))
}
v = c("frog", "dog","mog", "hog")
for (animals in v){
print(paste("the animal is ", animal))
}
i = 0
while ( i < 100){
i = i+1
print(i^2)
}
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
facet_grid(Type.of.feeding.interaction ~ .)
print(plot)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
facet_grid(Type.of.feeding.interaction ~ .)
print(plot)
library(ggplot2)
Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
setwd("~/Documents/CMEECourseWork/Week3/Code")
Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
facet_grid(Type.of.feeding.interaction ~ .)
par(mfrow =c(2,1))
boxplot(timber$volume)
boxplot(timber$girth)
boxplot(timber$height)
rm(list = ls())
timber = read.delim("../Data/timber.txt")
setwd("~/Documents/CMEECourseWork/Week4/Code")
timber = read.delim("../Data/timber.txt")
par(mfrow =c(2,1))
boxplot(timber$volume)
boxplot(timber$girth)
boxplot(timber$height)
par(mfrow =c(3,1))
boxplot(timber$volume)
boxplot(timber$girth)
boxplot(timber$height)
par(mfrow =c(2,2))
boxplot(timber$volume)
boxplot(timber$girth)
boxplot(timber$height)
var(timber$volume)
var(timber$girth)
var(timber$height)
t2 = as.data.frame(subset(timber, timber$volume!=NA))
View(t2)
View(timber)
View(timber)
t2 = as.data.frame(subset(timber, timber$volume!="NA"))
t2$z.girth = scale(timber$girth)
t2z.height = scale(timber$height)
t2$z.girth = scale(timber$girth)
t2$z.height = scale(timber$height)
t2$z.girth = scale(timber$girth)
t2$z.height = scale(timber$height)
t2$z.girth = scale(timber$girth)
t2$z.girth
var(t2$z.height)
plot(t2)#
View(t2)
par(mfrow = c(2,2))
hist(t2$volume)
hist(t2$girth)
hist(t2$height)
pairs(timber)
cor(timber)
summary(lm(girth ~ height, data = timber))
lm(girth ~ height, data = timber)
model = lm(girth ~ height, data = timber)
s = summary(lm(girth ~ height, data = timber))
model = lm(girth ~ height, data = timber)
s = summary()
s
s$r.squared
VIF = 1/(1-(s$r.squared^2))
VIF
timber Mod = lm(volume ~ girth + height, data = timber)
timberMod = lm(volume ~ girth + height, data = timber)
anova(timberMod)
call:
lm(formula = volume~girth+height, data = timberMod)
lm(formula = volume~girth+height, data = timber)
lm(formula = volume~girth+height, data = timber)
Call:
lm(formula = volume~girth+height, data = timber)
summary(timberMod)
?ancova
mod1 = lm(volume~girth, data = timber)
mod2 = lm(volume~height, data = timber)
anova(mod1)
anova(mod2)
mod1
mod2
plot(timberMod)
plot(mod1)
plot(volume~girth, data = timber)
ggplot(timber, aes(x = girth, y = volume))+
geom_smooth()
ggplot(timber, aes(x = girth, y = volume))+
geom_smooth()+
geom_point()
timberNew = timber[-31,]
View(timberNew)
timberNewMod = lm(volume~girth, data = timberNew)
ggplot(timberNew, aes(x = girth, y = volume))+
geom_smooth()+
geom_point()
anova(timberNew)
anova(timberNew)
anova(timberNewMod)
plot(timberNewMod)
timberlogMod = lm(log(Volume)~girth, data = timberNew)
timberlogMod = lm(log(volume)~girth, data = timberNew)
plot)timberlogMod
plot(timberlogMod)
anova(timberlogMod)
ggplot(timberNew, aes(x = girth, y = log(volume)))+
geom_smooth()+
geom_point()
anova(timberMod)
timberMod
lm(volume~girth, data = timberNew)
ggplot(timberNew, aes(x = girth, y = volume))+
geom_smooth()+
geom_point()+
geom_abline(slope =  0.04321, intercept = -2.41213)
timberMod2 = lm(volume ~ girth + height*girth, data = timberNew)
anova(timberMod2)
timberMod2
anova(timberMod)
