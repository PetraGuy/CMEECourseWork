File =  "test.csv"
path = paste("../Data", File, sep = "/")
strsplit("File", "\\.")[[1]]
InputFileName = "test.csv"
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
tmp = strsplit("InputFilename", "\\.")[[1]]
tmpout = paste(tmp,"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp,"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmp[[1]]
tmp = (strsplit(InputFileName, "\\.")[[1]])
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
outfile = paste("../Results",tmpout, sep = "/")
?paste
?runif
M = matrix(runif(1000000), 1000,1000)
SumAllElements =  function(M) {
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
rm(list=ls())
M = matrix(rnorm(100),10,10)
R1 = rowMeans(M)
R2 = apply(M,1,mea
R2 = apply(M,1,mean)
R2 = apply(M,1,mean)
R1 = rowMeans(M)
R2 = apply(M,1,mean)
C1 = colMeans(M)
C2 = apply(M,2,mean)
SomeOperation = function(v) {
if sum(v) > 0
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation)
SomeOperation = function(v) {
if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
SomeOperation = function(v) {
if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
x = 1:20
y = factor(rep(letters[1:5], each = 4))
y
tapply(x,y,sum)
attach(iris)
print(iris)
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
require(dplyr)
install.packages("dplyr")
library(dplyr)
dplyr::tbl_df(iris)
dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length >7)
dplyr::slice(iris, 10:15)
?tibble
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tmpdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile
)
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m
)
?mapply
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyFunction <- function(Arg1, Arg2) {
print(paste("Argument", as.character(Arg1), "is a", class(Arg1)))
print(paste("Argument", as.character(Arg2), "is a", class(Arg2)))
return(c(Arg1,Arg2))
}
MyFunction(1,2)
MyFunction("Bob","Geoff")
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
rm(list=ls())
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 <- stochricknew()))
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
MyFuncn
plot(Exponential(), type = "1", main = "Exponential growth")
N
N
N
N
N
plot(Exponential(), type = "1", main = "Exponential growth")
?plot
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "l", main = "Exponential growth")
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
MyMatrix =  stochricknew
# print("Vectorized Stochastic Ricker takes:")
print(system.time(stochrick()))
M = matrix(runif(1000000), 1000,1000)
SumAllElements =  function(M) {
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
rm(list = ls())
prepare_workspace = function(){
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
}
GetData = function(){
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
return(MyData)
}
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
d <- loadRData("../Data/KeyWestAnnualMeanTemperature.RData")
setwd("~/Documents/CMEECourseWork/Week3/Code")
d <- loadRData("../Data/KeyWestAnnualMeanTemperature.RData")
d
rm(list = ls())
d
source('~/Documents/CMEECourseWork/Week3/Sandbox/loadRData.R', echo=TRUE)
rm(list = ls())
?source
?get
