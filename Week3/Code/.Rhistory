}
return(acfs)
}
randacf = Calc_Random_acfs(TempData$Temps)
rm(list = ls())
graphics.off()
prepare_workspace()
TempData = GetData()
Examine(TempData$Temps)
autocorr =Calc_acf(TempData$Temps)
print ("autocorrelation coefficient is ")
print(autocorr)
randacf = Calc_Random_acfs(TempData$Temps)
p = Calc_p_Value(randacf,autocorr)
print("p value is ")
print(p)
Final_plots(TempData$Temps)
TempData = GetData()
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
?commandArgs
Years = ats[[1]]
prepare_workspace()
TempData = GetData()
Examine(TempData$Temps)
autocorr =Calc_acf(TempData$Temps)
print ("autocorrelation coefficient is ")
print(autocorr)
prepare_workspace = function(){
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
}
# get the data and make two vectors coz easier for loops
GetData = function(){
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
return(MyData)
}
Examine = function(Data){
# plot simple time series
plot.ts(Data)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(Data[-c(100:(100-x+1))], Data[-c(1:x)]))
}
#autocorrelation coef is Sum(Y[i+1]-AveY)(Y[i] -AveY)/sum(sqr(Y[i]-AveY))
# calculate sum[(Yi+1 - ave)(Yi - ave)] -- numerator of autocorr coef
Calc_numerator = function(avector){
num = vector("numeric",99)
for (i in seq_along((avector))) {
if (i <100) {
num[i] = as.vector( avector[i+1] - mean(avector) ) * ( avector[i] - mean(avector) )
}
else
totalnum = sum(num)
}
return(totalnum)}
Calc_denom = function(avector){
#  calcuate sum[(Yi - ave)^2] -- denom of auto corr coef
denom = vector("numeric",99)
for (i in seq_along((avector))) {
if (i <100) {
denom[i] = as.vector(( avector[i] - mean(avector) )^2)
}
else
totaldenom = sum(denom)
}
return(totaldenom)}
Calc_acf = function(avector){
num = Calc_numerator(avector)
denom = Calc_denom(avector)
autocorrcoef = num/denom
}
#generate 1000 acf from random sampling of Temps
Calc_Random_acfs = function(avector){
acfs = vector("numeric",1000)
for (i in 1:1000){
acfs[i] = Calc_acf(sample(avector,100))
}
return(acfs)
}
Calc_p_Value = function(avector,avalue){
p = length(avector[avector > avalue])
print("p value is: ",p)
}
#Since p value indicates correlation between points, lets look at moving average
#and plot a trend line
Final_plots = function(avector){
ma = movavg(avector, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(avector,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma~MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
}
TempData = GetData()
Examine(TempData$Temps)
autocorr =Calc_acf(TempData$Temps)
print ("autocorrelation coefficient is ")
print(autocorr)
randacf = Calc_Random_acfs(TempData$Temps)
p = Calc_p_Value(randacf,autocorr)
p = Calc_p_Value(randacf,autocorr)
Calc_p_Value = function(avector,avalue){
p = length(avector[avector > avalue])
}
p = Calc_p_Value(randacf,autocorr)
print("p value is ")
print(p)
Final_plots(TempData$Temps)
Temps = TempData$Temps
ma = movavg(Temps, 2, "s")
MyData = as.data.frame(cbind(Temps,ma))
lm = summary(lm(MyData$ma~MyData$Years, MyData))
lm = summary(lm(MyData$ma ~ MyData$Years, MyData))
Final_plots = function(adataframe){
ma = movavg(adataframe[1], 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(adataframe[2],ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
}
Final_plots(TempData)
ma = movavg(TempData[1], 2, "s") # simple moving average with 2 points
ma = movavg(TempData$Temps, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(TempData,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
}
Final_plots = function(DataIn){
ma = movavg(DataIn$Temps, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(DataIn,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
}
Final_plots(TempData)
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
prepare_workspace()
TempData = GetData()
Examine(TempData$Temps)
autocorr =Calc_acf(TempData$Temps)
print ("autocorrelation coefficient is ")
print(autocorr)
randacf = Calc_Random_acfs(TempData$Temps)
p = Calc_p_Value(randacf,autocorr)
print("p value is ")
print(p)
Final_plots(TempData)
TempData = GetData()
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
View(MyData)
View(MyData)
View(ats)
View(ats)
randacf = Calc_Random_acfs(MyData$Temps)
Examine(MyData)
plot.ts(MyData)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData[-c(100:(100-x+1))], MyData[-c(1:x)]))
sapply(1:4, function(x) plot(MyData[-c(100:(100-x+1))], MyData[-c(1:x)]))
plot.ts(MyData)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
rm(list = ls())
num
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
plot.ts(MyData)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
plot.ts(MyData)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
graphics.off()
plot.ts(MyData)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
plot.ts(MyData)
graphics.off()
plot.ts(MyData$Temps)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
plot.ts(MyData$Temps)
graphics.off()
plot.ts(MyData$Temps)
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
num = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
num[i] = as.vector( Temps[i+1] - mean(Temps) ) * ( Temps[i] - mean(Temps) )
}
else
totalnum = sum(num)}
#Calc_denom = function(avector){
#  calcuate sum[(Yi - ave)^2] -- denom of auto corr coef
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
}
else
totaldenom = sum(denom)}
autocorrcoef = num/denom
autocorrcoef = totalnum/totaldenomdenom
autocorrcoef = totalnum/totaldenom
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((RTemp))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(Temps) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acf[i] = totalnum/totaldenom
}
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((RTemp))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acf[i] = totalnum/totaldenom
}
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temp))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acf[i] = totalnum/totaldenom
}
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acf[i] = totalnum/totaldenom
}
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acfs[i] = totalnum/totaldenom
}
acfs
acfs = vector("numeric",1000)
for (i in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acfs[i] = totalnum/totaldenom
}
for (j in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acfs[j] = totalnum/totaldenom
}
p = length(acfs[acfs > autocorrcoef])
p
acfs
sort(acfs)
p = length(acfs[acfs > autocorrcoef])
p
autocorrcoef
acfs>autocorrcoef
acfs[acfs>autocorrcoef]
length(acfs[acfs>autocorrcoef])
p = length(acfs[acfs > autocorrcoef])/1000
p
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
graphics.off()
plot.ts(MyData$Temps)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
num = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
num[i] = as.vector( Temps[i+1] - mean(Temps) ) * ( Temps[i] - mean(Temps) )
}
else
totalnum = sum(num)}
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
}
else
totaldenom = sum(denom)}
autocorrcoef = totalnum/totaldenom
ma = movavg(DataIn$Temps, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(DataIn,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
ma = movavg(DataIn$Temps, 2, "s") # simple moving average with 2 points
ma = movavg(MyData$Temps, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(MyData,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
graphics.off()
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
# get the data and make two vectors coz easier for loops
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
#!/usr/bin/env Rscript
#Chapter 8.8 Final Practial
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
# get the data and make two vectors coz easier for loops
load("../Data/KeyWestAnnualMeanTemperature.RData")
Years = ats[[1]]
Temps = ats[[2]]
MyData = as.data.frame(cbind(Years,Temps))
#Examine = function(Data){
# plot simple time series
graphics.off()
plot.ts(MyData$Temps)
#plot terms with lag of 1 to 4 years against each other M Crawley p787
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temps[-c(100:(100-x+1))], MyData$Temps[-c(1:x)]))
#autocorrelation coef is Sum(Y[i+1]-AveY)(Y[i] -AveY)/sum(sqr(Y[i]-AveY))
# calculate sum[(Yi+1 - ave)(Yi - ave)] -- numerator of autocorr coef
#Calc_numerator = function(avector){
num = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
num[i] = as.vector( Temps[i+1] - mean(Temps) ) * ( Temps[i] - mean(Temps) )
}
else
totalnum = sum(num)}
#Calc_denom = function(avector){
#  calcuate sum[(Yi - ave)^2] -- denom of auto corr coef
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
}
else
totaldenom = sum(denom)}
#Calc_acf = function(avector){
autocorrcoef = totalnum/totaldenom
print("autocorrelatoin coefficient for lag 1 is ")
print(autocorrcoef)
#generate 1000 acf from random sampling of Temps
acfs = vector("numeric",1000)
for (j in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acfs[j] = totalnum/totaldenom
}
#Calc_p_Value = function(avector,avalue){
p = length(acfs[acfs > autocorrcoef])/1000
print("p value for autocorrelation coeffice=ient of lag 1 is ")
print(p)
#Since p value indicates correlation between points, lets look at moving average
#and plot a trend line
ma = movavg(MyData$Temps, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(MyData,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Years, MyData)) #a linear model of moving averages
ggplot(MyData, aes(y = MyData$ma, x = MyData$Years , colour  = abs(lm$residuals)))+
geom_point()+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
