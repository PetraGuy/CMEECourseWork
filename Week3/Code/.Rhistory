base_world +
geom_point(data=MyData, aes(x=long, y=lat), colour="Deep Pink", fill="Pink",pch=21, size=5, alpha=I(0.7))
?qmplot
map_data <-
worldMapEnv +  geom_point(data=MyData, aes(x=long, y=lat), colour="Deep Pink", fill="Pink",pch=21, size=5, alpha=I(0.7))
map_data
graphics.off()
map_data <-
worldMapEnv +  geom_point(data=MyData, aes(x=long, y=lat), colour="Deep Pink", fill="Pink",pch=21, size=5, alpha=I(0.7))
map_data
map_data <- map(database = "world")+
geom_point(data=MyData, aes(x=long, y=lat), colour="Deep Pink", fill="Pink",pch=21, size=5, alpha=I(0.7))
map_data
library(ggmap)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 4,
maptype = "satellite", scale = 2)
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
library(ggmap)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 1,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 2,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 2,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 2)
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 2,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 0.5)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
# getting the map
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 0.5)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
# getting the map
mapgilbert <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
GPDDMap <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(mapgilbert) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
GPDDMap <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(GPDDMap) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
# plot graphs and output to pdfs
pdf("../Results/Prey_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Prey.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
pdf("../Results/Predator_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
pdf("../Results/SizeRatio_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Prey.mass/Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
#tapplys to get means and medians across feeding interaction
groups = as.factor(Mydf$Type.of.feeding.interaction)
Prey.mass.means = tapply(log(Mydf$Prey.mass), groups, mean)
Predator.mass.means = tapply(log(Mydf$Predator.mass), groups, mean)
PreyPred.mass.means = tapply(log(Mydf$Prey.mass/Mydf$Predator.mass), groups, mean)
Prey.mass.median = tapply(log(Mydf$Prey.mass), groups, median)
Predator.mass.median = tapply(log(Mydf$Prey.mass), groups, median)
PreyPred.mass.median = tapply(log(Mydf$Predator.mass/Mydf$Prey.mass), groups, mean)
stats = rbind(Prey.mass.means, Predator.mass.means, PreyPred.mass.means, Prey.mass.median, Predator.mass.median, PreyPred.mass.median)
write.csv(stats, "../Results/PP_Results.csv")
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
View(Mydf)
View(Mydf)
colnames(Mydf)
ggplot(Mydf, aes(x = Prey.Mass, y = Predator.mass, group_by(Predator.lifestage)))+
geom_point()
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass, group_by(Predator.lifestage)))+
geom_point()
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_grid("Type.of.feeding.interaction")
Pre
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_grid(Type.of.feeding.interaction)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_grid(Type.of.feeding.interaction)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .
graphics.off()
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_wrap(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass)+
geom_point()+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass) )+
geom_point()+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass) )+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass) )+
geom_line()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = Prey.mass, y = Predator.mass) )+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) )+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass)) )+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point()+
facet_grid(Type.of.feeding.interaction ~ .)
colnames(Mydf)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(col = Predator.lifestage)
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(col = Predator.lifestage)+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage))+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
facet_grid(Type.of.feeding.interaction ~ .)
?lm
?with
?lm
?by
fit1 = by(Mydf, Mydf$Type.of.feeding.interaction, lm(Mydf$Predator.mass ~ Mydf$Prey.mass, subset = Mydf$Predator.lifestage))
fit1 = by(Mydf, Mydf$Type.of.feeding.interaction, FUN = (lm(Mydf$Predator.mass ~ Mydf$Prey.mass, subset = Mydf$Predator.lifestage)))
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", col = "red")+
facet_grid(Type.of.feeding.interaction ~ .)
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage)) +
facet_grid(Type.of.feeding.interaction ~ .)
?stat_smooth
ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
facet_grid(Type.of.feeding.interaction ~ .)
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
plot = ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
geom_point(aes(col = Predator.lifestage), shape = 3)+
stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
facet_grid(Type.of.feeding.interaction ~ .)
library(dplyr)
typeof(Mydf)
x = Mydf %>% group_by(Type.of.feeding.interaction)%>%group_by(Predator.lifestage)%>% lm(Mydf$Predator.mass ~ Mydf$Prey.mass)
library(broom)
install.packages("broom")
library(broom)
MydfLifestage = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage)%>%
do(fit = lm(log(Predator.mass) ~ log(Prey.mass), data = .))
MydfLifestage
str(Mydf)
MydfLifestage = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage)%>%
do(fit = lm(log(Predator.mass) ~ log(Prey.mass), data = .))
# get the coefficients by group in a tidy data_frame
MydfLifestageCoef = tidy(MyLifestage fit)
MydfLifestageCoef
MydfLifestageCoef = tidy(MyLifestage fit)
MydfLifestage = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage)%>%
do(fit = lm(log(Predator.mass) ~ log(Prey.mass), data = .))
# get the coefficients by group in a tidy data_frame
MydfLifestageCoef = tidy(MyLifestage, fit)
MydfLifestageCoef
MydfLifestage = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage)%>%
do(fit = lm(log(Predator.mass) ~ log(Prey.mass), data = .))
?filter
x = Mydf %>% group_by(Type.of.feeding.interaction)%>% group_by(Predator.lifestage)
x
View(x)
x = Mydf %>% group_by(Type.of.feeding.interaction)%>% group_by(Predator.lifestage)
?do
by_Feed <- group_by(Mydf, Type.of.feeding.interaction)
models <- by_Feed %>%group_by(Mydf, Predator.lifestage)%>% do(mod = lm(Mydf$Predator.mass ~ Mydf$Prey.mass, data = .))
by_Feed <- group_by(Type.of.feeding.interaction)
models <- by_Feed %>%group_by(Predator.lifestage)%>% do(mod = lm(Mydf$Predator.mass ~ Mydf$Prey.mass, data = .))
models
by_Feed <- group_by(Type.of.feeding.interaction, Predator.lifestage)
by_Feed <- group_by(Mydf,Type.of.feeding.interaction, Predator.lifestage)
View(by_Feed)
View(by_Feed)
models <- by_Feed %>% do(mod = lm(Mydf$Predator.mass ~ Mydf$Prey.mass, data = .))
models
mod
models <- by_Feed %>% do(lm, formula = Predator.mass ~ Prey.mass)
by_Feed <- group_by(Mydf,Type.of.feeding.interaction, Predator.lifestage)
models <- by_Feed %>% do(lm, formula = Predator.mass ~ Prey.mass)
by_Feed_Lifestage <- group_by(by_Feed, Predator.lifestage)
tpply
?split
by_Feed = split(Mydf, Mydf$Type.of.feeding.interaction)
head(by_Feed)
View(by_Feed)
?lapply
?lm
?lapply
by_Feed[1]
by_Feed = split(Mydf, Mydf$Type.of.feeding.interaction)
?split
head(by_Feed)
colnames(by_Feed)
rm(list = by_Feed)
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
View(Mydf)
View(Mydf)
Mydf = Mydf[-c(1:6)]
View(Mydf)
View(Mydf)
Mydf = Mydf[-c(4:6)]
Mydf = Mydf[-c(5:6)]
by_Feed = as.data.frame(split(Mydf, Type.of.feeding.interaction))
by_Feed = as.data.frame(split(Mydf, Mydf$Type.of.feeding.interaction))
by_Feed = (split(Mydf, Mydf$Type.of.feeding.interaction))
View(by_Feed)
by_Feed_Life = split(by_Feed[1])
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
Mydf %>%
filter( Type.of.feeding.interaction == insectivorous) %>%
group_by(Predator.lifestage) %>%
do(lm( log(Predator.mass) ~ log(Prey.mass))
Mydf %>%
filter( Type.of.feeding.interaction == insectivorous) %>%
group_by(Predator.lifestage) %>%
do(lm( log(Predator.mass) ~ log(Prey.mass)))
Mydf %>%
filter( Mydf$Type.of.feeding.interaction == insectivorous) %>%
group_by(Predator.lifestage) %>%
do(lm( log(Predator.mass) ~ log(Prey.mass)))
Mydf %>%
filter( Mydf$Type.of.feeding.interaction == "insectivorous") %>%
group_by(Predator.lifestage) %>%
do(lm( log(Predator.mass) ~ log(Prey.mass)))
Mydf %>%
filter( Mydf$Type.of.feeding.interaction == "insectivorous") %>%
group_by(Predator.lifestage) %>%
do(lm( log(Mydf$Predator.mass) ~ log(Mydf$Prey.mass)))
Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
typeof(Mydf)
Mydf %>%
filter(Mydf$Type.of.feeding.interaction == "insectivorous") %>%
group_by(Predator.lifestage) %>%
do(lm( log(Mydf$Predator.mass) ~ log(Mydf$Prey.mass)))
library(dplyr)
Mydf %>%  filter(Type.of.feeding.interaction == "insectivorous") %>%  group_by(Predator.lifestage) %>%  do(lm(log(Predator.mass) ~ log(Prey.mass)))
Mydf %>%  filter(Type.of.feeding.interaction == "insectivorous") %>%  group_by(Predator.lifestage) %>%  do(lm(log(Predator.mass) ~ log(Prey.mass)))
models = Mydf %>%  filter(Type.of.feeding.interaction == "insectivorous") %>%  group_by(Predator.lifestage) %>%  do(lm(log(Predator.mass) ~ log(Prey.mass)))
Feeding =  levels(Mydf$Type.of.feeding.interaction)
Feeding
Feedings = as.integer(Feeding)
levels(Mydf$Type.of.feeding.interaction)
for (i in levels(Mydf$Type.of.feeding.interaction) ){
for (j in levels(Mydf$Predator.lifestage)){
model[i][j] = lm(log(Mydf$Predator.mass) ~ log(Mydf$Prey.mass))
}
}
model = vector()
for (i in levels(Mydf$Type.of.feeding.interaction) ){
for (j in levels(Mydf$Predator.lifestage)){
model[i][j] = lm(log(Mydf$Predator.mass) ~ log(Mydf$Prey.mass))
}
}
mdeol
model
?lm
model = vector()
for (i in levels(Mydf$Type.of.feeding.interaction) ){
for (j in levels(Mydf$Predator.lifestage)){
model[i][j] = lm(log(Mydf$Predator.mass) ~ log(Mydf$Prey.mass), Mydf)
}
}
model
View(model)
Mydf$Type.of.feeding.interaction[1]
Mydf$Type.of.feeding.interaction[[[1]]
Mydf$Type.of.feeding.interaction[[1]]
Mydf$Type.of.feeding.interaction[[1]][1]
Mydf$Type.of.feeding.interaction[[1]][[1]]
Mydf$Type.of.feeding.interaction[[1]][[2]]
Mydf$Type.of.feeding.interaction[[2]]
Mydf$Type.of.feeding.interaction[[3]]
Mydf$Type.of.feeding.interaction[[4]]
?aggreagate
?aggregate
Mydf = cbind(Mydf$Predator.lifestage, Mydf$Type.of.feeding.interaction, Mydf$Predator.mass, Mydf$Prey.mass)
rm(list = ls())
Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
Mydf = cbind(Mydf$Predator.lifestage, Mydf$Type.of.feeding.interaction, Mydf$Predator.mass, Mydf$Prey.mass)
View(Mydf)
colnames(Mydf) = c("Predator.lifestage", "Type.of.feeding.interaction", "Predator.mass", "Prey.mass")
View(Mydf)
View(Mydf)
typeof(Mydf$Type.of.feeding.interaction)
Mydf[1]
Mydf[,1]
range(Mydf[,1])
library(magrittr)
library(tidyr)
Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>% mean(.Predator.mass)
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>% mean(Predator.mass)
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>% mean
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>% mean(Predator.mass)
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarize(m = mean(Predator.mass)) %>%  assign("bar", .)
means
means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarize(m = mean(Predator.mass))
means
m
means$m
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarise(m = lm(log(Predator.mass) ~ log(Prey.mass))
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarise(m = lm(log(Predator.mass) ~ log(Prey.mass)) )
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarise(m = lm(log(Predator.mass) ~ log(Prey.mass)) )
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%  lm(log(Predator.mass) ~ log(Prey.mass))
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%  do(lm(log(Predator.mass) ~ log(Prey.mass)) )
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%  do(fits = lm(log(Predator.mass) ~ log(Prey.mass)), data = . )
Models = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%  do(fits = lm(log(Predator.mass) ~ log(Prey.mass), data = . ))
Models
Models$fits
#Chapter 9, 9.1.2
rm(list = ls())
Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
# plot graphs and output to pdfs
pdf("../Results/Prey_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Prey.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
pdf("../Results/Predator_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
pdf("../Results/SizeRatio_Lattice.pdf", # Open blank pdf page
11.7, 8.3)
densityplot(~log(Prey.mass/Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
#tapplys to get means and medians across feeding interaction
groups = as.factor(Mydf$Type.of.feeding.interaction)
Prey.mass.means = tapply(log(Mydf$Prey.mass), groups, mean)
Predator.mass.means = tapply(log(Mydf$Predator.mass), groups, mean)
PreyPred.mass.means = tapply(log(Mydf$Prey.mass/Mydf$Predator.mass), groups, mean)
Prey.mass.median = tapply(log(Mydf$Prey.mass), groups, median)
Predator.mass.median = tapply(log(Mydf$Prey.mass), groups, median)
PreyPred.mass.median = tapply(log(Mydf$Predator.mass/Mydf$Prey.mass), groups, mean)
stats = rbind(Prey.mass.means, Predator.mass.means, PreyPred.mass.means, Prey.mass.median, Predator.mass.median, PreyPred.mass.median)
write.csv(stats, "../Results/PP_Results.csv")
#!/usr/bin/env Rscript
#Chapter 8.8 Final Practical
rm(list = ls())
library(stats) # for plot.ts
library(ggplot2)
library(pracma) # for movavg
# Collect the data
MyData = as.data.frame(read.csv("../Data/KeyWest.CSV"))
#load("../Data/KeyWestAnnualMeanTemperature.RData")
#Years = ats[[1]]
Temps = MyData[[3]]
#MyData = as.data.frame(cbind(Years,Temps))
#Examine = function(Data){
# plot simple time seriesgraphics.off()
pdf("../Results/TAutocorrtimeseries1.pdf")
ggplot(MyData, aes(x = Year, y = Temp))+
labs(title = "Time series of temperature data for KeyWest 1900 - 2000", x = "date", y = "Temperature")+
geom_line()
dev.off()
pdf("../Results/TAutocorrtimeseries2.pdf")
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temp[-c(100:(100-x+1))], MyData$Temp[-c(1:x)], ylab = "Year", xlab = "year"))
dev.off()
#autocorrelation coef is Sum(Y[i+1]-AveY)(Y[i] -AveY)/sum(sqr(Y[i]-AveY))
# calculate sum[(Yi+1 - ave)(Yi - ave)] -- numerator of autocorr coef
#Calc_numerator = function(avector){
num = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
num[i] = as.vector( Temps[i+1] - mean(Temps) ) * ( Temps[i] - mean(Temps) )
}
else
totalnum = sum(num)}
#Calc_denom = function(avector){
#  calcuate sum[(Yi - ave)^2] -- denom of auto corr coef
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
if (i <100) {
denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
}
else
totaldenom = sum(denom)}
#Calc_acf = function(avector){
autocorrcoef = totalnum/totaldenom
print("autocorrelatoin coefficient for lag 1 is ")
print(autocorrcoef)
#generate 1000 acf from random sampling of Temps
acfs = vector("numeric",1000)
for (j in 1:1000){
num = vector("numeric",99)
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
RTemp = sample(Temps,100)
if (i <100) {
num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
}
else
totalnum = sum(num)
totaldenom = sum(denom)
}
acfs[j] = totalnum/totaldenom
}
#Calculate p value
p = length(acfs[acfs > autocorrcoef])/1000
print("p value for autocorrelation coeffice=ient of lag 1 is ")
print(p)
message = "p value for autocorrelation coeffice=ient of lag 1 is "
output = c(message,p)
write(output,'../Results/pvalue.txt' )
pdf("../Results/TAutocorrHist.pdf")
hist(acfs, main = paste("distribution of random acfs. acf for sequential data 0.309"))
#Since p value indicates correlation between points, lets look at moving average
#and plot a trend line
dev.off()
ma = movavg(MyData$Temp, 2, "s") # simple moving average with 2 points
MyData = as.data.frame(cbind(MyData,ma)) # need a dataframe for ggplot
lm = summary(lm(MyData$ma ~ MyData$Year, MyData)) #a linear model of moving averages
pdf("../Results/TAutocorrmovingavg.pdf")
ggplot(MyData, aes(y = MyData$ma, x = MyData$Year , colour  = abs(lm$residuals)))+
geom_point()+
labs(x = "Years", title = "Scatterplot of 2 point moving average and linear fit", y = "Moving Average")+
geom_abline(intercept = lm$coefficients[1][1],
slope = lm$coefficients[2][1],
colour = "red")
dev.off()
#####################
#Chapt * extra Credit Mapping
rm(list = ls())
MyData = read.csv("../Data/GPDD.csv")
library(ggplot2)
library(maps)
library(ggmap)
# getting the map
GPDDMap <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
maptype = "satellite", scale = 1)
# plotting the map with some points on it
ggmap(GPDDMap) +
geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
# appear to only be northern hemisphere data.
