print(system.time(res2))
print(system.time(res2<-stochrickvect()))
res2
res2 = stochrick()
stochrick()
print(system.time(stochrickvect()))
print(system.time(stochrick()))
View(res2)
View(res2)
?apply(array, margin, ...)
?apply
N<-matrix(NA,numyears,length(p0))
p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100
p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100
p0=runif(1000, 0.5,1.5), r=1.2, K=1, sigma=0.2, numyears=100
p0=runif(1000, 0.5,1.5)
r=1.2, K=1, sigma=0.2, numyears=100
r = 1.2, K = 1, sigma = 0.2, numyears = 100
r = 1.2
K = 1
sigma = 0.2
numyears = 100
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
B = matrix(c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
multiply = function(x) {
x = x*2
}
B2 = apply(B,2,multiply)
View(B2)
View(B2)
View(B)
View(B)
B
B2
multiply = function(x) {
x = x*2*runif(1,0.5,1.5)
}
B2 = apply(B,2,multiply)
B2
Bran = replicate(10, runif(5))
Bran
r = 1.2,
K = 1,
sigma = 0.2
stoch = function(x){
expo = (1-(x/K))*r
x = x*exp(expo)
}
Bstoch = stoch(B
Bstoch = stoch(Bran)
Bstoch = stoch(Bran)
View(Bstoch)
View(Bstoch)
Bran = replicate(10, runif(5))
Bran = replicate(10, runif(5))
Bran
Bstoch = stoch(Bran)
Bstoch
Bran
Bran = replicate(runif(5))
vectran = runif(10, 0.5, 1.5)
vectran = sample(0.5,1.5 10, rep=TRUE)
vectran = sample(0.5,1.5, 10, rep=TRUE)
vectran
vectran = runif(10, 0.5,1.5)
vectran
apply(vectran, stoch)
stoch = function(x){
expo = (1-(x/K))*r
x = x*exp(expo)+rnorm(1,0,sigma))
}
stoch = function(x) {
expo = (1-(x/K))*r
x = x*exp(expo)+rnorm(1,0,sigma))
}
stoch = function(x) {
expo = (1-(x/K))*r
x = x*exp(expo)+rnorm(1,0,sigma)
}
apply(vectran, stoch)
apply(vectran, 2,stoch)
N = matrix(c(1,1,1,1,1,1,1,1,1,1), nrow = 9, ncol = 10)
apply(vectran, 2,stoch)
N
M = rbind(vectran, N)
M
apply(M, 2, stoch)
apply(M, 1, stoch)
M
rm(list=ls())
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
stochricknew<-function(p0=runif(100,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=10)
{N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)+rnorm(1,0,sigma))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
p0=runif(100,.5,1.5)
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
p0=runif(100,.5,1.5)
numyears=10
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
stochricknew<-function(r=1.2,K=1,sigma=0.2,)
{
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)+rnorm(1,0,sigma))
}
return(N)
}
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)+rnorm(1,0,sigma))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
View(MyMatrix)
View(MyMatrix)
warning()
rm(list=ls())
p0=runif(100,.5,1.5)
numyears=10
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
N
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)+rnorm(1,0,sigma))
}
return(N)
}
MyMatrix =  apply(N,1,stochricknew)
View(MyMatrix)
View(MyMatrix)
rm(list=ls())
p0=runif(10,.5,1.5)
numyears=10
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)+rnorm(1,0,sigma))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
#rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K)
}
return(N)
}
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
#rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
View(MyMatrix)
View(MyMatrix)
stochricknew<-function(r=1.2, K=1, sigma=0.2)
{
rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
rm(list=ls())
stochricknew<-function(p0=runif(10,.5,1.5),
numyears=10,
r=1.2, K=1, sigma=0.2)
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
{
rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K))
}
return(N)
}
MyMatrix =  apply(N,2,stochricknew)
MyMatrix =  apply(stochricknew)
MyMatrix =  stochricknew
View(MyMatrix)
View(MyMatrix)
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K))
}
return(N)
}
View(stochricknew)
MyMatrix =  stochrickn
MyMatrix =  stochricknew
View(MyMatrix)
View(MyMatrix)
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
rnorm(1,0,sigma)
for (yr in 2:numyears) {
N[yr]<-N[yr-1]*exp(r*(1-N[yr-1]/K))
}
return(N)
}
stochricknew()
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
stochricknew()
# print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
print(system.time(res2<-stochricknew
print(system.time(res2<-stochricknew()))
print(system.time(res2<-stochricknew()))
res2
res2[1,]
res2[100,]
set.seed(1)
rnorm(length(p0), 0, sigma)
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 = stochrick()))
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
rm(list=ls())
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 =stochricknew()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 = stochrick()))
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
rm(list=ls())
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 = stochricknew()))
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 <- stochricknew()))
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 = stochrick()))
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
set.seed(1234567)
rnorm[1]
rnorm(1)
rnorm(10)
?lapply
?function(i)
x = rnorm(50)
doit = function(x) {
x = sample(x, replace = TRUE)
if(length(unique(x)) > 30) {
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result = vector("list", 100)
for (i in 1:100) {
result[[i]] <-doit(x)
}
result = lapply(1:100, function(i) doit(x))
x = rnorm(50)
doit = function(x) {
x = sample(x, replace = TRUE)
if(length(unique(x)) > 30) {
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result = lapply(1:100, function(i) doit(x))
result = vector("list", 100)
for (i in 1:100) {
result[[i]] <-doit(x)
}
result = lapply(1:100, doit)
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- try(doit(x), FALSE)
}
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 5) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 2) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
x <- rnorm(50)
result <- lapply(1:100,  try(doit(x), FALSE))
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
x <- rnorm(50) #Generate your population
doit <- function(x){
browse()
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result(x)
doit(x)
x <- rnorm(50) #Generate your population
doit <- function(x){
browser()
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
doit(x)
x
x
sample(x, replace = TRUE)
unique(x)
mean(unique(x))
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- try(doit(x), FALSE)
}
result <- lapply(1:100,  try(doit(x), FALSE))
?lapply
?try
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", (mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- try(doit(x), FALSE)
}
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", (mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100,  try(doit(x), FALSE))
## Try using "try" with vectorization:
result <- lapply(1:100,  function(i) try(doit(x), FAL
result <- lapply(1:100,  function(i) try(doit(x), FALSE))
result <- lapply(1:100,  function(i) try(doit(x), FALSE))
