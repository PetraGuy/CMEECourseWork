sum_and_length = list()
for (a in 1:len) {
sum = sum_vect(sum, octets[[a]])
}
sum_and_length[[1]] = sum
sum_and_length[[2]] = len
return(sum_and_length)
}
get_results = function() {
#browser()
ave_for_file_batch = list()
for (i in 1:4) {
j = get_quartile(i)    # this return vector of file numbers in each batch, eg if i = 2, 26:50
cum_sum = vector()
cum_len = 0
results = list()
for (counts in j) {
results =  get_sum_and_length_of_octet(counts)
cum_sum = sum_vect(cum_sum, results[[1]])
cum_len =  results[[2]] + cum_len
}
ave_for_file_batch[[i]] = cum_sum / cum_len
}
return(ave_for_file_batch)
}
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances,  size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 5000")
}
results = get_results()
results = get_results()
get_sum_and_length_of_octet = function(i) {
#browser()
infile = paste("../Results/pg5117_cluster_", i, ".rda", sep = "")
load(infile)
len = length(octets)
sum = vector()
sum_and_length = list()
for (a in 1:len) {
sum = sum_vect(sum, octets[[a]])
}
sum_and_length[[1]] = sum
sum_and_length[[2]] = len
return(sum_and_length)
}
get_results = function() {
#browser()
ave_for_file_batch = list()
for (i in 1:4) {
j = get_quartile(i)    # this return vector of file numbers in each batch, eg if i = 2, 26:50
cum_sum = vector()
cum_len = 0
results = list()
for (counts in j) {
results =  get_sum_and_length_of_octet(counts)
cum_sum = sum_vect(cum_sum, results[[1]])
cum_len =  results[[2]] + cum_len
}
ave_for_file_batch[[i]] = cum_sum / cum_len
}
return(ave_for_file_batch)
}
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances,  size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
cex.main = 0.75,
xlab = "abundances, size = 5000")
}
results = get_results()
source('~/Documents/CMEECourseWork/HPC/Code/Question20_hpc.R', echo=TRUE)
results =  get_results()
setwd("~/Documents/CMEECourseWork/HPC/Code")
pwd
results =  get_results()
get_sum_and_length_of_octet = function(i) {
#browser()
infile = paste("../Results/Unzipped/pg5117_cluster_", i, ".rda", sep = "")
load(infile)
len = length(octets)
sum = vector()
sum_and_length = list()
for (a in 1:len) {
sum = sum_vect(sum, octets[[a]])
}
sum_and_length[[1]] = sum
sum_and_length[[2]] = len
return(sum_and_length)
}
results =  get_results()
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
xlab = "abundances, size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
xlab = "abundances, size = 5000")
}
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
xlab = "abundances, size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
xlab = "abundances, size = 5000")
}
plot(results)
plot(results)
plot_results(results)
############# Question 20 ##########################################
# Read in the files from the HPC
#couldnt work out easy wy of specifying files in each batch, so this first function
#couldnt work out easy wy of specifying files in each batch, so this
get_quartile = function(i) {
if (i == 1) {
quartile = c(1:25)
}
else if (i == 2) {
quartile = c(26:50)
}
else if (i == 3) {
quartile = c(51:75)
}
else {
quartile = c(76:100)
}
return(quartile)
}
# This function returns the sum and number of the octets in single file, to be found in path specified
get_sum_and_length_of_octet = function(i) {
#browser()
infile = paste("../Results/Unzipped/pg5117_cluster_", i, ".rda", sep = "")
load(infile)
len = length(octets)
sum = vector()
sum_and_length = list()
for (a in 1:len) {
sum = sum_vect(sum, octets[[a]])
}
sum_and_length[[1]] = sum
sum_and_length[[2]] = len
return(sum_and_length)
}
get_results = function() {
#browser()
ave_for_file_batch = list()
for (i in 1:4) {
# this return vector of file numbers in each batch, eg if i = 2, 26:50
j = get_quartile(i)
cum_sum = vector()
cum_len = 0
results = list()
for (counts in j) {
results =  get_sum_and_length_of_octet(counts)
cum_sum = sum_vect(cum_sum, results[[1]])
cum_len =  results[[2]] + cum_len
}
ave_for_file_batch[[i]] = cum_sum / cum_len
}
return(ave_for_file_batch)
}
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
xlab = "abundances, size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
xlab = "abundances, size = 5000")
}
results =  get_results()
plot_results(results)
results =  get_results()
plot_results(results)
print(results)
### Coalescence simulation
Challengne_D = function() {
sizes  = c(500, 1000, 2500, 5000)
v = 0.002125
Abundances = list()
for (i in 1:4) {
size = sizes[i]
theta = 0.002125 * (size - 1) / (1 - v)
abundance = vector()
lineages = initialise_min(size)
N = length(lineages)
while (N > 1) {
p = theta / (theta + N - 1)
r = runif(1, 0:1)
index = sample(N, 2)
if (r < p) {
abundance = c(abundance, lineages[index[1]])
}
else {
lineages[index[1]] = lineages[index[1]] + lineages[index[2]]
lineages = lineages[-index[2]]
}
N = length(lineages)
}
abundance = c(abundance, lineages)
Abundances[[i]] = abundance
}
return(Abundances)
}
Abundances = Challengne_D()
octets = list()
for (i in 1:4){
octets[[i]]= octaves(Abundances[[i]])
}
par(mfrow = c(2, 2))
y1 = octets[[1]]
#names = names = c("1", "2", "3", "4", "5", "6","7","8","9")
plot1 = barplot(y1,
#names.arg = names,
main = "Average abundances in octets",
xlab = "abundances")
y2 = octets[[2]]
#names = names = c("1", "2", "3", "4", "5", "6","7","8","9","10")
plot2 = barplot(y2,
#names.arg = names,
main = "Average abundances in octets",
xlab = "abundances")
y3 = octets[[3]]
#names = names = c("1", "2", "3", "4", "5", "6","7","8","9","10","11","12")
plot3 = barplot(y3,
#names.arg = names,
main = "Average abundances in octets",
xlab = "abundances")
y4 = octets[[4]]
#names = names = c("1", "2", "3", "4", "5", "6","7","8","9","10","11","12","13","14","15")
barplot(y4,
#names.arg = names,
main = "Average abundances in octets",
xlab = "abundances")
### Coalescence simulation
Challengne_D = function() {
sizes  = c(500, 1000, 2500, 5000)
v = 0.002125
reps = 500
octets = rep(list(rep(0,6)),4)
for (j in 1:reps){
#browser()
octet = list()
for (i in 1:4){
size = sizes[i]     # set size to 500,1000 etc
theta = v * (size - 1) / (1 - v)
abundance = vector()
lineages = initialise_min(size)  # initialise lineagse to min of size
N = size
while (N > 1) {
p = theta / (theta + N - 1)
r = runif(1, 0:1)
index = sample(N, 2)
if (r < p) {
abundance = c(abundance, lineages[index[2]])
}
else {
lineages[index[1]]=lineages[index[1]] + lineages[index[2]]
}
lineages = lineages[-index[2]]
N = length(lineages)
}
abundance = sort(c(abundance, lineages), decreasing = TRUE)
octet[[i]] = octaves(abundance)
x = octet[[i]]
y = octets[[i]]
sum = sum_vect(x,y)
octets[[i]] = sum
}
}
par(mfrow = c(2, 2))
y1 = octets[[1]]/reps
plot1 = barplot(y1,
main = "Average abundances in octets",
xlab = "abundances")
y2 = octets[[2]]/reps
plot2 = barplot(y2,
main = "Average abundances in octets",
xlab = "abundances")
y3 = octets[[3]]/reps
plot3 = barplot(y3,
main = "Average abundances in octets",
xlab = "abundances")
y4 = octets[[4]]/reps
barplot(y4,
main = "Average abundances in octets",
xlab = "abundances")
}
challenge_D()
### Coalescence simulation
Challenge_D = function() {
sizes  = c(500, 1000, 2500, 5000)
v = 0.002125
reps = 500
octets = rep(list(rep(0,6)),4)
for (j in 1:reps){
#browser()
octet = list()
for (i in 1:4){
size = sizes[i]     # set size to 500,1000 etc
theta = v * (size - 1) / (1 - v)
abundance = vector()
lineages = initialise_min(size)  # initialise lineagse to min of size
N = size
while (N > 1) {
p = theta / (theta + N - 1)
r = runif(1, 0:1)
index = sample(N, 2)
if (r < p) {
abundance = c(abundance, lineages[index[2]])
}
else {
lineages[index[1]]=lineages[index[1]] + lineages[index[2]]
}
lineages = lineages[-index[2]]
N = length(lineages)
}
abundance = sort(c(abundance, lineages), decreasing = TRUE)
octet[[i]] = octaves(abundance)
x = octet[[i]]
y = octets[[i]]
sum = sum_vect(x,y)
octets[[i]] = sum
}
}
par(mfrow = c(2, 2))
y1 = octets[[1]]/reps
plot1 = barplot(y1,
main = "Average abundances in octets",
xlab = "abundances")
y2 = octets[[2]]/reps
plot2 = barplot(y2,
main = "Average abundances in octets",
xlab = "abundances")
y3 = octets[[3]]/reps
plot3 = barplot(y3,
main = "Average abundances in octets",
xlab = "abundances")
y4 = octets[[4]]/reps
barplot(y4,
main = "Average abundances in octets",
xlab = "abundances")
}
challenge_D()
Challenge_D()
y1
octets
octets[[1]]/reps
par(mfrow = c(2, 2))
y1 = octets[[1]]/reps
plot1 = barplot(y1,
main = "Average abundances in octets",
xlab = "abundances")
y2 = octets[[2]]/reps
plot2 = barplot(y2,
main = "Average abundances in octets",
xlab = "abundances")
y3 = octets[[3]]/reps
plot3 = barplot(y3,
main = "Average abundances in octets",
xlab = "abundances")
y4 = octets[[4]]/reps
barplot(y4,
main = "Average abundances in octets",
xlab = "abundances")
rm(list = ls())
sizes  = c(500, 1000, 2500, 5000)
v = 0.002125
reps = 500
octets = rep(list(rep(0,6)),4)
initialise_min = function(x) {
comm = rep(1, x)
return(comm)
}
octaves = function(x) {
oct = tabulate(floor(log2(x)) + 1)
return(oct)
}
sum_vect = function(x, y) {
if (length(x) < length(y))    {
short = x
long = y
newshort = c(x, rep(0, length(long) - length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(y, rep(0, length(long) - length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
for (j in 1:reps){
#browser()
octet = list()
for (i in 1:4){
size = sizes[i]     # set size to 500,1000 etc
theta = v * (size - 1) / (1 - v)
abundance = vector()
lineages = initialise_min(size)  # initialise lineagse to min of size
N = size
while (N > 1) {
p = theta / (theta + N - 1)
r = runif(1, 0:1)
index = sample(N, 2)
if (r < p) {
abundance = c(abundance, lineages[index[2]])
}
else {
lineages[index[1]]=lineages[index[1]] + lineages[index[2]]
}
lineages = lineages[-index[2]]
N = length(lineages)
}
abundance = sort(c(abundance, lineages), decreasing = TRUE)
octet[[i]] = octaves(abundance)
x = octet[[i]]
y = octets[[i]]
sum = sum_vect(x,y)
octets[[i]] = sum
}
}
par(mfrow = c(2, 2))
y1 = octets[[1]]/reps
plot1 = barplot(y1,
main = "Average abundances in octets",
xlab = "abundances")
y2 = octets[[2]]/reps
plot2 = barplot(y2,
main = "Average abundances in octets",
xlab = "abundances")
y3 = octets[[3]]/reps
plot3 = barplot(y3,
main = "Average abundances in octets",
xlab = "abundances")
y4 = octets[[4]]/reps
barplot(y4,
main = "Average abundances in octets",
xlab = "abundances")
View(octets)
View(octets)
View(octets)
y1
