m3_percent = round(apply(m3, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m3_percent) = c(1:10)
kable(m3_percent, format = "latex", caption = "Percentage of true positives for standarized data")%>%
kable_styling(latex_options = "hold_position")
prec_df_Imputed = Imputed_kmeans[[4]]
colnames(prec_df_Imputed) = c(1:10)
kable(prec_df_Imputed, format = "latex", caption = "Precision of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
prec_df = Scaled_kmeans[[4]]
colnames(prec_df) = c(1:10)
kable(prec_df, format = "latex", caption = "Precision of kmeans with standardized data")%>%
kable_styling(latex_options = "hold_position")
sens_df_Imputed = Imputed_kmeans[[4]]
colnames(sens_df_Imputed) = c(1:10)
kable(sens_df_Imputed, format = "latex", caption = "Sensitivity of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,fig.pos = "H" ,comment=NA, fig.align ="centre")
#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
library(rmarkdown)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
cat("\014")
library(dplyr)
library(ggplot2)
library(ggmap)
library(ggrepel)
library(nlme)
library(reshape)
library(gridExtra)
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
#select nearby woods
#uses data
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
#the wood location data
woods = read.csv("../Data/EastingNorthing.csv")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
#the wood location data
woods = read.csv("../Data/EastingNorthing.csv")
colnames(woods) = c("Site", "Easting","Northing","GridRef","Lat","Long")
#just for plotting
data = cbind(woods$Lat, woods$Long)
#select nearby woods
#uses data
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)+
geom_text_repel(data = nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
###############################
source('~/Documents/CMEECourseWork/CMEEMainProject/Code/SAC_plot.R', echo=TRUE)
ave_data =  cbind(areas,ave_full)
ggplot()+
geom_point(data = site1_max, aes(x = area, y = max_cf), color="red") +
geom_point(data = site1_min, aes(x = area, y = min_cf),color="blue")+
geom_point(data = ave_data, aes(x = areas, y = ave_full),color="black")
ggplot(data = ave_data, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")
ave_data =  as.data.frame(cbind(areas,ave_full))
View(ave_data)
ave_data =  as.data.frame(cbind(areas,ave_full))
ave_data$logarea = log(ave_data$areas)
ave_data$logavecf = log(ave_data$ave_full)
ggplot()+
geom_point(data = site1_max, aes(x = area, y = max_cf), color="red") +
geom_point(data = site1_min, aes(x = area, y = min_cf),color="blue")+
geom_point(data = ave_data, aes(x = areas, y = ave_full),color="black")
ggplot(data = ave_data, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")
site1_max$logarea = log(site1_max$area)
site1_max$logcf = log(site1_max$max_cf)
site1_min$logarea = log(site1_min$area)
site1_min$logcf = log(site1_min$min_cf)
ggplot(data = site1_max, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site_min, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site1_max, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site1_min, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site1_max, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site1_min, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")
ggplot(data = site1_max, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")
ggtitle("max method")
ggplot(data = site1_min, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")+
ggtitle("Min method")
?ggtitle
dev.off
dev.off()
ggplot()+
geom_point(data = site1_max, aes(x = area, y = max_cf), color="red") +
geom_point(data = site1_min, aes(x = area, y = min_cf),color="blue")+
geom_point(data = ave_data, aes(x = areas, y = ave_full),color="black")+
labs(title = "min, max and average cf methods")
ggplot(data = ave_data, aes(x = logarea, y = logavecf))+
geom_point()+
geom_smooth(method = "lm")+
labs(title = "average")
ggplot(data = site1_max, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")+
labs(title = "max method")
ggplot(data = site1_min, aes(x = logarea, y = logcf))+
geom_point()+
geom_smooth(method = "lm")+
labs(title = "min method")
fit1 <- lm(logavecf ~ logarea, data = ave_data)
ggplotRegression(fit1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(fit1)
fit2 = lm(logcf ~ logarea, data = site1_max)
ggplotRegression(fit2)
fit3 = lm(logcf ~ logarea, data = site1_min)
ggplotRegression(fit3)
ave_data = data.frame()
for (i in 1:103){
site_max = long_sac_max%>%filter(Site == i)
site_min = long_sac_min%>%filter(Site == i)
longest =  vector()
shortest = vector()
x1 = site_max$max_cf
x2 = site_min$min_cf
if (length(x1)>length(x2)){
longest = x1
shortest = x2
}else {
longest = x2
shortest = x1
}
diff = length(longest)  - length(shortest)
longest_cut = longest[1:length(shortest)] # take off the end cf's on longest
ave = (shortest + longest_cut)/2 # calcualte average
if (diff > 1){
index_replace = c(length(shortest)+1 : length(shortest)+diff)
}else{
index_replace = length(shortest)+1
}
replace = longest[index_replace] # now add the cut of bits back on
ave_full = c(ave,replace)
#make a dataframe
aves=  as.data.frame(cbind(areas,ave_full))
ave_data = rbind(ave_data,aves)
}
View(ave_data)
warnings()
site3_max = long_sac_max%>%filter(Site == 3)
site3_min = long_sac_min%>%filter(Site == 3)
View(site3_max)
View(site3_max)
View(site3_min)
longest =  vector()
shortest = vector()
x1 = site3_max$max_cf
x2 = site3_min$min_cf
if (length(x1)>length(x2)){
longest = x1
shortest = x2
}else {
longest = x2
shortest = x1
}
longest
shortest
diff = length(longest)  - length(shortest)
longest_cut = longest[1:length(shortest)] # take off the end cf's on longest
longest_cut
ave = (shortest + longest_cut)/2 # calcualte average
ave
if (diff > 1){
index_replace = c(length(shortest)+1 : length(shortest)+diff)
}else{
index_replace = length(shortest)+1
}
replace = longest[index_replace] # now add the cut of bits back on
replace
diff
length(shortest)
index_replace
length(shortest) + diff
c(length(shortest)+1 : length(shortest)+diff)
diff
length(shortest)+diff
length(shortest)+1
c(12:15)
c((length(shortest)+1) : (length(shortest)+diff))
ave_data = data.frame()
for (i in 1:103){
site_max = long_sac_max%>%filter(Site == i)
site_min = long_sac_min%>%filter(Site == i)
longest =  vector()
shortest = vector()
x1 = site_max$max_cf
x2 = site_min$min_cf
if (length(x1)>length(x2)){
longest = x1
shortest = x2
}else {
longest = x2
shortest = x1
}
diff = length(longest)  - length(shortest)
longest_cut = longest[1:length(shortest)] # take off the end cf's on longest
ave = (shortest + longest_cut)/2 # calcualte average
if (diff > 1){
index_replace = c((length(shortest)+1) : (length(shortest)+diff))
}else{
index_replace = (length(shortest)+1)
}
replace = longest[index_replace] # now add the cut of bits back on
ave_full = c(ave,replace)
#make a dataframe
aves=  as.data.frame(cbind(areas,ave_full))
ave_data = rbind(ave_data,aves)
}
warnings()
View(ave_data)
ave_data = data.frame()
for (i in 1:103){
site_max = long_sac_max%>%filter(Site == i)
site_min = long_sac_min%>%filter(Site == i)
longest =  vector()
shortest = vector()
x1 = site_max$max_cf
x2 = site_min$min_cf
if (length(x1)>length(x2)){
longest = x1
shortest = x2
}else {
longest = x2
shortest = x1
}
diff = length(longest)  - length(shortest)
longest_cut = longest[1:length(shortest)] # take off the end cf's on longest
ave = (shortest + longest_cut)/2 # calcualte average
if (diff > 1){
index_replace = c((length(shortest)+1) : (length(shortest)+diff))
}else{
index_replace = (length(shortest)+1)
}
replace = longest[index_replace] # now add the cut of bits back on
ave_full = c(ave,replace)
areas = seq(from = 200, to = 3200, by = 200) # make the correct length
areas_cut = areas[1:length(ave_full)]
#make a dataframe
aves=  as.data.frame(cbind(areas_cut,ave_full))
ave_data = rbind(ave_data,aves)
}
View(ave_data)
View(site_max)
source('~/Documents/CMEECourseWork/CMEEMainProject/Code/SAC_plot.R', echo=TRUE)
View(long_sac_min)
ave_data = data.frame()
for (i in 1:103){
site_max = long_sac_max%>%filter(Site == i)
site_min = long_sac_min%>%filter(Site == i)
longest =  vector()
shortest = vector()
x1 = site_max$max_cf
x2 = site_min$min_cf
if (length(x1)>length(x2)){
longest = x1
shortest = x2
}else {
longest = x2
shortest = x1
}
diff = length(longest)  - length(shortest)
longest_cut = longest[1:length(shortest)] # take off the end cf's on longest
ave = (shortest + longest_cut)/2 # calcualte average
if (diff > 1){
index_replace = c((length(shortest)+1) : (length(shortest)+diff))
}else{
index_replace = (length(shortest)+1)
}
replace = longest[index_replace] # now add the cut of bits back on
ave_full = c(ave,replace)
areas = seq(from = 200, to = 3200, by = 200) # make the correct length
areas_cut = areas[1:length(ave_full)]
Site = rep(i,length(ave_full))
#make a dataframe
aves=  as.data.frame(cbind(Site,areas_cut,ave_full))
ave_data = rbind(ave_data,aves)
}
View(ave_data)
fit_min = long_sac_min%>%group_by(Site)%>%lm(log(cf_min) ~ log(area))
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log(cf_min) ~ log(area), data =.)
("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log(min_cf) ~ log(area), data =.)
("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log(min_cf) ~ log(area)), data =.)
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log_cf_min ~ logarea), data =.)
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log_cf_min ~ logarea, data =.)
("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm(log_cf_min ~ logarea, data =.))
long_sac_min[,summary(lm("log_cf_min"~"logarea"$r.squared), by = Site)]
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm("log_cf_min" ~ "logarea", data =.))
fit_min = long_sac_min%>%group_by(Site)%>%do(model = lm("log_cf_min" ~ "logarea"))
site = long_sac_min%>%filter(Site ==1)
model_min = lm(site$log_cf_min ~ logarea)
site$logarea
model_min = lm(site$log_cf_min ~ site$logarea)
model_min$coefficients
summary(model_min)
s = summary(model_min)
s$r.squared
model_min$coefficients[2]
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==1)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = cbind(i,slope,r2)
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
View(min_data)
min_data = min_data[-1]
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==1)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==1)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
row.names(min_data) = c(1:103)
long_sac_max$logarea = log(long_sac_max$area)
long_sac_max$log_cf_min = log(long_sac_max$max_cf)
max_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==1)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
row.names(min_data) = c(1:103)
View(long_sac_min)
View(long_sac_max)
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
row.names(min_data) = c(1:103)
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
row.names(min_data) = c(1:103)
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
View(long_sac_max)
max_data = data.frame()
for(i in 1:103){
site = long_sac_max%>%filter(Site ==i)
model_max= lm(site$log_cf_max ~ site$logarea)
s = summary(model_max)
slope = model_max$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
max_data = rbind(max_data, this_row)
}
View(long_sac_max)
long_sac_max$logarea = log(long_sac_max$area)
long_sac_max$log_cf_max = log(long_sac_max$max_cf)
max_data = data.frame()
for(i in 1:103){
site = long_sac_max%>%filter(Site ==i)
model_max= lm(site$log_cf_max ~ site$logarea)
s = summary(model_max)
slope = model_max$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
max_data = rbind(max_data, this_row)
}
View(max_data)
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site ==i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
View(min_data)
site = long_sac_min%>%filter(Site ==103)
site
long_sac_min$logarea = log(long_sac_min$area)
long_sac_min$log_cf_min = log(long_sac_min$min_cf)
min_data = data.frame()
for(i in 1:103){
site = long_sac_min%>%filter(Site == i)
model_min = lm(site$log_cf_min ~ site$logarea)
s = summary(model_min)
slope = model_min$coefficients[2]
r2 = s$r.squared
this_row = as.data.frame(cbind(i,slope,r2))
min_data = rbind(min_data, this_row)
}
colnames(min_data) = c("Site","slope","R2")
row.names(min_data) = c(1:103)
