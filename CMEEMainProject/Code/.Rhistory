set.seed(42)
n = nrow(dataset)
shuffled = dataset[sample(n),]
train = shuffled[1:round(0.7*n),]
test = shuffled[(round(0.7*n)+1):n,]
splits[[1]] = train
splits[[2]] = test
return(splits)
}
#this subsets the data into species
create_train_test = function(dataset){
sets = as.character(unique(dataset[,1]))
train = data.frame()
test = data.frame()
split_data = list()
for (i in 1:length(sets)){
sub = subset(dataset, dataset[,1] == sets[i])
train_temp = shuffle(sub)[[1]]
test_temp = shuffle(sub)[[2]]
train = rbind(train, train_temp)
test = rbind(test, test_temp)
}
split_data[[1]] = train
split_data[[2]] = test
return(split_data)
}
#PS you can check the splits are correct with summary(train$species), summary(test$species)
#summary(maindata$species), this gives numbers in each species.
#to include a cross fold validation repeat above fold times
# performs the k means algorith over 10 repeats, returns BSS/Wss ratio, accuracy and
repeated_kmeans = function(dataset){
metrics_list = list()
accuracy_vector = vector()
ratio = vector()
species_no = data.frame(matrix(ncol = 7))
colnames(species_no) = speciesnames
sens = data.frame(row.names = speciesnames )
prec = data.frame(rownames = speciesnames)
for (i in 1:10){
kmeans_result = kmeans(dataset[-1], 7, 20, iter.max = 50, algorithm = "MacQueen")
ratio[i] = round(kmeans_result$tot.withinss/kmeans_result$totss, digits = 2)
kmeans_conf = table(Imputed_df$Species, kmeans_result$cluster)
accuracy_vector[i] = accuracy(kmeans_conf)
species = diag(kmeans_conf)
species_no = rbind(species_no, species)# just TP
s = sensitivity(kmeans_conf)
sens = cbind(sens, s[,2])
p = precision(kmeans_conf)
prec = cbind(prec,p[,2])
}
metrics_list[[1]] = ratio # wss/bss
metrics_list[[2]] = accuracy_vector #sum TP/no things done
metrics_list[[3]] = species_no[-1,]
metrics_list[[4]] = sens
metrics_list[[5]] = prec
return(metrics_list)
}
#Getting the results for the kmeans
#Imputed df without scaling
Imputed_kmeans = repeated_kmeans(Imputed_df)
#Semi scaled data
#Semi_scaled_kmeans = repeated_kmeans(Semi_Scaled_df)
# fully scaled data
Scaled_kmeans = repeated_kmeans(Scaled_df)
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("unstandardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("non-standardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display percentage of true positives from the confusion matrix calcualted in kmeans chunk above
m1 = Imputed_kmeans[[3]]
#m2 = Semi_scaled_kmeans[[3]]
m3 = Scaled_kmeans[[3]]
m1_percent = round(apply(m1, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m1_percent) = c(1:10)
kable(m1_percent, format = "latex", caption = "Percentage of true positives for non-standarized data")%>%
kable_styling(latex_options = "hold_position")
m2_percent = round(apply(m2, 1, function(x) (x/numspecies)*100), digits = 2)
m3_percent = round(apply(m3, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m3_percent) = c(1:10)
kable(m3_percent, format = "latex", caption = "Percentage of true positives for standarized data")%>%
kable_styling(latex_options = "hold_position")
prec_df_Imputed = Imputed_kmeans[[4]]
colnames(prec_df_Imputed) = c(1:10)
kable(prec_df_Imputed, format = "latex", caption = "Precision of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
prec_df = Scaled_kmeans[[4]]
colnames(prec_df) = c(1:10)
kable(prec_df, format = "latex", caption = "Precision of kmeans with standardized data")%>%
kable_styling(latex_options = "hold_position")
sens_df_Imputed = Imputed_kmeans[[4]]
colnames(sens_df_Imputed) = c(1:10)
kable(sens_df_Imputed, format = "latex", caption = "Sensitivity of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,fig.pos = "H" ,comment=NA, fig.align ="centre")
#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
library(rmarkdown)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
cat("\014")
library(dplyr)
library(ggplot2)
#Input all the ground flora data
Data = read.csv("../Data/GroundCover.csv")
Data_Yr2 = Data%>%filter(Yr_2 == 2)#%>%select(SITE,PLOT,NEST,COV,Amalgams)
colnames(Data_Yr2) = c("SITE", "PLOT","NEST","Cover","BRC_number","Year")
veg_codes = read.csv("../Data/vegetation_codes.csv")
# the  bryophytes, lichen etc have already been removed from these.
colnames(veg_codes) = c("Species", "BRC_number")
Data_Yr2_veg = Data_Yr2%>% inner_join(veg_codes)
# returns the species richness for each site/plot/nest as a list of data frames
# richness[[3]] will give plot by nest data frame of richness
# NAs are not counted, these occur for sapling counts which need to be added in to the plot richness.
nest_richness = function(data){
site_list = list()
#browser()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
plot_nest_df = data.frame()
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
tmp = vector()
for (k in 1:5){
nestdata = plotdata%>%filter(NEST ==k)
tmp = c(tmp, nrow(nestdata))
}
plot_nest_df = rbind(plot_nest_df, tmp)
colnames(plot_nest_df) = c("nest1","nest2","nest3","nest4","nest5")
}
site_list[[i]]= plot_nest_df
}
return(site_list)
}
spec_rich = nest_richness(Data_Yr2_veg)
#Since nest level data is only modelled as species~area - no other vars, spec_rich list is all thats
#needed. This data will be analysed from this document, a csv is not needed because it is not being added #to another file.
#spec_rich is list, spec_rich[[1]] returns list of richnesses for plot 1-16, nest 1-5 in site 1
# this does not include saplings unless recored - i.e. they will be little baby plants.
# now need to include the NAs and combine them into a plot richness
plot_richness = function(data){
site_matrix = matrix(nrow = 103, ncol = 16)
#browser()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
plot_nest_df = data.frame()
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
site_matrix[i,j] = length(unique(plotdata$BRC_number))
# for the seedlings there is sometimes record in specified plot, and NA record, therefore have
#used unique to capture those that are NAs, but not double count when same species listed in a nest
}
}
return(site_matrix)
}
plot_rich = plot_richness(Data_Yr2_veg)
#plot_rich[i,j] returns richness for site i plot j. May not equate to sum of nest richness because saplings are included.
#Missing plots come up as 0s - but note, some "missing" plots do have vegetation entries. Handle within each #woodland modelled??
write.csv(plot_rich,"../Data/plot_rich.csv")
#species richness per nest is not saved to csv because its a list.
#use spec_rich[[1]] for nest richness of all plots of site 1
# just calculates richness found in each wood, no extrapolation.
#d[i] is richness of wood i
basic_richness = function(data){
d = rep(0,103)
for (i in 1:103){
site = data%>%filter(SITE==i)
d[i]  = length(unique(site$BRC_number))
}
return(d)
}
d = basic_richness(Data_Yr2_veg)
##Plot richnesses. cum_rich_all[[1]] will give the cumulative richness for site 1, for all 16 plots.
##need spec_rich calculated above
cum__rich_all = list()
for ( i in 1:103){
#browser()
site = spec_rich[[i]]
site = as.data.frame(site)
cum_rich_site = data.frame()
for (j in 1:16) {
plot = site[j,]
r = 0
cumrich = rep(0,5)
for (n in 1:5){
r = r + plot[[n]]
cumrich[n] = r
}
cum_rich_site = rbind(cum_rich_site, cumrich)
}
colnames(cum_rich_site) = c("nest1","nest2","nest3","nest4","nest5")
cum__rich_all[[i]] = cum_rich_site
}
#cum_rich_all is list of cumulative richness for each plot/site. cum_rich_all[[1]] gives cumulative
#richness for all plots in site 1 for nest 1 - 5
#some stats
#wood_rich calcualted in maps.R - it binds the richness to location vars
max_wood = wood_rich%>%filter(Site==match(max(d),d))
#Look at top and bottom quartiles?
u_woods = wood_rich%>%filter(d>100)
woods = read.csv("../Data/EastingNorthing.csv")
colnames(woods) = c("Site", "Easting","Northing","GridRef","Lat","Long")
#just for plotting
data = cbind(woods$Lat, woods$Long)
#d is calucalted in MainProjRichness.Rmd - the simple richness of each wood
wood_rich = cbind(woods,d)
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
woods = read.csv("../Data/EastingNorthing.csv")
colnames(woods) = c("Site", "Easting","Northing","GridRef","Lat","Long")
#just for plotting
data = cbind(woods$Lat, woods$Long)
#d is calucalted in MainProjRichness.Rmd - the simple richness of each wood
wood_rich = cbind(woods,d)
#some stats
#wood_rich calcualted in maps.R - it binds the richness to location vars
max_wood = wood_rich%>%filter(Site==match(max(d),d))
min_wood = wood_rich%>%filter(Site==match(min(d),d))
#wont work with 0s
plot_rich[plot_rich == 0] = NA
mins = apply(plot_rich,1,min,na.rm=TRUE)
maxs = apply(plot_rich,1,max,na.rm=TRUE)
ranges = maxs - mins
max_range= max(ranges)
min_range = min(ranges)
max_range_wood = wood_rich%>%filter(Site==match(max(ranges),ranges))
min_range_wood = wood_rich%>%filter(Site==match(min(ranges),ranges))
stats = rbind(max_wood,min_wood, max_range_wood, min_range_wood)
values = c(max(d),min(d),max_range,min_range)
n = colnames(stats)
n = c(n[-7],"values")
colnames(stats) = n
rownames(stats) = c("max richness","min richness","max range","min range")
#Look at top and bottom quartiles?
u_woods = wood_rich%>%filter(d>100)
l_woods = wood_rich%>%filter(d<60)
good_bad = rbind(u_woods,l_woods)
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(rich)
ggplot(melted, (aes_string(x='variable', y='value')) )+
geom_boxplot()
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(cum_rich)
ggplot(data = melted) +  geom_point(aes(x=variable,y=value))
library(reshape)
##########################
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(rich)
ggplot(melted, (aes_string(x='variable', y='value')) )+
geom_boxplot()
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(cum_rich)
ggplot(data = melted) +  geom_point(aes(x=variable,y=value))
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(rich)
ggplot(melted, (aes_string(x='variable', y='value')) )+
geom_boxplot()
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted = melt(cum_rich)
ggplot(data = melted) +  geom_point(aes(x=variable,y=value))
ggplot(melted, (aes_string(x='variable', y='value')) )+
geom_boxplot()+
geom_point(aes(x=variable,y=value))
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_r = melt(rich)
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_cr = melt(cum_rich)
ggplot(melted, (aes_string(x='variable', y='value')) )+
geom_boxplot()+
geom_point(aes(x=variable,y=value))
ggplot(melted_r, (aes_string(x='variable', y='value')) )+
geom_boxplot()+
geom_point(aes(x=variable,y=value), data = melted_cr)
melted_cr = melt(cum_rich)
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
cum_rich = cum_rich_all[[1]]
##Plot richnesses. cum_rich_all[[1]] will give the cumulative richness for site 1, for all 16 plots.
##need spec_rich calculated above
cum__rich_all = list()
for ( i in 1:103){
#browser()
site = spec_rich[[i]]
site = as.data.frame(site)
cum_rich_site = data.frame()
for (j in 1:16) {
plot = site[j,]
r = 0
cumrich = rep(0,5)
for (n in 1:5){
r = r + plot[[n]]
cumrich[n] = r
}
cum_rich_site = rbind(cum_rich_site, cumrich)
}
colnames(cum_rich_site) = c("nest1","nest2","nest3","nest4","nest5")
cum__rich_all[[i]] = cum_rich_site
}
#cum_rich_all is list of cumulative richness for each plot/site. cum_rich_all[[1]] gives cumulative
#richness for all plots in site 1 for nest 1 - 5
cum_rich = cum_rich_all[[1]]
##Plot richnesses. cum_rich_all[[1]] will give the cumulative richness for site 1, for all 16 plots.
##need spec_rich calculated above
cum__rich_all = list()
for ( i in 1:103){
#browser()
site = spec_rich[[i]]
site = as.data.frame(site)
cum_rich_site = data.frame()
for (j in 1:16) {
plot = site[j,]
r = 0
cumrich = rep(0,5)
for (n in 1:5){
r = r + plot[[n]]
cumrich[n] = r
}
cum_rich_site = rbind(cum_rich_site, cumrich)
}
colnames(cum_rich_site) = c("nest1","nest2","nest3","nest4","nest5")
cum_rich_all[[i]] = cum_rich_site
}
##Plot richnesses. cum_rich_all[[1]] will give the cumulative richness for site 1, for all 16 plots.
##need spec_rich calculated above
cum_rich_all = list()
for ( i in 1:103){
#browser()
site = spec_rich[[i]]
site = as.data.frame(site)
cum_rich_site = data.frame()
for (j in 1:16) {
plot = site[j,]
r = 0
cumrich = rep(0,5)
for (n in 1:5){
r = r + plot[[n]]
cumrich[n] = r
}
cum_rich_site = rbind(cum_rich_site, cumrich)
}
colnames(cum_rich_site) = c("nest1","nest2","nest3","nest4","nest5")
cum_rich_all[[i]] = cum_rich_site
}
#cum_rich_all is list of cumulative richness for each plot/site. cum_rich_all[[1]] gives cumulative
#richness for all plots in site 1 for nest 1 - 5
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_r = melt(rich)
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_cr = melt(cum_rich)
ggplot(melted_r, (aes_string(x='variable', y='value')) )+
geom_boxplot()+
geom_point(aes(x=variable,y=value), data = melted_cr)
f_bestsite = spec_rich[[83]]
cf_bestsite = cum__rich_all[[83]]
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
f_bestsite = f_bestsite[!is.na]
melted_f = melt(f_bestsite)
melted_cf = melt(cf_bestsite)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "red")
melted_cf = melt(cf_bestsite)
f_bestsite = spec_rich[[83]]
cf_bestsite = cum_rich_all[[83]]
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
f_bestsite = f_bestsite[!is.na]
melted_f = melt(f_bestsite)
melted_cf = melt(cf_bestsite)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "red")
cf_bestsite = cf_bestsite[-16,]
cf_bestsite$plot = plots
melted_cf = melt(cf_bestsite)
model2 = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
#select best wood and do a GLM, mabe extend to all 103 and look at differences is models?
#best wood = site 83
#spec_rich, calculated in MainProjRich is nest level richnesses
#spec_rich[[i]] = site i, df of richness for 16 plots, 5 nests
#cum_rich_all[[i]] = = site i, cumulative richness
library(lme4)
model2 = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
#select best wood and do a GLM, mabe extend to all 103 and look at differences is models?
#best wood = site 83
#spec_rich, calculated in MainProjRich is nest level richnesses
#spec_rich[[i]] = site i, df of richness for 16 plots, 5 nests
#cum_rich_all[[i]] = = site i, cumulative richness
library(lme4)
#select best wood and do a GLM, mabe extend to all 103 and look at differences is models?
#best wood = site 83
#spec_rich, calculated in MainProjRich is nest level richnesses
#spec_rich[[i]] = site i, df of richness for 16 plots, 5 nests
#cum_rich_all[[i]] = = site i, cumulative richness
library(nlme)
model2 = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
fit = predict(model2)
melted_cf$fit = fit
fit = predict(model2)
model2 = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
cf_bestsite
melted_cf
cf_bestsite$plot = plots
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15")
cf_bestsite = cf_bestsite[-16,]
cf_bestsite$plot = plots
melted_cf = melt(cf_bestsite)
model2 = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
fit = predict(model2)
melted_cf$fit = fit
ggplot(melted_cf, aes(x = variable, y = fit))+
geom_line(aes(group = plot))+geom_point()
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "red") +
geom_point(aes(x=variable, y = fit), data = melted_cf)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "red") +
geom_line(aes(x=variable, y = fit), data = melted_cf)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "red") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_cf, aes(x = variable, y = fit))+
geom_line(aes(group = plot), colour = "red")+geom_point()
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_cf, aes(x = variable, y = fit))+
geom_line(aes(group = plot), colour = "red")+geom_point()
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_cf, aes(x = variable, y = fit))+
geom_line(aes(group = plot), colour = "red")+geom_point()
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), data = melted_cf)
ggplot(melted_f, (aes_string(x='variable', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3) +
geom_point(aes(x=variable,y=value,na.rm =TRUE), data = melted_cf, colour = "black") +
geom_line(aes(x=variable, y = fit, group = plot), colour = "red", data = melted_cf)
summary(model2)
anova.lme(model2)
cf_bestsite
anova(cf_bestsite)
?anova
anova(model2)
plot(model2)
library(glmm)
install.packages("glmm")
library(glmm)
?glmm
head(melted_cf)
model_glmm = glmm(value~variable, random = ~1|plot, data = melted_cf)
model_glmm = glmm(value~variable, random = ~1|plot, data = melted_cf, family = poisson)
model_glmm = glmm(value~variable, random = ~1|plot, data = melted_cf, family = poisson)
model_nlme= nlme(value~variable, random = ~1|plot, data = melted_cf)
?nlme
melted_cf
model_nlme= nlme(ln(value)~variable, fixed = variable, random = plot ~ 1)
model_nlme = lme(log(value)~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
rich = spec_rich[[1]]
colnames(rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_r = melt(rich)
cum_rich = cum_rich_all[[1]]
colnames(cum_rich) = c("nest1","nest2","nest3","nest4","nest5")
melted_cr = melt(cum_rich)
ggplot(melted_r, (aes_string(x='variable', y='value')) )+
geom_boxplot()+
geom_point(aes(x=variable,y=value), data = melted_cr)
