fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.1){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
plot(NA, xlim=c(0,2), ylim=c(0,5), xlab="X", ylab="Y")
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,5), xlab="X", ylab="Y")
fern(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
fern(c(1,0),1,1)
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.75*distance2, direction = (pi/2) )
}
}
fern2 = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.75*distance2, direction = (pi/2) )
}
}
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern2(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern2(c(1,0),0.7,1)
knitr::opts_chunk$set(echo = TRUE)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
fern(c(1,0),1,1)
load("/home/petra/Documents/CMEECourseWork/HPC/Results/Cluster_1207/pg5117/pg5117_cluster_1.rda")
installed.packages()
library(ggraph)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
#library(plyr)
library(ggplot2)
library(gridExtra) # for the ggplots created in for loops
#clear the workspace
rm(list = ls())
cat("\014")
#to generate plot of a site
PlotSite = function(i){
Site = DBH_Yr2_agg %>% filter(SITE == i)
Plotname = paste("Site", i, sep = "")
Plot = ggplot(data = Site, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
facet_wrap(~PLOT)
labs(title = Plotname)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
#to generate plot of a plot
PlotPlot = function(i,j){
data = DBH_Yr2_agg %>% filter(SITE == i)%>%filter(PLOT==j)
t1 = paste("site",i)
t2 = paste("plot",j)
Title = paste(t1,t2, sep = " ")
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
labs(title = Title)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
#PS not displaing title, not sure why.
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'table_DBH_live_counts_71-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
DBH_measurements = as.tbl(read.csv(fullfile))
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
#clear the workspace
rm(list = ls())
cat("\014")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
#to generate plot of a site
PlotSite = function(i){
Site = DBH_Yr2_agg %>% filter(SITE == i)
Plotname = paste("Site", i, sep = "")
Plot = ggplot(data = Site, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
facet_wrap(~PLOT)
labs(title = Plotname)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
#to generate plot of a plot
PlotPlot = function(i,j){
data = DBH_Yr2_agg %>% filter(SITE == i)%>%filter(PLOT==j)
t1 = paste("site",i)
t2 = paste("plot",j)
Title = paste(t1,t2, sep = " ")
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
labs(title = Title)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
#PS not displaing title, not sure why.
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'table_DBH_live_counts_71-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
DBH_measurements = as.tbl(read.csv(fullfile))
#Just year 2
Yr2_DBH = DBH_measurements %>% filter(Yr == 2)
# One line per dbh per plot, i.e. ignore species
DBH_Yr2_agg = aggregate(Count~DBH_class + PLOT + SITE, data = Yr2_DBH, sum)
DBH_Yr2_agg = filter(DBH_Yr2_agg, PLOT !=60)
# Count is now the sum of counts in each DBH class.
#This code just subtracts, f1 - f2 - f3 - ... - fn, where fi are the counts in each class
DBH_index = function(DBH_counts){
index = DBH_counts[1]-sum(DBH_counts[-1])
return(index)
}
indices =  aggregate(Count~PLOT + SITE, data = DBH_Yr2_agg, DBH_index)
#indices are now per plot per site indices
View(indices)
DBH_Yr2_agg%>%filter(SITE == 1)%>%filter(PLOT == 1)
PlotPlot(2)
PlotPlot(2,10)
PlotPlot(2,11)
DBH_Yr2_agg %>% filter(SITE == 2) %>% filter (PLOT == 10)
DBH_Yr2_agg %>% filter(SITE == 2) %>% filter (PLOT == 11)
Site2_plot10_index = indices%>%filter(SITE == 2)%>%filter(PLOT ==10)
Site2_plot11_index = indices%>%filter(SITE == 2)%>%filter(PLOT ==11)
r = c("Plot10","Plot11")
c = "Site 2"
index_df = as.data.frame(rbind(Site2_plot10_index,Site2_plot11_index))
index_df
indices%>%filter(PLOT + SITE, Count < 0)
negs = indices%>%filter(PLOT + SITE, Count < 0)
head(negs)
PlotPlot(2,1)
DBH_Yr2_aggfilter(SITE == 2)%>%filter(PLOT == 1)
DBH_Yr2_agg%>%filter(SITE == 2)%>%filter(PLOT == 1)
DBH_Yr2_agg%>%filter(SITE == 2)%>%filter(PLOT == 2)
PlotPlot(2,1)
DBH_Yr2_agg%>%filter(SITE == 1)%>%filter(PLOT == 2)
PlotPlot(1,2
)
View(DBH_Yr2_agg)
View(DBH_Yr2_agg)
DBH_Yr2_agg%>%filter(DBH_class==1 && Count > 0)
DBH_Yr2_agg%>%filter(DBH_class==1 & Count > 0)
View(negs)
View(negs)
DBH_class1 = DBH_Yr2_agg%>%select(SITE + PLOT + Count, DBH_class == 1)
DBH_class1 = DBH_Yr2_agg%>%select( DBH_class == 1)
DBH_class1 = DBH_Yr2_agg%>%filter(DBH_class ==1)
View(DBH_class1)
View(DBH_class1)
colnames(negs)= c("PLOT", "SITE","Index")
View(negs)
View(negs)
library(compare)
common = intersection(DBH_class1$SITE, negs$SITE)
common = intersect(DBH_class1$SITE, negs$SITE)
common
inner_join(DBH_class1,negs)
head(inner_join(DBH_class1,negs))
PlotPlot(1,4)
PlotPlot(1,5)
#to generate plot of a site
PlotSite = function(i){
Site = DBH_Yr2_agg %>% filter(SITE == i)
Plotname = paste("Site", i, sep = "")
Plot = ggplot(data = Site, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
facet_wrap(~PLOT)
labs(title = Plotname)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
#to generate plot of a plot
PlotPlot = function(i,j){
data = DBH_Yr2_agg %>% filter(SITE == i)%>%filter(PLOT==j)
t1 = paste("site",i)
t2 = paste("plot",j)
Title = paste(t1,t2, sep = " ")
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity", col = "black", fill = "green") +
scale_x_continuous("DBH class",
breaks = 1:20,
labels = c(1:20),
limits = c(0, 20))+
labs(title = Title)#+
#theme(axis.ticks = element_blank(), axis.text.x = element_blank())
print(Plot)
}
# To get DBH dta for a plot
DBH = function(i,j){
DBH_Yr2_agg%>%filter(SITE == i)%>% filter(PLOT == j)
}
#This code just subtracts, f1 - f2 - f3 - ... - fn, where fi are the counts in each class
DBH_index = function(DBH_counts){
index = DBH_counts[1]-sum(DBH_counts[-1])
return(index)
}
indices =  aggregate(Count~PLOT + SITE, data = DBH_Yr2_agg, DBH_index)
colnames(indices) = c("PLOT","SITE","INDEX")
#indices are now per plot per site indices
#Some ways of exploring the idices
negs = indices%>%filter(PLOT + SITE, Count < 0) # just look at negative indices
#This code just subtracts, f1 - f2 - f3 - ... - fn, where fi are the counts in each class
DBH_index = function(DBH_counts){
index = DBH_counts[1]-sum(DBH_counts[-1])
return(index)
}
indices =  aggregate(Count~PLOT + SITE, data = DBH_Yr2_agg, DBH_index)
colnames(indices) = c("PLOT","SITE","INDEX")
#indices are now per plot per site indices
#Some ways of exploring the idices
negs = indices%>%filter(PLOT + SITE, INDEX < 0) # just look at negative indices
DBH_class1 = DBH_Yr2_agg%>%filter(DBH_class ==1)
neg_details_inner_join(DBH_class1,negs) # all plots with neg index and trees in                                                 #dbh_class 1
#indices are now per plot per site indices
#Some ways of exploring the idices
negs = indices%>%filter(PLOT + SITE, INDEX < 0) # just look at negative indices
DBH_class1 = DBH_Yr2_agg%>%filter(DBH_class ==1)
neg_details_inner_join(DBH_class1,negs) # all plots with neg index and trees in                                                 #dbh_class 1
#This code just subtracts, f1 - f2 - f3 - ... - fn, where fi are the counts in each class
DBH_index = function(DBH_counts){
index = DBH_counts[1]-sum(DBH_counts[-1])
return(index)
}
indices =  aggregate(Count~PLOT + SITE, data = DBH_Yr2_agg, DBH_index)
colnames(indices) = c("PLOT","SITE","INDEX")
#indices are now per plot per site indices
#Some ways of exploring the idices
negs = indices%>%filter(PLOT + SITE, INDEX < 0) # just look at negative indices
DBH_class1 = DBH_Yr2_agg%>%filter(DBH_class ==1)
neg_details = inner_join(DBH_class1,negs) # all plots with neg index and trees in                                                 #dbh_class 1
DBH_class1 = DBH_Yr2_agg%>%filter(DBH_class ==1)
HEAD(negs)
head(negs)
PlotPlot(1,2)
PlotPlot(1,1)
PlotPlot(1,4)
PlotPlot(1,7)
PlotPlot(1,2)
head(neg_details)
PlotPlot(1,4)
PlotPlot(1,5)
PlotPlot(1,5)
PlotPlot(1,5)
DBH(1,5)
In = function(i,j){
indices%>%filter(SITE == i)%>%filter(PLOT == j)
}
DBH(2,10)
DBH(2,11)
In(2,10)
In(2,11)
PlotPlot(1,5)
DBH(1,5)
In(1,5)
View(neg_details)
PlotPlot(80,2)
PlotPlot(80,1)
PlotPlot(2,8)
PlotPlot(7,14)
head(neg_details)
head(sort(neg_details))
sort(neg_details)
order(neg_details$INDEX)
ordered_neg = neg_details[order(INDEX, Count),]
ordered_neg = neg_details[order(INDEX),]
ordered_neg = neg_details[order(INDEX),]
ordered_neg = neg_details[order(neg_details$INDEX),]
head(ordered_neg)
head(neg_details[order(neg_details$INDEX),])
plot_list = list()
plot_list[[1]] = PlotPlot(80,2)
plot_list[[2]] = PlotPlot(80,1)
plot_list[[3]] = PlotPlot(2,8)
plot_list[[4]] = PlotPlot(7,14)
print(grobs = plot_list, ncol = 2)
plot_list = list()
plot_list[[1]] = PlotPlot(80,2)
plot_list[[2]] = PlotPlot(80,1)
plot_list[[3]] = PlotPlot(2,8)
plot_list[[4]] = PlotPlot(7,14)
grid.arrange(grobs = plot_list, ncol = 2)
plot_list = list()
plot_list[[1]] = PlotPlot(80,2)
plot_list[[2]] = PlotPlot(80,1)
plot_list[[3]] = PlotPlot(2,8)
plot_list[[4]] = PlotPlot(7,14)
grid.arrange(grobs = plot_list, ncol = 2)
plot_list[[4]] = PlotPlot(7,14)
plot_list[[1]] = PlotPlot(80,2)
plot_list[[2]] = PlotPlot(80,1)
plot_list[[3]] = PlotPlot(2,8)
plot_list[[4]] = PlotPlot(7,14)
grid.arrange(grobs = plot_list, ncol = 2)
View(plot_list)
#Might be useful to compare plots which have similar means and see if the dbh distribution looks similar
# The if here needed no Nans in the df, otherwise it stopped at first Nan it came across
# This funtion calculates Site,Plot and means for all sites/plot below the threshold.
#Then randomly select some to be plotted
GetSites = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((means[i, j] < upper) && (means[i, j] > lower)) {
m_df = rbind(m_df, c(i, j, means[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Mean")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
Title = paste(site, plot, mu, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
#Might be useful to compare plots which have similar means and see if the dbh distribution looks similar
# The if here needed no Nans in the df, otherwise it stopped at first Nan it came across
# This funtion calculates Site,Plot and means for all sites/plot below the threshold.
#Then randomly select some to be plotted
GetSites = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((means[i, j] < upper) && (means[i, j] > lower)) {
m_df = rbind(m_df, c(i, j, means[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Mean")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
Title = paste(site, plot, mu, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
#enter the lower and upper limit of the means in GetSites(lower,upper)
GetSites(0,10)
#some other numbers that might be useful
max_class = DBH_Yr2_agg%>%filter(DBH_class == max(DBH_class)) #=32, but not for many things
highest_freq = DBH_Yr2_agg%>%filter(Count == max(Count)) #=372 in dbh 1 at Site103 plot14
modal_dbh  = Mode(DBH_Yr2_agg%>%select(DBH_class))#1
#some other numbers that might be useful
max_class = DBH_Yr2_agg%>%filter(DBH_class == max(DBH_class)) #=32, but not for many things
highest_freq = DBH_Yr2_agg%>%filter(Count == max(Count)) #=372 in dbh 1 at Site103 plot14
modal_dbh  = Mode(DBH_Yr2_agg%>%select(DBH_class))#1
Modes_df = data.frame()
for (i in 1:130){
for (j in 1:16){
data = DBH_Yr2_agg%>%filter(SITE == i)%>%filter(PLOT == j)
data = data[,c(1,4)]
Modes_df[i,j] = data%>%filter(DBH_class, Count == max(Count))
}
}
#some other numbers that might be useful
max_class = DBH_Yr2_agg%>%filter(DBH_class == max(DBH_class)) #=32, but not for many things
highest_freq = DBH_Yr2_agg%>%filter(Count == max(Count)) #=372 in dbh 1 at Site103 plot14
#modal_dbh  = Mode(DBH_Yr2_agg%>%select(DBH_class))#1
# get the means of each plot
means = data.frame()
dbh_classes = c(1:32)
dbh_values = seq(from = 7.5, to = 162.5, length = 32)
for (i in 1:103){
sitedata = DBH_Yr2_agg%>%filter(SITE == i)
for (j in 1:16) {
plotdata = sitedata%>%filter(PLOT == j)
means[i,j] = round(sum(plotdata$Count*(plotdata$DBH_class*5+2.5))/sum(plotdata$Count), digits = 2)
}
}
rownames(means) = c(1:103)
colnames(means) = c(1:16)
#the Nan a=might be an issue, I think its Ok to replace them with zeros
means = replace(means, is.na(means),0)
#Might be useful to compare plots which have similar means and see if the dbh distribution looks similar
# The if here needed no Nans in the df, otherwise it stopped at first Nan it came across
# This funtion calculates Site,Plot and means for all sites/plot below the threshold.
#Then randomly select some to be plotted
GetSites = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((means[i, j] < upper) && (means[i, j] > lower)) {
m_df = rbind(m_df, c(i, j, means[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Mean")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
Title = paste(site, plot, mu, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
#enter the lower and upper limit of the means in GetSites(lower,upper)
GetSites(0,10)
#You can repeatedly call this chunk to see different random selections of plots
#with means within the range specified
plot_list = list()
plot_list[[1]] = PlotPlot(80,2)
plot_list[[2]] = PlotPlot(80,1)
plot_list[[3]] = PlotPlot(2,8)
plot_list[[4]] = PlotPlot(7,14)
grid.arrange(grobs = plot_list, ncol = 2)
