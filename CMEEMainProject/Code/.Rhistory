for (j in 1:16) {
plot = site[j,]
r = 0
cumrich = rep(0,5)
for (n in 1:5){
r = r + plot[[n]]
cumrich[n] = r
}
cum_rich_site = rbind(cum_rich_site, cumrich)
}
colnames(cum_rich_site) = c("nest1","nest2","nest3","nest4","nest5")
cum_rich_all[[i]] = cum_rich_site
}
saveRDS(cum_rich_all, "CumulateveRichness.RDS")
# modelling the best wood only
best_wood = wood_rich[wood_rich$d == max(wood_rich$d),]
#some stats, might use these
wood_rich = cbind(woods,d) # just add richness to locations
max_wood = wood_rich%>%filter(Site==match(max(d),d))
min_wood = wood_rich%>%filter(Site==match(min(d),d))
#wont work with 0s
plot_rich[plot_rich == 0] = NA
min_max = rbind(min_wood, max_wood)
mins = apply(plot_rich,1,min,na.rm=TRUE)
maxs = apply(plot_rich,1,max,na.rm=TRUE)
ranges = maxs - mins
max_range= max(ranges)
min_range = min(ranges)
max_range_wood = wood_rich%>%filter(Site==match(max(ranges),ranges))
min_range_wood = wood_rich%>%filter(Site==match(min(ranges),ranges))
stats = rbind(max_wood,min_wood, max_range_wood, min_range_wood)
values = c(max(d),min(d),max_range,min_range)
n = colnames(stats)
n = c(n[-7],"values")
colnames(stats) = n
#rownames(stats) = c("max richness","min richness","max range","min range")
#function to create a list of graphs of raw cf from the vector sitevector
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
plot_site = function(sitevector){
#browser()
for (i in 1:length(sitevector)){
site = sitevector[i]
cf_site = cum_rich_all[[site]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
siteno  = paste("Site",site)
p = ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
labs(title = siteno)+
ylab("cumulative richness")+
theme(plot.title = element_text(size = 10))
plot_list[[i]] = p
}
return(plot_list)
}
# repeat above but plot on A^0.25 axis to show relationship more easily
plot_site_trans = function(sitevector){
#browser()
for (i in 1:length(sitevector)){
site = sitevector[i]
cf_site = cum_rich_all[[site]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
siteno  = paste("Site",site)
p = ggplot(melted_cf)+
geom_point(aes(x = (area)^0.25, y = value), colour = "black")+
labs(title = siteno)+
ylab("cumulative richness")+
theme(plot.title = element_text(size = 12))
plot_list[[i]] = p
}
return(plot_list)
}
# modelling the best wood only
best_wood = wood_rich[wood_rich$d == max(wood_rich$d),]
x = best_wood$Site
f_bestsite = spec_rich[[x]]
cf_bestsite = cum_rich_all[[x]]
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
#f_bestsite = f_bestsite[!is.na]
melted_f = melt(f_bestsite)
melted_cf = melt(cf_bestsite)
# particular prep adding plots, removing plot 16 - for plot 83 empty - and remelting
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15")
cf_bestsite = cf_bestsite[-16,]
cf_bestsite$plot = plots
melted_cf = melt(cf_bestsite)
f_bestsite = f_bestsite[-16,]
melted_f = melt(f_bestsite)
#lets add areas to data.
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,15)), decreasing = FALSE)
melted_cf$area = areas
melted_f$area = areas
# scatter plots of raw cf data for top 8 woods
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site_trans(site_to_plot)
#scatter plots of raw cf for worst 8 woods
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site_trans(site_to_plot)
# modelling the best wood only
best_wood = wood_rich[wood_rich$d == max(wood_rich$d),]
x = best_wood$Site
f_bestsite = spec_rich[[x]]
cf_bestsite = cum_rich_all[[x]]
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
#f_bestsite = f_bestsite[!is.na]
melted_f = melt(f_bestsite)
melted_cf = melt(cf_bestsite)
# particular prep adding plots, removing plot 16 - for plot 83 empty - and remelting
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15")
cf_bestsite = cf_bestsite[-16,]
cf_bestsite$plot = plots
melted_cf = melt(cf_bestsite)
f_bestsite = f_bestsite[-16,]
melted_f = melt(f_bestsite)
#lets add areas to data.
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,15)), decreasing = FALSE)
melted_cf$area = areas
melted_f$area = areas
#box plots of best wood, data from above chunk
melted_f$area = as.factor(melted_f$area) # ps, wont plot as separate plots if x continous
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 83, best wood, spread of richness per nest across all plots")
#box plots now just space out neatly, not to scale, so cant put on same graph
# nlme log log model for best wood NB log = ln
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
fit3 = predict(model_nlme_area_log)
melted_cf$fit3 = fit3
#raw data cf scatter plot best wood
ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
ggtitle("Raw data, site 83, cumulative richness across all plots with increasing area")+
annotate("text", x = 75, y = 60,
label = "Change in richness due to area less than change in richness due to plot")
#look at species in site 83
site83 = Data_Yr2_veg%>%filter(SITE==83)
site83distinctBRC = distinct(site83,BRC_number)
species_list = inner_join(site83distinctBRC, veg_codes)
#png("../Data/Talk/richlist")
grid.table(species_list)
species_list
#box plots of worst wood, data from above chunk
melted_f$area = as.factor(melted_f$area) # ps, wont plot as separate plots if x continous
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 78, worst wood, spread of richness per nest across all plots")
#box plots now just space out neatly, not to scale, so cant put on same graph
#raw data cf scatter plot worst wood
#png("../Data/Talk/8Worst.png")
ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
ggtitle("Raw data, site 78, cumulative richness across all plots with increasing area")+
annotate("text", x = 100, y = 9,
label = "Change in richness due to area less than change in richness due to plot")+
ylim(0,10)
#pdf("../Results/slopes_hist")
ggplot(fits, aes(slope))+
geom_histogram(binwidth = 0.05, col = "black", fill = "grey")+
ggtitle("Distribution of slopes in linear mixed effect ln/ln fit", subtitle = "S = cA^0.25 ish")
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
p_slope = summary(model_nlme_area_log)$tTable[2,5]
row = c(int,slope, p_slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope","p_slope")
return(coef_df)
}
fits = fits_all_woods()
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
minvars = fits[which(fits$slope == min(fits$slope)),]
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))+
ggtitle("ln/ln fits for all woodlands")+
annotate("text", x = 3, y = 0.5,
label = "maximum slope 0.43, minumum slope = 0.098")+
labs(x = "ln(area)", y = "ln(richness)")
#pdf("../Results/slopes_hist")
ggplot(fits, aes(slope))+
geom_histogram(binwidth = 0.05, col = "black", fill = "grey")+
ggtitle("Distribution of slopes in linear mixed effect ln/ln fit", subtitle = "S = cA^0.25 ish")
data = melted_cf
fit = model_nlme_area_log
#model plot for best wood
ggplot(data, aes(x = log(area), y = log(value), colour = plot )) +
geom_point() +
geom_line(aes(y = predict(fit), group = plot))
cum_rich_all[[83]]
data = cum_rich_all[[83]]
data[1,]
data =  data = cum_rich_all[[83]]
areas = c(4,25,50,100,200)
datalong = data.frame()
for (i in 1:16){
row = cbind(areas,data[i])
datalong = rbind(datalong,row)
}
row = cbind(areas, data[1])
data[1]
data =  data = cum_rich_all[[83]]
areas = c(4,25,50,100,200)
datalong = data.frame()
for (i in 1:16){
row = cbind(areas,data[i,])
datalong = rbind(datalong,row)
}
datalong
data[1]
data[1,]
transpose[data[1,]]
t(data[1,])
data =  data = cum_rich_all[[83]]
areas = c(4,25,50,100,200)
datalong = data.frame()
for (i in 1:16){
row = cbind(areas,t(data[i,])
datalong = rbind(datalong,row)
data =  data = cum_rich_all[[83]]
areas = c(4,25,50,100,200)
datalong = data.frame()
for (i in 1:16){
row = cbind(areas,t(data[i,]))
datalong = rbind(datalong,row)
}
cbind(areas, t(data[1,]))
rwo
row
data =  data = cum_rich_all[[83]]
areas = c(4,25,50,100,200)
datalong = data.frame()
i = 1
row = cbind(areas,t(data[i,]))
datalong = rbind(datalong,row)
i = 2
row = cbind(areas,t(data[i,]))
datalong = rbind(datalong,row)
View(datalong)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
cat("\014")
library(dplyr)
library(ggplot2)
library(visreg)
library(car) #for vif
library(GGally) # for ggpairs
library(gridExtra)
library(MuMIn)
library(reshape)
library(energy)#dcor
library(corrplot)
library(corrr)
#Get site vars and nest slopes
AllSiteVars = read.csv("../Data/CompleteSiteLevelVars.csv")
nestdata = readRDS("nest_mixed_model_fits.RDS")
AllPlotVars= read.csv("../Data/AllPlotsVarsRichness.csv")
#All site vars has some cols we know are not useful, delete these now
cols = colnames(AllSiteVars)
todelete = c(1,3,4,5,6,7,8,9,11,12,14,18,21, 22,23,24,25,26,27,28,29,30,35)
Sitevars = AllSiteVars[-todelete]
colnames(Sitevars) = c("Site","PHI","Buffer","Num_NVC","sd_pH", "sd_SOM" ,"sd_LBA",
"sd_meanDBH","meanDBH" , "meanph" , "meanSOM" , "meanLBA" ,
"area_ratio" )
# ps I have removed no trees after analysis, not shown. If I include all the analysis it makes the discussion to convoluted
# in retrospect no trees is not required, obvs realted to mean dbh and sd meand dbh, and since I created it,
#it wasnt a collected variable, I think its logical to drop it - it was a onbvuscating, unnecessary addition
# same fo rnumber major soil groups.
#take site and slope from nestdata
NestSlope = nestdata[-c(2,4,5)]
#join to SiteData
SitedataZ = inner_join(Sitevars,NestSlope)
SitedataZ[is.na(SitedataZ)] = 0
ggplot(NestSlope, aes(x = slope))+
geom_histogram(binwidth = 0.05, colour = "black",fill = "grey")
# first look for response of z to the variables
melted = melt(SitedataZ[-1], id.vars = "slope")
ggplot(melted, aes(x = value, y = slope))+
geom_point()+
geom_smooth(method = loess)+
facet_wrap(~variable, scales = "free")
# outliers = c(23,53,74,76)# found by Sitevars%>%filter(area_ratio==max(area_ratio))..etc
# SitedataZ = SitedataZ%>%filter(Site!=23)
# SitedataZ = SitedataZ%>%filter(Site!=53)
# SitedataZ = SitedataZ%>%filter(Site!=74)
# SitedataZ = SitedataZ%>%filter(Site!=76)
# SitedataZ = SitedataZ%>%filter(Site!=8)
#PS - these four lines because  the usua code of Site!=outliers stopped running.
melted = melt(SitedataZ[-1], id.vars = "slope")
ggplot(melted, aes(x = log(value), y = slope))+
geom_point()+
geom_smooth(method = loess)+
facet_wrap(~variable, scales = "free")
network_plot(correlate(vars, method = "pearson"), min_cor=0.4)
network_plot(correlate(vars, method = "kendall"), min_cor=0.4)
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,
title = "pearson",
mar=c(0,0,1,0))
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "kendall"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "kendal", mar=c(0,0,1,0))
network_plot(correlate(vars, method = "pearson"), min_cor=0.4)
network_plot(correlate(vars, method = "kendall"), min_cor=0.4)
g1 = ggplot(AllSiteVars, aes(x = meanSOM, y = sd_SOM))+
geom_point()+
geom_smooth(method = loess)
g2 = ggplot(AllSiteVars, aes(x = meandbh, y = sd_meandbh))+
geom_point()+
geom_smooth(method = loess)
g3 = ggplot(AllSiteVars, aes(x = meanph, y = sd_meanph))+
geom_point()+
geom_smooth(method = loess)
grid.arrange(g1,g2,g3)
g1 = ggplot(AllSiteVars, aes(x = meanSOM, y = sd_SOM))+
geom_point()+
geom_smooth(method = loess)
g2 = ggplot(AllSiteVars, aes(x = meandbh, y = sd_meandbh))+
geom_point()+
geom_smooth(method = loess)
g3 = ggplot(AllSiteVars, aes(x = meanph, y = sd_pH))+
geom_point()+
geom_smooth(method = loess)
grid.arrange(g1,g2,g3)
mcor = round(cor(Set_mean[-c(1,10)], method = "pearson"),2)
# taking all remaing vars and either means or sd
Set_sd = SitedataZ[c(1,2,3,4,5,6,7,8,13,14)] #11 inc Site, slope
Set_mean = SitedataZ[c(1,2,3,4,9,10,11,12,13,14)]#11, inc Site, slope
# look at correlations now
mcor = round(cor(Set_mean[-c(1,10)], method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "pearson",mar=c(0,0,1,0) )
mcor = round(cor(Set_mean[-c(1,10)], method = "kendall"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,title = "kendall", mar=c(0,0,1,0))
tmp = Set_mean%>%filter(Site != 25)
slopecor =sort(round(apply(tmp[-c(1,10)],2, function(x) dcor(log(x),tmp$slope)),  2), decreasing = TRUE)
slopecor = as.data.frame(slopecor)
slopecor
ggplot(NestSlope, aes(x = slope))+
geom_histogram(binwidth = 0.05, colour = "black",fill = "grey")
# first look for response of z to the variables
melted = melt(SitedataZ[-1], id.vars = "slope")
ggplot(melted, aes(x = value, y = slope))+
geom_point()+
geom_smooth(method = loess)+
facet_wrap(~variable, scales = "free")
corrs = sort(round(apply(SitedataZ[-c(1,14)],2, function(x) dcor(x,SitedataZ$slope)), digits = 2), decreasing = TRUE)
corrs = as.data.frame(corrs)
corrs
# outliers = c(23,53,74,76)# found by Sitevars%>%filter(area_ratio==max(area_ratio))..etc
# SitedataZ = SitedataZ%>%filter(Site!=23)
# SitedataZ = SitedataZ%>%filter(Site!=53)
# SitedataZ = SitedataZ%>%filter(Site!=74)
# SitedataZ = SitedataZ%>%filter(Site!=76)
# SitedataZ = SitedataZ%>%filter(Site!=8)
#PS - these four lines because  the usua code of Site!=outliers stopped running.
melted = melt(SitedataZ[-1], id.vars = "slope")
ggplot(melted, aes(x = log(value), y = slope))+
geom_point()+
geom_smooth(method = loess)+
facet_wrap(~variable, scales = "free")
tmp = SitedataZ%>%filter(Site != 25)
slopecor =sort(round(apply(tmp[-c(1,14)],2, function(x) dcor(log(x),tmp$slope)),  2), decreasing = TRUE)
slopecor = as.data.frame(slopecor)
slopecor
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,
title = "pearson",
mar=c(0,0,1,0))
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "kendall"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "kendal", mar=c(0,0,1,0))
network_plot(correlate(vars, method = "pearson"), min_cor=0.4)
network_plot(correlate(vars, method = "kendall"), min_cor=0.4)
tmp = SitedataZ%>%filter(Site != 25)
slopecor =sort(round(apply(tmp[-c(1,14)],2, function(x) dcor(log(x),tmp$slope)),  2), decreasing = TRUE)
slopecor = as.data.frame(slopecor)
slopecor
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,
title = "pearson",
mar=c(0,0,1,0))
vars = SitedataZ[-c(1,16)]
mcor = round(cor(vars, method = "kendall"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "circle", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "kendal", mar=c(0,0,1,0))
network_plot(correlate(vars, method = "pearson"), min_cor=0.4)
network_plot(correlate(vars, method = "kendall"), min_cor=0.4)
ggplot(AllPlotVars, aes(x = reorder(as.factor(Site), SOMYr2, median), y = SOMYr2))+
geom_boxplot()+
xlab("Site")+
theme(axis.text.x = element_text(angle=90, hjust=1))
g1 = ggplot(AllSiteVars, aes(x = meanSOM, y = sd_SOM))+
geom_point()+
geom_smooth(method = loess)
g2 = ggplot(AllSiteVars, aes(x = meandbh, y = sd_meandbh))+
geom_point()+
geom_smooth(method = loess)
g3 = ggplot(AllSiteVars, aes(x = meanph, y = sd_pH))+
geom_point()+
geom_smooth(method = loess)
grid.arrange(g1,g2,g3)
# taking all remaing vars and either means or sd
Set_sd = SitedataZ[c(1,2,3,4,5,6,7,8,13,14)] #11 inc Site, slope
Set_mean = SitedataZ[c(1,2,3,4,9,10,11,12,13,14)]#11, inc Site, slope
# look at correlations now
mcor = round(cor(Set_mean[-c(1,10)], method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "pearson",mar=c(0,0,1,0) )
mcor = round(cor(Set_mean[-c(1,10)], method = "pearson"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE, title = "pearson for means",mar=c(0,0,1,0) )
mcor = round(cor(Set_mean[-c(1,10)], method = "kendall"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,title = "kendall for means", mar=c(0,0,1,0))
tmp = Set_mean%>%filter(Site != 25)
slopecor =sort(round(apply(tmp[-c(1,10)],2, function(x) dcor(log(x),tmp$slope)),  2), decreasing = TRUE)
slopecor = as.data.frame(slopecor)
slopecor
data = Set_mean[-1]
mod_mean = lm(slope~., data=data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_mean)
models = dredge(mod_mean)
get.models(models, subset = delta<1)
head(models)
g1 = ggplot(AllSiteVars, aes(x = meanph, y = meanSOM))+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Site level")
g5 = ggplot(AllPlotVars, aes(x = pHYr2, y = SOMYr2))+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Plot level")
grid.arrange(g1,g5, nrow = 1 )
g1 = ggplot(AllPlotVars, aes(x = log(SOMYr2), y = plot_richness), na.rm = TRUE)+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Plot level")
g2 = ggplot(AllPlotVars, aes(x = log(pHYr2), y = plot_richness))+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Plot level")
g3 =  ggplot(AllSiteVars, aes(x = meanph, y = Richness))+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Site level")
g4 =  ggplot(AllSiteVars, aes(x =meanSOM, y = Richness))+
geom_point()+
geom_smooth(method = loess)+
ggtitle("Site level")
grid.arrange(g1,g2,g4,g3)
