largest_PHI = as.numeric(subset_all%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier2 = site_data_outlier1%>%filter(Site!=largest_PHI)
largest_PHI = as.numeric(site_data_outlier2%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier3 = site_data_outlier2%>%filter(Site!=largest_PHI)
subset_sd = site_data_outlier3%>%select(Site,z,
Northing, PHI,Buffer,
no_MSG, no_NVC,sd_pH,sd_SOM,sd_LBA,
sd_meandbh,sd_TD,area_ratio,zeta_r)
#,"zeta_r"
subset_mean = site_data_outlier3%>%select(Site,z,
Northing, PHI,meandbh,
meanph, Buffer, meanSOM,meanLBA,
meanTD,area_ratio, no_NVC,
no_MSG,zeta_r)
#,"zeta_r"
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_mean[,-1]
z = subset_mean[,2]
#data$meanph = (data$meanph)^2
#rescale the data
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
rescaled_mean_data = as.data.frame(cbind(z, rescaled_mean_data))
#create the model
mod_mean = lm(z~., data=rescaled_mean_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_mean, main = "Mean dataset")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
z = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(z, rescaled_sd_data))
#create the model
mod_sd = lm(z~., data=rescaled_sd_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_sd, main = "SD dataset")
# look at vifs
vif(mod_mean)
# look at vifs
vif(mod_sd)
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<0.8)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, Mean dataset",
subtitle = "numbers in red are variable importance")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_sd)
model_set = get.models(models, subset = delta<1)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, SD dataset",
subtitle = "numbers in red are variable importance")
z_ave
z_ave = read.csv("../Data/z_ave_fits.csv")
z_ave
z_ave$slope
veganrandzs
for (j in 1:100){
randzdf = data.frame()
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzdf[,j] = veganzsrandom
}
randzdf = data.frame(matrix(nrow =103, ncol = 100))
for (j in 1:100){
randzdf = data.frame(matrix(nrow =103, ncol = 100))
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzdf[,j] = veganzsrandom
}
i = 1
j = 1
randzdf = data.frame(matrix(nrow =103, ncol = 100))
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
for (k in 1:103){
site = data[[k]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[k] = model$coefficients[[2]]
}
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
rm(list = ls())
cat("\014")
library(vegan)
mu = 0
minmax = 0
for (i in 1:1000){
r = rnorm(10, 20, 5)
mu = mu +mean(r)
minmax = minmax + (min(r)+((max(r) - min(r))/2))
}
mu = mu/1000
minmax = minmax/1000
mu
minmax
data = readRDS("petras_presence_absence.RDS")
areas = seq(200,3200,200)
x = log(areas)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
?specaccum
randzsdf = data.frame(matrix(nrow = 103, ncol = 100))
randzsdf[,1] = c(1:103)
View(randzsdf)
View(randzsdf)
View(randzsdf)
View(randzsdf)
randzsdf = data.frame(matrix(nrow = 103, ncol = 100))
for (j in  i:100){
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,j] = veganzsrandom
}
View(randzsdf)
View(randzsdf)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,1] = veganzsrandom
View(randzsdf)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,2] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,3] = veganzsrandom
View(randzsdf)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,4] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,5] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,6] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,7] = veganzsrandom
View(randzsdf)
View(randzsdf)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,8] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,9] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,9] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,10] = veganzsrandom
View(randzsdf)
View(randzsdf)
?range
ranges = apply(veganrandzs,1,range)
ranges = apply(randzsdf,1,range)
ranges
ranges = apply(randzsdf,2,range)
ranges
ranges = apply(randzsdf[,c(1:10)],2,range)
ranges
diff = apply(ranges,1,ranges[1,]-ranges[2,])
diff = apply(ranges,1,function = ranges[1,]-ranges[2,])
diff = function(df){
difference = df[1,] -df[2,]
return(difference)
}
diff = apply(ranges,1,diff)
ranges[1,]-ranges[2,]
ranges[2,]-ranges[1,]
View(randzsdf)
max(rangesdf[1,])
range(randzsdf[,1])
range(randzsdf[1,])
range(randzsdf[1,],na.rm = TRUE)
ranges = apply(randzsdf[,c(1:10)],1,range)
ranges
ranges[1]
ranges[2]
ranges[3]
ranges[103]
ranges[206]
apply(randzsdf,1,max)
apply(randzsdf[,c(1:10)],1,max)
diff = function(df){
max = apply(df,1,max)
min = apply(df,1,min)
diffs = (max-min)/max
return(difs)
}
getdiff = function(df){
max = apply(df,1,max)
min = apply(df,1,min)
diffs = (max-min)/max
return(difs)
}
diffs = getdiff(randzsdf[,c(1:10)])
getdiff = function(df){
max = apply(df,1,max)
min = apply(df,1,min)
diffs = (max-min)/max
return(diffs)
}
diffs = getdiff(randzsdf[,c(1:10)])
diffs
getdiff = function(df){
max = apply(df,1,max)
min = apply(df,1,min)
diffs = ((max-min)/max)*100
return(diffs)
}
diffs = getdiff(randzsdf[,c(1:10)])
diffs
z_ave = read.csv("../Data/z_ave_fits.csv")
mean = apply(randzsdf,1,mean,na.rm =TRUE)
mean
plot(mean,z_ave)
length(mean)
plot(mean,z_ave$slope)
df = as.data.frame(cbind(z_ave$slope,randzsdf[,1]))
View(df)
getdiff(df)
df = as.data.frame(cbind(z_ave$slope,randzsdf[,2]))
getdiff(df)
df = as.data.frame(cbind(z_ave$slope,randzsdf[,3]))
getdiff(df)
df = as.data.frame(cbind(mean,z_ave$slope))
df = as.data.frame(cbind(z_ave$slope,randzsdf[,3]))
getdiff(df)
mean
z_Ave
z_ave
z_ave$slope
mean
AllPlotsvars = read.csv("../Data/AllPlotsVarsRichness.csv")
View(AllPlotsvars)
View(AllPlotsvars)
AllPlotsvars%>%filter(Site == 1)
AllPlotsvars%>%filter(Site == 103)%>%select(plot_richness)
AllPlotsvars%>%filter(Site == 103)%>%select("plot_richness")
AllPlotsvars%>%filter(Site == 103)
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,11] = veganzsrandom
veganzsrandom = vector()
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,12] = veganzsrandom
for (i in 1:103){
site = data[[i]]
specacc= specaccum(site,method="random")
r = specacc$richness
l = length(r)
area = areas[1:l]
model = lm(log(r)~log(area))
veganzsrandom[i] = model$coefficients[[2]]
}
randzsdf[,13] = veganzsrandom
View(randzsdf)
View(randzsdf)
View(randzsdf)
mean = apply(randzsdf,1,mean,na.rm =TRUE)
mean
plot(z_ave$slope,mean)
plot(mean,z_ave$slope)
?cor
cor(mean,z_ave$slope)
cor(mean,z_ave$slope,method = "pearson")
