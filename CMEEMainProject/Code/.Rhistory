"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
# slect only required variables
subset_all = site_data_SDs%>%select("Site","sd_intercept","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(car) # for vif
library(reshape) # melt
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
nestZs = readRDS("../nest_mixed_model_fits.RDS")
ints = nestZs%>%select(Site,intercept)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
site_data_ints = inner_join(site_data,ints)
# slect only required variables
subset_all = site_data_ints%>%select("Site","sd_intercept","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
# slect only required variables
subset_all = site_data_ints%>%select("Site","intercept","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
colnames(subset_all) = c("Site","SDs","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD")
# slect only required variables
subset_all = site_data_ints%>%select("Site","intercept","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
colnames(subset_all) = c("Site","SDs","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD")
#remove the wood with the largest area
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier1 = subset_all%>%filter(Site!=largest_area)
site_data_outlier1 = site_data_outlier1[,-3] # remove area column now
#remove the outlier in PHI
largest_PHI = as.numeric(subset_all%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier2 = site_data_outlier1%>%filter(Site!=largest_PHI)
largest_PHI = as.numeric(site_data_outlier2%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier3 = site_data_outlier2%>%filter(Site!=largest_PHI)
# slect only required variables
subset_all = site_data_ints%>%select("Site","intercept","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
colnames(subset_all) = c("Site","ints","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD")
#remove the wood with the largest area
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier1 = subset_all%>%filter(Site!=largest_area)
site_data_outlier1 = site_data_outlier1[,-3] # remove area column now
#remove the outlier in PHI
largest_PHI = as.numeric(subset_all%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier2 = site_data_outlier1%>%filter(Site!=largest_PHI)
largest_PHI = as.numeric(site_data_outlier2%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier3 = site_data_outlier2%>%filter(Site!=largest_PHI)
subset_sd = site_data_outlier3%>%select("Site","ints",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio")
subset_mean = site_data_outlier3%>%select("Site","ints",
"Northing", "PHI",  "meandbh",
"meanph", "Buffer", "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_mean[,-1]
SDs = subset_mean[,2]
data$meanph = (data$meanph)^2
#rescale the data
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
rescaled_mean_data = as.data.frame(cbind(SDs, rescaled_mean_data))
#create the model
mod_mean = lm(SDs~., data=rescaled_mean_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_mean, main = "Mean dataset")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
SDs = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(SDs, rescaled_sd_data))
#create the model
mod_sd = lm(ints~., data=rescaled_sd_data, na.action = "na.fail")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
SDs = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(SDs, rescaled_sd_data))
#create the model
mod_sd = lm(ints~., data=rescaled_sd_data, na.action = "na.fail")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
SDs = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(ints, rescaled_sd_data))
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
ints = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(ints, rescaled_sd_data))
#create the model
mod_sd = lm(ints~., data=rescaled_sd_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_sd, main = "SD dataset")
# look at vifs
vif(mod_mean)
# look at vifs
vif(mod_sd)
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance[1:6])))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
output
mean_avg_models$importance
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance[1:8])))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
data = output[c(2:9),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2, SD of intercepts, Mean dataset",
subtitle = "numbers in red are variable importance")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_sd)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance[1:8])))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
data = output[c(2:9),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2, SD of random interepts, SD dataset",
subtitle = "numbers in red are variable importance")
output
sd_avg_models$importance
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_sd)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance[1:6])))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
data = output[c(2:7),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2, SD of random interepts, SD dataset",
subtitle = "numbers in red are variable importance")
# make plot of the variables and CI
data = output[c(2:9),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2, intercepts, Mean dataset",
subtitle = "numbers in red are variable importance")
# make plot of the variables and CI
data = output[c(2:7),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2,interepts, SD dataset",
subtitle = "numbers in red are variable importance")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance[1:8])))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
mean_avg_models$importance
# make plot of the variables and CI
data = output[c(2:9),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <2, intercepts, Mean dataset",
subtitle = "numbers in red are variable importance")
#extract model averaged parameter estimates
predicted_SD = predict(mean_avg_models, full = TRUE)
empirical_SD =  site_data_outlier3$SDs
fit = lm(empirical_SD ~ predicted_SD)
#extract model averaged parameter estimates
predicted_int = predict(mean_avg_models, full = TRUE)
empirical_int =  site_data_outlier3$ints
fit = lm(empirical_int ~ predicted_int)
R2 = round(summary(fit)$r.squared,2)
subtitle = paste("R2 = ",R2)
data = as.data.frame(cbind(predicted_int, empirical_int))
ggplot(data, aes(x = predicted_int, y = empirical_int))+
geom_point()+
geom_abline(intercept = 0, slope = 1)+
labs(title = "Observed versus predicted data, mean dataset",
subtitle = subtitle)
#extract model averaged parameter estimates
predicted_int = predict(sd_avg_models, full = TRUE)
empirical_int =  site_data_outlier3$ints
fit = lm(empirical_int ~ predicted_int)
R2 = round(summary(fit)$r.squared,2)
subtitle = paste("R2 = ",R2)
data = as.data.frame(cbind(predicted_int, empirical_int))
ggplot(data, aes(x = predicted_int, y = empirical_int))+
geom_point()+
geom_abline(intercept = 0, slope = 1)+
labs(title = "Observed versus predicted data, sd dataset",
subtitle = subtitle)
?geom_text
correl = cor(nestZs$intercept, nestZs$slope, "spearman")
correl = cor(nestZs$intercept, nestZs$slope, method = "spearman")
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
geom_text(correl)
correl = cor(nestZs$intercept, nestZs$slope, method = "spearman")
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)
correl = round(cor(nestZs$intercept, nestZs$slope, method = "spearman"),1)
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)
correl = round(cor(nestZs$intercept, nestZs$slope, method = "spearman"),1)
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)+
ylab("slope of log log fit")
xlab("intercept of log log fit")
correl = round(cor(nestZs$intercept, nestZs$slope, method = "spearman"),1)
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)+
ylab("slope of log log fit")
xlab("intercept of log log fit")
correl = round(cor(nestZs$intercept, nestZs$slope, method = "spearman"),1)
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = loess)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)+
ylab("slope of log log fit")+
xlab("intercept of log log fit")
correl = round(cor(nestZs$intercept, nestZs$slope, method = "spearman"),1)
ggplot(nestZs, aes(x = intercept, y = slope))+
geom_point()+
geom_smooth(method = lm)+
labs(title = "intercepts of log/log fit to SAC with z",
subtitle = correl)+
ylab("slope of log log fit")+
xlab("intercept of log log fit")
read.RDS("nest_mixed_model_fits.RDS")
nestfits = read.RDS("nest_mixed_model_fits.RDS")
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code")
nestfits = read.RDS("nest_mixed_model_fits.RDS")
nestfits = readRDS("nest_mixed_model_fits.RDS")
View(nestfits)
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
rm(list = ls())
cat("\014")
library(reshape)
library(nlme)
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
plot_cum_richess = readRDS("CumulateveRichness.RDS")
coef_df = data.frame()
i = 1
#browser()
cf_site = plot_cum_richess[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf[melted_cf == 0] = NA # if a site has missing plots they will be zeros
melted_cf$area = areas
model = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
summary(model)
model
plot(model)
require(MuMIn)
r.squaredGLMM(model)
?lme
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(gridExtra)
library(dplyr)
library(ggplot2)
plotdata = read.csv("../../Data/AllPlotsVarsRichness.csv")
sitedata = read.csv("../../Data/CompleteSiteLevelVars.csv")
plotdata = read.csv("../../Data/AllPlotsVarsRichness.csv")
sitedata = read.csv("../../Data/CompleteSiteLevelVars.csv")
View(plotdata)
woods = plotdata%>%group_by(ShortNVC)
View(woods)
dontwant = c("W13","W14","W15","W16")
woods = plotdata%>%group_by(ShortNVC)%>%select(ShortNVC != dontwant)
woods = subset(plotdata, !(plotdata%in% dontwant))
View(woods)
woods = subset(plotdata, !(plotdata%in% dontwant))
woods = plotdata%>%group_by(Site)%>%select(ShortNVC !%in% dontwant )
woods = plotdata%>%group_by(Site)%>%select(ShortNVC %!in% dontwant )
woods = plotdata%>%group_by(Site)%>%select(ShortNVC !(%in%) dontwant )
? %in%
?%in%
woods = plotdata%>%group_by(Site)%>%select( !(ShortNVC %in% dontwant ))
woods = subset(plotdata(!(ShortNVC %in% dontwant )))
woods = subset(plotdata,!(ShortNVC %in% dontwant ))
View(woods)
Site76 = plotdata%>%select(Site == 76)
library(dplyr)
Site76 = plotdata%>%select(Site == 76)
