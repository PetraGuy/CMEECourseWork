p = s%>%filter(PLOT == 2)
p
sr[[8]]
n = p%>%filter(NEST == 1)
n
sum(is.na(Data_Yr2_veg$NEST))
dim(Data_Yr2_veg)
Data_Yr2_veg%>%filter(Site == 96)%>% (PLOT == 4)
knitr::opts_chunk$set(echo = FALSE,message = FALSE,fig.pos = "H" ,comment=NA, fig.align ="centre")
date = format(Sys.Date(), "%B %d %Y")
cat(date)
#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'SorariaCompact1.csv'
Dataname = strsplit(inputfile, "\\.")[[1]][[1]]
fullfile = paste("../Data",inputfile,sep = '/')
Data = read.csv(fullfile)
speciesnames = as.character(unique(unlist(Data$Species))) # uselful for nameing things
numspecies = summary(Data$Species) # useful for comparisons
#Median imputation
median_replace1 = function(x){
ifelse(is.na(x), median(x,na.rm = TRUE), x)
}
median_replace2 = function(x){
apply(x,2,median_replace1)
}
Imputed_list = lapply(split.data.frame(Data[,2:12], Data$Species), FUN = median_replace2)
# Some algorthms are sensitive to the scale of the data, so here the entire dataframe is scaled
Scaled_df = scale(Imputed_df[-1])
#The imputed dataframe is a list with species as the elements, the following sticks it back together with a different name so both optiona are available
temp = do.call(rbind, Imputed_list)
Imputed_df = cbind(Data[1], temp)
# Some algorthms are sensitive to the scale of the data, so here the entire dataframe is scaled
Scaled_df = scale(Imputed_df[-1])
Scaled_df = cbind(Data[1], Scaled_df)
# but this might reduce the dissimilarity to much, so this is a semi-scaled datafrane.
temp = Imputed_df[-c(1,6,7,8,12)]
temp = scale(temp)
Semi_Scaled_df = cbind(Imputed_df[c(1,6:8,12)], temp)
# Model evaluation metrics
accuracy = function(atable){
a = round(sum(diag(atable)/sum(atable)), digits = 2)
return(a)
}
# precision = TP/( rest of that column in conf matrix = the other species id in same class)
precision = function(atable){
p = vector()
items = vector()
no_predictions = dim(atable)[2]
for (i in 1:no_predictions){
items[i] = paste("class",colnames(atable)[i], sep = "_")
p[i] = round(diag(atable)[i]/(sum((atable)[,i])), digits = 2)
}
precisions = cbind(items,p)
colnames(precisions) = c("Class", "Precision")
return(precisions)
}
#sensitivity = TP/ rest of that row = the other classes the algorithm has put species in
sensitivity = function(atable){
s = vector()
no_actuals = dim(atable)[1]
for (i in 1:no_actuals){
s[i] = round(diag(atable)[i]/(sum((atable)[i,])), digits = 2)
}
sensitivities = cbind(rownames(atable),s)
colnames(sensitivities) = c("Species", "Sensitivity")
return(sensitivities)
}
#Data sampling and test/train sets.
#This shuffles and splits the data
shuffle = function(dataset){
splits = list()
set.seed(42)
n = nrow(dataset)
shuffled = dataset[sample(n),]
train = shuffled[1:round(0.7*n),]
test = shuffled[(round(0.7*n)+1):n,]
splits[[1]] = train
splits[[2]] = test
return(splits)
}
#this subsets the data into species
create_train_test = function(dataset){
sets = as.character(unique(dataset[,1]))
train = data.frame()
test = data.frame()
split_data = list()
for (i in 1:length(sets)){
sub = subset(dataset, dataset[,1] == sets[i])
train_temp = shuffle(sub)[[1]]
test_temp = shuffle(sub)[[2]]
train = rbind(train, train_temp)
test = rbind(test, test_temp)
}
split_data[[1]] = train
split_data[[2]] = test
return(split_data)
}
#PS you can check the splits are correct with summary(train$species), summary(test$species)
#summary(maindata$species), this gives numbers in each species.
#to include a cross fold validation repeat above fold times
# performs the k means algorith over 10 repeats, returns BSS/Wss ratio, accuracy and
repeated_kmeans = function(dataset){
metrics_list = list()
accuracy_vector = vector()
ratio = vector()
species_no = data.frame(matrix(ncol = 7))
colnames(species_no) = speciesnames
sens = data.frame(row.names = speciesnames )
prec = data.frame(rownames = speciesnames)
for (i in 1:10){
kmeans_result = kmeans(dataset[-1], 7, 20, iter.max = 50, algorithm = "MacQueen")
ratio[i] = round(kmeans_result$tot.withinss/kmeans_result$totss, digits = 2)
kmeans_conf = table(Imputed_df$Species, kmeans_result$cluster)
accuracy_vector[i] = accuracy(kmeans_conf)
species = diag(kmeans_conf)
species_no = rbind(species_no, species)# just TP
s = sensitivity(kmeans_conf)
sens = cbind(sens, s[,2])
p = precision(kmeans_conf)
prec = cbind(prec,p[,2])
}
metrics_list[[1]] = ratio # wss/bss
metrics_list[[2]] = accuracy_vector #sum TP/no things done
metrics_list[[3]] = species_no[-1,]
metrics_list[[4]] = sens
metrics_list[[5]] = prec
return(metrics_list)
}
#Getting the results for the kmeans
#Imputed df without scaling
Imputed_kmeans = repeated_kmeans(Imputed_df)
#Semi scaled data
#Semi_scaled_kmeans = repeated_kmeans(Semi_Scaled_df)
# fully scaled data
Scaled_kmeans = repeated_kmeans(Scaled_df)
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("unstandardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("non-standardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display percentage of true positives from the confusion matrix calcualted in kmeans chunk above
m1 = Imputed_kmeans[[3]]
#m2 = Semi_scaled_kmeans[[3]]
m3 = Scaled_kmeans[[3]]
m1_percent = round(apply(m1, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m1_percent) = c(1:10)
kable(m1_percent, format = "latex", caption = "Percentage of true positives for non-standarized data")%>%
kable_styling(latex_options = "hold_position")
m2_percent = round(apply(m2, 1, function(x) (x/numspecies)*100), digits = 2)
m3_percent = round(apply(m3, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m3_percent) = c(1:10)
kable(m3_percent, format = "latex", caption = "Percentage of true positives for standarized data")%>%
kable_styling(latex_options = "hold_position")
prec_df_Imputed = Imputed_kmeans[[4]]
colnames(prec_df_Imputed) = c(1:10)
kable(prec_df_Imputed, format = "latex", caption = "Precision of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
prec_df = Scaled_kmeans[[4]]
colnames(prec_df) = c(1:10)
kable(prec_df, format = "latex", caption = "Precision of kmeans with standardized data")%>%
kable_styling(latex_options = "hold_position")
sens_df_Imputed = Imputed_kmeans[[4]]
colnames(sens_df_Imputed) = c(1:10)
kable(sens_df_Imputed, format = "latex", caption = "Sensitivity of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,fig.pos = "H" ,comment=NA, fig.align ="centre")
#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
library(rmarkdown)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
out.width="50%"
)
rm(list = ls())
cat("\014")
library(dplyr)
library(visreg) # for visreg plots
library(ggplot2)
library(GGally) # for ggpairs
library(factoextra)
library(FactoMineR)# these two for PCA
library(corrplot)
sitevars =  read.csv("../Data/SiteLevelVars.csv")
toremove = c(23,53,74)
sitevars = sitevars%>%filter(!Site %in% toremove)
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = physical_df[-c("Perim_m","meanLBA")]
physical_df = physical_d%>%select[-c(Perim_m,meanLBA)]
physical_df = physical_df%>%select[-c(Perim_m,meanLBA)]
physical_df = physical_df%>%select[-c(Perim_m,meanLBA)]
physical_df = physical_df%>%select[physical_df,-c(Perim_m,meanLBA)]
physical_df = subset(physical_df, select = -c("Perim_m","meanLBA"))
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA))
hetero_df = subset(hetero_df, select-c(sd_meandbh,sd_treedensity,sd_SOM))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM))
colnames(physical_df)
colnames(hetero_df)
physical_df_incRich = as.data.frame(cbind(sitevars$Richness, physical_df))
colnames(physical_df_incRich) = c("Richness","Alt_m" ,"Area_ha" ,"Perim_m" ,"Easting","Northing" ,"Buffer3" , "meandbh" , "meanph" ,"meanSOM" , "meanLBA","area_ratio" )
physical_df_incRich = as.data.frame(cbind(sitevars$Richness, physical_df))
colnames(physical_df_incRich) = c("Richness","Alt_m" ,"Area_ha"  ,"Easting","Northing" ,"Buffer3" , "meandbh" , "meanph" ,"meanSOM" ,"area_ratio" )
physical_model = lm(Richness ~., data = physical_df_incRich)
visreg(physical_model)
heter_df_incRich = as.data.frame(cbind(sitevars$Richness, hetero_df))
colnames(heter_df_incRich) = c("Richness","Pos_Hetero_Index","no_NVC", "sd_pH" , "no_MSG", "sd_LBA"  , "no_trees"  )
hetero_model = lm(Richness ~., data = heter_df_incRich)
visreg(hetero_model)
ggpairs(physical_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
ggpairs(hetero_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
physical_PCA = PCA(physical_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(physical_PCA)
eig.val_physical = get_eigenvalue(physical_PCA)
eig.val_physical
fviz_eig(physical_PCA, addlabels = TRUE, ylim = c(0,30))
fviz_pca_var(physical_PCA, col.var = "cos2", repel = TRUE)
corrplot(var$cos2)
fviz_cos2(physical_PCA, choice = "var")
fviz_contrib(physical_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(physical_PCA, choice = "var", axes = 2, top = 10)
area_outier = sitevars%>%filter(Area_ha == max(Area_ha))
hetero_PCA = PCA(hetero_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(hetero_PCA)
eig.val_hetero = get_eigenvalue(hetero_PCA)
eig.val_hetero
fviz_eig(hetero_PCA, addlabels = TRUE, ylim = c(0,30))
fviz_pca_var(hetero_PCA, col.var = "cos2", repel = TRUE)
corrplot(var$cos2)
fviz_cos2(hetero_PCA, choice = "var")
fviz_contrib(hetero_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(hetero_PCA, choice = "var", axes = 2, top = 10)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
out.width="50%"
)
rm(list = ls())
cat("\014")
library(dplyr)
library(visreg) # for visreg plots
library(ggplot2)
library(GGally) # for ggpairs
library(factoextra)
library(FactoMineR)# these two for PCA
library(corrplot)
sitevars =  read.csv("../Data/SiteLevelVars.csv")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
sitevars =  read.csv("../Data/SiteLevelVars.csv")
toremove = c(23,53,74)
sitevars = sitevars%>%filter(!Site %in% toremove)
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM, sd_LBA, sd_pH))
colnames(physical_df)
colnames(hetero_df)
combo_df = as.data.fram(cbind(physical_df,hetero_df))
combo_df = as.data.frame(cbind(physical_df,hetero_df))
colnames(combo_df)
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(physical_df_incRich) = c("Richness", "Alt_m", "Area_ha", "Easting","Northing",  "Buffer3" , "meandbh" , "meanph" , "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC","no_MSG" , "no_trees" )
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(combo_df_incRich) = c("Richness", "Alt_m", "Area_ha", "Easting","Northing",  "Buffer3" , "meandbh" , "meanph" , "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC","no_MSG" , "no_trees" )
combo_model = lm(Richness ~., data = physical_df_incRich)
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(combo_df_incRich) = c("Richness", "Alt_m", "Area_ha", "Easting","Northing",  "Buffer3" , "meandbh" , "meanph" , "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC","no_MSG" , "no_trees" )
combo_model = lm(Richness ~., data = combo_df_incRich)
visreg(combo_model)
ggpairs(combo_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
combo_PCA = PCA(combo_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(combo_df)
combo_PCA = PCA(combo_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(combo_PCA)
eig.val_physical = get_eigenvalue(combo_PCA)
eig.val_physical
fviz_eig(combo_PCA, addlabels = TRUE, ylim = c(0,30))
fviz_pca_var(combo_PCA, col.var = "cos2", repel = TRUE)
corrplot(var$cos2)
fviz_cos2(combo_PCA, choice = "var")
fviz_contrib(combo_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(combo_PCA, choice = "var", axes = 2, top = 10)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
out.width="50%"
)
rm(list = ls())
cat("\014")
library(dplyr)
library(visreg) # for visreg plots
library(ggplot2)
library(GGally) # for ggpairs
library(factoextra)
library(FactoMineR)# these two for PCA
library(corrplot)
sitevars =  read.csv("../Data/SiteLevelVars.csv")
toremove = c(23,53,74)
sitevars = sitevars%>%filter(!Site %in% toremove)
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA,Alt_m,Easting))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM, sd_LBA, sd_pH))
combo_df = as.data.frame(cbind(physical_df,hetero_df))
colnames(combo_df)
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA,Alt_m,Easting))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM, sd_LBA, sd_pH, no_MSG))
combo_df = as.data.frame(cbind(physical_df,hetero_df))
colnames(combo_df)
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(combo_df_incRich) = c("Richness", "Area_ha","Northing",  "Buffer3" , "meandbh" , "meanph" , "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC","no_trees" )
combo_model = lm(Richness ~., data = combo_df_incRich)
visreg(combo_model)
ggpairs(combo_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA,Alt_m,Easting))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM, sd_LBA, sd_pH, no_MSG, no_trees))
combo_df = as.data.frame(cbind(physical_df,hetero_df))
colnames(combo_df)
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(combo_df_incRich) = c("Richness", "Area_ha","Northing",  "Buffer3" , "meandbh" , "meanph" , "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC" )
combo_model = lm(Richness ~., data = combo_df_incRich)
visreg(combo_model)
ggpairs(combo_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
combo_PCA = PCA(combo_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(combo_PCA)
eig.val_physical = get_eigenvalue(combo_PCA)
eig.val_physical
fviz_eig(combo_PCA, addlabels = TRUE, ylim = c(0,30))
fviz_pca_var(combo_PCA, col.var = "cos2", repel = TRUE)
corrplot(var$cos2)
fviz_cos2(combo_PCA, choice = "var")
fviz_contrib(combo_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(combo_PCA, choice = "var", axes = 2, top = 10)
physical_df = sitevars%>%select("Alt_m", "Area_ha","Perim_m","Easting","Northing","Buffer3","meandbh","meanph","meanSOM","meanLBA","area_ratio")
hetero_df = sitevars%>%select("Pos_Hetero_Index","no_NVC","sd_pH", "sd_SOM" , "no_MSG", "sd_LBA", "sd_meandbh", "sd_treedensity","no_trees"  )
hetero_df[is.na(hetero_df)] = 0
physical_df = subset(physical_df, select = -c(Perim_m,meanLBA,Alt_m,Easting, meanph))
hetero_df = subset(hetero_df, select=-c(sd_meandbh,sd_treedensity,sd_SOM, sd_LBA, sd_pH, no_MSG, no_trees))
combo_df = as.data.frame(cbind(physical_df,hetero_df))
colnames(combo_df)
combo_df_incRich = as.data.frame(cbind(sitevars$Richness, combo_df))
colnames(combo_df_incRich) = c("Richness", "Area_ha","Northing",  "Buffer3" , "meandbh" ,  "meanSOM"  , "area_ratio" , "Pos_Hetero_Index", "no_NVC" )
combo_model = lm(Richness ~., data = combo_df_incRich)
visreg(combo_model)
ggpairs(combo_df, axisLabels="none",
lower = list(continuous="smooth"),
diag="blankDiag",
upper = list(corSize=2,axisLabels='show'))+
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
combo_PCA = PCA(combo_df, scale.unit = TRUE, ncp = 11, graph = FALSE)
var = get_pca_var(combo_PCA)
eig.val_physical = get_eigenvalue(combo_PCA)
eig.val_physical
fviz_eig(combo_PCA, addlabels = TRUE, ylim = c(0,30))
fviz_pca_var(combo_PCA, col.var = "cos2", repel = TRUE)
corrplot(var$cos2)
fviz_cos2(combo_PCA, choice = "var")
fviz_contrib(combo_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(combo_PCA, choice = "var", axes = 2, top = 10)
corrplot(var$cos2)
fviz_cos2(combo_PCA, choice = "var")
fviz_contrib(combo_PCA, choice = "var", axes = 1, top = 10)
fviz_contrib(combo_PCA, choice = "var", axes = 2, top = 10)
fviz_pca_var(combo_PCA, col.var = "cos2", repel = TRUE)
fviz_pca_var(combo_PCA, col.var = "cos2", repel = TRUE)
fviz_eig(combo_PCA, addlabels = TRUE, ylim = c(0,30))
View(combo_df)
colnames(combo_df)
View(combo_df_incRich)
View(sitevars)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
combo_df_incRichness = as.data.frame(cbind(combo_df,sitevars$Richness))
fitall<- lm(Richness~., data = combo_df_incRichness)
ggplotRegression(fitall)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fitall<- lm(Richness~., data = combo_df_incRichness)
fitall<- lm(Richness ~., data = combo_df_incRichness)
View(sitevars)
fitall<- lm(formula = Richness ~., data = combo_df_incRichness)
combo_df_incRich$Richness
colnames((combo_df_incRich))
fitall<- lm(formula = Richness ~ Area_ha +  Northing +Buffer3 + meandbh +
meanSOM+area_ratio + Pos_Hetero_Index + no_NVC,
data = combo_df_incRichness)
combo_df_incRichness = as.data.frame(cbind(combo_df,sitevars$Richness))
View(combo_df_incRichness)
View(combo_df_incRich)
fitall<- lm(formula = Richness ~ Area_ha +  Northing +Buffer3 + meandbh +
meanSOM+area_ratio + Pos_Hetero_Index + no_NVC,
data = combo_df_incRich)
ggplotRegression(fitall)
summarise(fitall)
summary(fitall)
library(car)
vif(fitall)
s = summary(fitall)
s$coefficients
s$coefficients[,4]
plot(fitall)
fit_lessArea = lm(formula = Richness ~ Northing +Buffer3 + meandbh +
meanSOM+area_ratio + Pos_Hetero_Index + no_NVC,
data = combo_df_incRich))
fit_lessArea = lm(formula = Richness ~ Northing +Buffer3 + meandbh +
meanSOM+area_ratio + Pos_Hetero_Index + no_NVC,
data = combo_df_incRich)
summary(fit_lessArea)
plot(fit_lessArea)
anova.lm(fitall,fit_lessArea)
anova(fitall,fit_lessArea)
fit_less_PosHetero =  lm(formula = Richness ~ Area_ha +  Northing +Buffer3 + meandbh +
meanSOM+area_ratio +  no_NVC,
data = combo_df_incRich)
summary(fit_less_PosHetero)
fit_less_area_PosHetero = lm(formula = Richness ~  Northing +Buffer3 + meandbh +
meanSOM+area_ratio + no_NVC,  data = combo_df_incRich)
summary(fit_less_area_PosHetero)
plot(fit_less_area_PosHetero)
