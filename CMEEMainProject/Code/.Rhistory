for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
get_model_zetas = function(){
browser()
model_zetas = data.frame(nrow = 16)
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
View(model_zetas)
View(model_zetas)
get_model_zetas = function(){
browser()
model_zetas = data.frame(nrow = 16)
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
model_zetas = get_model_zetas()
View(model_zetas)
View(model_zetas)
View(model_zetas)
View(model_zetas)
model_zetas = data.frame(nrow = 16)
get_model_zetas = function(){
browser()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
View(model_zetas)
model_zetas = data.frame(nrow = 16)
get_model_zetas = function(){
browser()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = round(A*exp(j*B),2)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
plot(zetas_df[,1],model_zetas[,2])
plot(zetas_df[,2],model_zetas[,3])
get_rich_empirical = function()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
get_rich_empirical = function(){
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector()
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
Richness$emp = Rich_emp
pres_abs_dfs[[1]]
s1 = pres_abs_dfs[[1]]
View(s1)
View(ground_flora)
View(flora)
site1 = flora
site1 = flora%>%filter(SITE==1)
site1
plot16 = Site1%>%filter(PLOT ==16)
plot16 = site1%>%filter(PLOT ==16)
plot16
View(s1)
sum(s1[16,])
sum(s1[16,})-16
sum(s1[16,])-16
Rich_emp = get_rich_empirical()
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
#browser()
nCr = vector()
Rich_emp = vector()
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
Rich_emp
i - 19
i = 19
#browser()
nCr = vector()
Rich_emp = vector()
zs = zetas_df[,i]
l = length(zs)
z = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
z
nCr
sign
S = nCr*sign*z
S
sum(S)
View(CompleteSiteLevelvars)
get_zetas =  function(sitenum){
#uses zeta decline function to get zeta values for a df
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = round(z_decline$zeta.val,8)
return(zetas)
}
get_all_zetas = function(){
#run through multiple dfs and get df of zetas
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
zetas_df = zetas_df[,-1]
library(zetadiv)
zetas_df = get_all_zetas()
zetas_df = zetas_df[,-1]
View(zetas_df)
write.csv(zetas_df[,1], "../Data/site1zeta ")
write.csv(zetas_df[,19], "../Data/site19zeta ")
saveRDS(pres_abs_dfs, "petras_presence_absence")
Rich_emp = get_rich_empirical()
Richness$emp = Rich_emp
Rich_emp
Richness$emp = Rich_emp
Richness
model_zetas = data.frame(nrow = 16)
get_model_zetas = function(){
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = round(A*exp(j*B),8)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
get_Sn = function(i){
#create a vector of the modeled zetas
#browser()
S_exp = vector()
zeta_exp = vector()
nCr = vector()
n = 35
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = round(sum(S_exp),0)
return(Sn)
}
get_zeta_modeled_richness = function(){
Sn_zeta = vector()
for (i in 1:103){
Sn_zeta[i] = get_Sn(i)
}
return(Sn_zeta)
}
richnesses = get_zeta_modeled_richness()
Richness$zeta_model = richnesses
View(Richness)
model_zetas = model_zetas[,-1]
get_rich_mod = function(i){
#browser()
nCr = vector()
Rich_mod = vector()
for (i in 1:103){
zs = model_zetas[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
get_rich_mod = function(){
#browser()
nCr = vector()
Rich_mod = vector()
for (i in 1:103){
zs = model_zetas[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
Rich_mod = get_rich_mod()
Rich_mod
fits_exp = get_fits_exp(zetas_df)
fits_power = get_fits_power(zetas_df)
zeta_coef_exp = get_coef(fits_exp)
zeta_coef_power = get_coef(fits_power)
Rich_mod = get_rich_mod()
Rich_mod
get_zetas =  function(sitenum){
#uses zeta decline function to get zeta values for a df
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = round(z_decline$zeta.val,8)
return(zetas)
}
get_all_zetas = function(){
#run through multiple dfs and get df of zetas
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
zetas_df = zetas_df[,-1]
sitenum = 1
#uses zeta decline function to get zeta coef
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
z_decline$zeta.exp
z_decline$zeta.exp[[1]][[1]]
get_zetas_coef =  function(){
coef = data.frame(nrow = 2)
#uses zeta decline function to get zeta coef
for (i in 1:103){
df =   df = pres_abs_dfs[[i]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
int =  z_decline$zeta.exp[[1]][[1]]
slope = z_decline$zeta.exp[[1]][[1]]
col = t(c(int,slope))
coef = as.data.frame(cbind(coef,col))
}
return(coef)
}
model_coef = get_zetas_coef()
View(model_coef)
get_zetas_coef =  function(){
browser()
coef = data.frame(nrow = 2)
#uses zeta decline function to get zeta coef
for (i in 1:103){
df =   df = pres_abs_dfs[[i]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
int =  z_decline$zeta.exp[[1]][[1]]
slope = z_decline$zeta.exp[[1]][[1]]
col = t(c(int,slope))
coef = as.data.frame(cbind(coef,col))
}
return(coef)
}
model_coef = get_zetas_coef()
get_zetas_coef =  function(){
browser()
coef = data.frame(nrow = 2)
#uses zeta decline function to get zeta coef
for (i in 1:103){
df =   df = pres_abs_dfs[[i]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
int =  z_decline$zeta.exp[[1]][[1]]
slope = z_decline$zeta.exp[[1]][[2]]
col = t(c(int,slope))
coef = as.data.frame(cbind(coef,col))
}
return(coef)
}
model_coef = get_zetas_coef()
get_zetas_coef =  function(){
browser()
coef = data.frame(nrow = 2)
#uses zeta decline function to get zeta coef
for (i in 1:103){
df =   df = pres_abs_dfs[[i]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
int =  z_decline$zeta.exp[[1]][[1]]
slope = z_decline$zeta.exp[[1]][[2]]
col = c(int,slope)
coef = as.data.frame(cbind(coef,col))
}
return(coef)
}
model_coef = get_zetas_coef()
View(Richness)
z_decline$zeta.val
?log
saveRDS(model_zetas, "modelled_zetas")
saveRDS(zetas_df,"empirical_zetas")
View(zeta_coef_exp)
R2_exp = as.data.frame(t(zeta_coef_exp["R2",]))
R2_exp$coef = "exp"
R2_power = as.data.frame(t(zeta_coef_power["R2",]))
R2_power$coef = "power"
R2s = rbind(R2_exp, R2_power)
ggplot(R2s, aes(R2, fill = coef)) + geom_density(alpha = 0.2)
library(ggplot2)
R2_exp = as.data.frame(t(zeta_coef_exp["R2",]))
R2_exp$coef = "exp"
R2_power = as.data.frame(t(zeta_coef_power["R2",]))
R2_power$coef = "power"
R2s = rbind(R2_exp, R2_power)
ggplot(R2s, aes(R2, fill = coef)) + geom_density(alpha = 0.2)
