Sn = sum(S_exp)
View(zetas_df)
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 1
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = sum(S_exp)
#browser()
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 16
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = sum(S_exp)
View(zetas_df)
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 16
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = round(sum(S_exp),0)
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 20
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = round(sum(S_exp),0)
#browser()
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 30
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = round(sum(S_exp),0)
S_exp = vector()
zeta_exp = vector()
nCr = vector()
# n = (areas%>%filter(Site == i)%>%select(orders))[[1]]
n = 35
int = zeta_coef_exp[1,i]
slope = zeta_coef_exp[2,i]
sign = vector()
Sum = vector()
for (j in 1:n){
zeta_exp[j] = as.double(exp(int)*exp((j*slope)))
nCr[j] = choose(n,j)
sign[j] = (-1)^(j+1)
}
S_exp = zeta_exp*nCr*sign
Sn = round(sum(S_exp),0)
return(Sn)
get_zeta_modeled_richness = function(){
Sn_zeta = vector()
for (i in 1:103){
Sn_zeta[i] = get_Sn(i)
}
}
richnesses = get_zeta_modeled_richness()
View(Richness)
get_zeta_modeled_richness = function(){
Sn_zeta = vector()
for (i in 1:103){
Sn_zeta[i] = get_Sn(i)
}
return(Sn_zeta)
}
richnesses = get_zeta_modeled_richness()
Richness$zeta_model = richnesses
library(ggplot2)
library(dplyr)
library(zetadiv)
rm(list = ls())
cat("\014")
ground_flora = read.csv("../Data/GroundCover.csv")
ground_flora = ground_flora%>%filter(Yr_2 == 2)
veg_codes = read.csv("../Data/vegetation_codes.csv")
colnames(ground_flora) = c("SITE", "PLOT","NEST","Cover","BRC_number","Year")
colnames(veg_codes) = c("Species", "BRC_number")
flora = ground_flora%>% inner_join(veg_codes)
Richness = read.csv("../data/SiteRichness.csv")
CompleteSiteLevelvars = read.csv("../Data/CompleteSiteLevelVars.csv")
create_dataframe = function(sitenum){
Site = flora%>%filter(SITE==sitenum)
BRC = unique(Site$BRC_number)
BRC = as.character(BRC)
columns = length(unique(Site$BRC_number))
rows = length(unique(Site$PLOT))
Sitedf = data.frame(matrix(ncol = columns, nrow = rows))
colnames(Sitedf) = BRC
plots = unique(Site$PLOT)
Sitedf$plotnumber = plots
for (i in seq_along(plots)){
plot_num = plots[i]
plot = Site%>%filter(PLOT==plot_num)
matches = match(plot$BRC_number,BRC)
for (j in 1:length(matches)){
col = matches[j]
Sitedf[i,col] = 1
}
}
Sitedf[is.na(Sitedf)]=0
return(Sitedf)
}
pres_abs_dfs = list()
for (i in 1:103){
pres_abs_dfs[[i]] = create_dataframe(i)
}
zetas_df = get_all_zetas()
get_zetas =  function(sitenum){
#uses zeta decline function to get zeta values for a df
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = z_decline$zeta.val
return(zetas)
}
get_all_zetas = function(){
#run through multiple dfs and get df of zetas
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
View(zetas_df)
round(zetas_df, 2)
View(zetas_df)
View(zetas_df)
?round
get_zetas =  function(sitenum){
#uses zeta decline function to get zeta values for a df
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = round(z_decline$zeta.val,2)
return(zetas)
}
get_all_zetas = function(){
#run through multiple dfs and get df of zetas
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
View(zetas_df)
zetas_df = zetas_df[,-1]
get_fits_exp = function(data){
#creates a list of linear models
#this is log/order fit so z = Aexp(B*order)
#logz = logA + B*order
#A = expA, B = slope
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
}
return(model)
}
get_fits_power = function(data){
#creates a list of linear models
# this is log/log fit so z = A(order)^B
#logz = logA + Blog(order)
# A = exp(int), B = slope
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~log(orders))
}
return(model)
}
get_coef =  function(model){
coefs_df = as.data.frame(matrix(nrow = 5))
for (i in 1:103){
coefs  = summary(model[[i]])$coefficients
int = coefs[[1]]
slope = coefs[[2]]
se_int = coefs[[3]]
se_slope = coefs[[4]]
r2 = summary(model[[i]])$r.squared
col = c(int,slope,se_int, se_slope,r2)
colname = paste("Site",i)
coefs_df[colname] = col
}
rownames(coefs_df) = c("int","slope","se_int","se_slope","R2")
coefs_df = coefs_df[,-1]
return(coefs_df)
}
fits_exp = get_fits_exp(zetas_df)
fits_power = get_fits_power(zetas_df)
zeta_coef_exp = get_coef(fits_exp)
zeta_coef_power = get_coef(fits_power)
View(zetas_df)
View(zeta_coef_exp)
get_model_zetas = function(){
model_zetas = data.frame()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
get_model_zetas = function(){
model_zetas = data.frame()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
get_model_zetas = function(){
model_zetas = data.frame(nrow = 16)
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
get_model_zetas = function(){
browser()
model_zetas = data.frame(nrow = 16)
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
}
model_zetas = get_model_zetas()
View(model_zetas)
View(model_zetas)
get_model_zetas = function(){
browser()
model_zetas = data.frame(nrow = 16)
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
model_zetas = get_model_zetas()
View(model_zetas)
View(model_zetas)
View(model_zetas)
View(model_zetas)
model_zetas = data.frame(nrow = 16)
get_model_zetas = function(){
browser()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = A*exp(j*B)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
View(model_zetas)
model_zetas = data.frame(nrow = 16)
get_model_zetas = function(){
browser()
for ( i in 1:103){
B = zeta_coef_exp[2,i]
A = exp(zeta_coef_exp[1,i])
z = vector()
for( j in 1:16){
z[j] = round(A*exp(j*B),2)
}
model_zetas = cbind(model_zetas,z)
}
return(model_zetas)
}
model_zetas = get_model_zetas()
plot(zetas_df[,1],model_zetas[,2])
plot(zetas_df[,2],model_zetas[,3])
get_rich_empirical = function()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
get_rich_empirical = function(){
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^j+1
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = -1^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
Rich_emp = get_rich_empirical()
get_rich_empirical = function(){
browser()
nCr = vector()
Rich_emp = vector()
for (i in 1:103){
zs = zetas_df[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_emp[i] = sum(S)
}
return(Rich_emp)
}
Rich_emp = get_rich_empirical()
Richness$emp = Rich_emp
pres_abs_dfs[[1]]
s1 = pres_abs_dfs[[1]]
View(s1)
View(ground_flora)
View(flora)
site1 = flora
site1 = flora%>%filter(SITE==1)
site1
plot16 = Site1%>%filter(PLOT ==16)
plot16 = site1%>%filter(PLOT ==16)
plot16
View(s1)
sum(s1[16,])
sum(s1[16,})-16
sum(s1[16,])-16
