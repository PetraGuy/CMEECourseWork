y = c(y, y1)
}
plot(x , y, cex = 0.2)
}
chaos_game()
chaos_game = function(){
graphics.off()
#browser()
x = vector()
y = vector()
X <- list(c(0,0),c(3,4),c(4,1))
coord = X[[1]]
x1 = coord[[1]]
y1 = coord[[2]]
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
points(x1,y1, cex = 0.2)
for (i in 1:500){
index = sample((1:3),1)
coord = X[[index]]
x2 = coord[[1]]
y2 = coord[[2]]
x1 = (0.5*x2 + 0.5*x1)
y1 = (0.5*y2 + 0.5*y1)
x = c(x, x1)
y = c(y, y1)
}
plot(x , y, cex = 0.2)
}
chaos_game()
chaos_game = function(){
graphics.off()
#browser()
x = vector()
y = vector()
X <- list(c(0,0),c(3,4),c(4,1))
coord = X[[1]]
x1 = coord[[1]]
y1 = coord[[2]]
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
points(x1,y1, cex = 0.2)
for (i in 1:1000){
index = sample((1:3),1)
coord = X[[index]]
x2 = coord[[1]]
y2 = coord[[2]]
x1 = (0.5*x2 + 0.5*x1)
y1 = (0.5*y2 + 0.5*y1)
x = c(x, x1)
y = c(y, y1)
}
plot(x , y, cex = 0.2)
}
chaos_game()
knitr::opts_chunk$set(echo = TRUE)
chaos_game = function(){
graphics.off()
#browser()
x = vector()
y = vector()
X <- list(c(0,0),c(3,4),c(4,1))
coord = X[[1]]
x1 = coord[[1]]
y1 = coord[[2]]
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
points(x1,y1, cex = 0.2)
for (i in 1:1000){
index = sample((1:3),1)
coord = X[[index]]
x2 = coord[[1]]
y2 = coord[[2]]
x1 = (0.5*x2 + 0.5*x1)
y1 = (0.5*y2 + 0.5*y1)
x = c(x, x1)
y = c(y, y1)
}
plot(x , y, cex = 0.2)
}
chaos_game()
start = c(1,2)
start[1]
turtle = function(start, length, direction){
x = start[1]
y =  start[2]
x2 = x + length*cos(direction)
y2 = y + length*sin(direction)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
arrows(x,y,x2,y2)
}
turtle(c(0,0),5,0.785)
?arrows
x = start[1]
y =  start[2]
x2 = x + length*cos(direction)
y2 = y + length*sin(direction)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
abline(x,y,x2,y2)
x = start[1]
y =  start[2]
x2 = x + length*cos(direction)
y2 = y + length*sin(direction)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
segments(x,y,x2,y2)
x = start[1]
y =  start[2]
x2 = x + length*cos(direction)
y2 = y + length*sin(direction)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
segments(x,y,x2,y2)
turtle(c(0,0),5,0.785)
turtle = function(start, length, direction){
x = start[1]
y =  start[2]
x2 = x + length*cos(direction)
y2 = y + length*sin(direction)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
segments(x,y,x2,y2)
}
turtle(c(0,0),5,0.785)
?direction
direction = (pi/4 - direction)
direction = 1.04
direction = pi/4 - direction
direction
sin(direction)
elbow(c(0,0), 1,1.04)
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0), 1,1.04)
x = turtle(c(0,0),1,1.04)
x
turtle = function(start, line, direction){
x = start[1]
y =  start[2]
x2 = x + line*cos(direction)
y2 = y + line*sin(direction)
segments(x,y,x2,y2)
endpoints = c(x2,y2)
return(endpoints)
}
x = turtle(c(0,0),1,1.04)
x
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (7*pi/4)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = -1*(7*pi/4)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = pi/4 - direction
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = -1*(pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
graphics.off()
elbow(c(0,0),1,1.04)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
elbow(c(0,0),1,1.04)
turtle = function(start, line, direction){
x = start[1]
y =  start[2]
x2 = x + line*cos(direction)
y2 = y + line*sin(direction)
segments(x,y,x2,y2)
endpoints = c(x2,y2)
return(endpoints)
}
elbow = function(start,line, direction) {
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = -1*(pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
browser()
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
elbow(c(0,0),1,1.04)
elbow = function(start,line, direction) {
browser()
graphics.off()
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
turtle = function(start, line, direction){
x = start[1]
y =  start[2]
x2 = x + line*cos(direction)
y2 = y + line*sin(direction)
segments(x,y,x2,y2)
endpoints = c(x2,y2)
return(endpoints)
}
elbow = function(start,line, direction) {
browser()
graphics.off()
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
endpoints
turtle = function(start, line, direction){
x = start[1]
y =  start[2]
x2 = x - line*cos(direction)
y2 = y -line*sin(direction)
segments(x,y,x2,y2)
endpoints = c(x2,y2)
return(endpoints)
}
elbow = function(start,line, direction) {
browser()
graphics.off()
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
endpoints = turtle(start,line,direction)
line = 0.95*line
direction = (pi/4 - direction)
nextpoint = turtle(endpoints, line, direction)
}
elbow(c(0,0),1,1.04)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y")
turtle = function(start, distance, direction){
x1 = start[1]
y1 = start[2]
x2 = x1 + distance*cos(direction)
y2 = y1 + distance*sin(direction)
segments(x1,y1,x2,y2)
coords = c(x2,y2)
return(coords)
}
elbow = function(start, distance, direction){
#browser()
coords = turtle(start, distance, direction)
direction = -1* (pi - direction - pi/4)
distance = 0.95*distance
coords = turtle(coords, distance, direction)
}
spiral = function(start, distance, direction){
coords = turtle(start, distance, direction)
direction = -1* (pi - direction - pi/4)
distance = 0.95*distance
#coords = turtle(coords, distance, direction)
if (distance > 0.1)
spiral(coords,distance,direction)
}
graphics.off()
plot(NA, xlim=c(0,1), ylim=c(0,1), xlab="X", ylab="Y")
spiral_2 = function(start, distance, direction){
coords = turtle(start, distance, direction)
if (distance > 0.1){
#direction = -1* (pi - direction - pi/4)
distance = 0.95*distance
spiral(coords,distance = 0.95*distance, direction = (-1* (pi - direction - pi/4)))
}
}
graphics.off()
plot(NA, xlim=c(0,50), ylim=c(0,50), xlab="X", ylab="Y")
tree = function(start, distance, direction) {
coords = turtle(start, distance, direction)
#coords = turtle(start, distance, direction)
if (distance > 0.1){
distance = 0.65*distance
tree(coords, distance= 0.65*distance, direction = (pi/4) )
tree(coords, distance= 0.65*distance, direction = (3*pi/4) )
}
}
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,5), xlab="X", ylab="Y")
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.1){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
plot(NA, xlim=c(0,2), ylim=c(0,5), xlab="X", ylab="Y")
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,5), xlab="X", ylab="Y")
fern(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
fern(c(1,0),1,1)
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.75*distance2, direction = (pi/2) )
}
}
fern2 = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.75*distance2, direction = (pi/2) )
}
}
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern2(c(1,0),1,1)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern2(c(1,0),0.7,1)
knitr::opts_chunk$set(echo = TRUE)
graphics.off()
plot(NA, xlim=c(0,2), ylim=c(0,10), xlab="X", ylab="Y")
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
fern(c(1,0),1,1)
load("/home/petra/Documents/CMEECourseWork/HPC/Results/Cluster_1207/pg5117/pg5117_cluster_1.rda")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#clear the workspace
rm(list = ls())
cat("\014")
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'LookUpSiteDescriptorCodes.csv'
fullfile = paste("../Data",inputfile, sep = "/")
LookUpSite = as.tbl(read.csv(fullfile))
inputfile = 'Site_descriptors00-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
SiteDescriptorsYr2 = as.tbl(read.csv(fullfile))
OpenCodes = c(8,9,10,24,86,87,90,91,92,93,105,106,107,108,109,110,111,112,113,114,115,116,117,208,209,210,211,212)
Open = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% OpenCodes)
Open
ggplot(Open, aes(x = SD_code)) +
geom_histogram(breaks = seq(1,220, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of openness SD codes", x = "SD code")
plot(table(Open$SITE))
Score = Open %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
max(Score$no_rows)
mean(Score$no_rows)
min(Score$no_rows)
Score
plot(Score)
table(Open$SD_code)
f = table(Open$SD_code)
f
View(Open)
f = table(Open$SITE)
f
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
ScorePlots = table(Open$SITE, Open$PLOT)
ScoreSites = Open %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
max(Score$no_rows)
mean(Score$no_rows)
min(Score$no_rows)
Score
#or..more concisely!!
ScoresSites = table(Open$SITE)
ScorePlots = table(Open$SITE, Open$PLOT)
OpenCodesSites = c(8,9,10,24,86,87,90,91,92,93,105,106,107,108,109,110,111,112,113,114,115,116,117,208,209,210,211,212)
OpenSites = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% OpenCodes)
OpenSites
ggplot(OpenSites, aes(x = SD_code)) +
geom_histogram(breaks = seq(1,220, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of openness SD codes", x = "SD code")
NegativeCodesSites = c(6,41,143,145,149)
NegativeSites = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% NegativeCodes)
NegativeCodesSites = c(6,41,143,145,149)
NegativeSites = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% NegativeCodesSites)
NegativeSites
ggplot(NegativeSites, aes(x = SD_code)) +
geom_histogram(breaks = seq(1,160, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of negative SD codes", x = "SD code")
plot(table(OpenSites$SITE))
ScoreSites = OpenSites %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
max(Score$no_rows)
mean(Score$no_rows)
min(Score$no_rows)
ScoreSites
#or..more concisely!!
ScoresSites = table(Open$SITE)
OpenCodesPlots = c(7,8,9,64,65,66,67,70,71,72,79,80,81,82,102)
OpenPlots = PlotDescriptorsYr2 %>% select(SITE,PLOT, PD_code)%>% filter(PD_code %in% OpenCodes)
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'LookUpPlotDescriptorCodes.csv'
fullfile = paste("../Data",inputfile, sep = "/")
LookUpPlot = as.tbl(read.csv(fullfile))
inputfile = 'Plot_descriptors00-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
PlotDescriptorsYr2 = as.tbl(read.csv(fullfile))
OpenCodesPlots = c(7,8,9,64,65,66,67,70,71,72,79,80,81,82,102)
OpenPlots = PlotDescriptorsYr2 %>% select(SITE,PLOT, PD_code)%>% filter(PD_code %in% OpenCodes)
OpenPlots
ggplot(OpenPlots, aes(x = PD_code)) +
geom_histogram(breaks = seq(1,150, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of openness PD codes", x = "PD code")
OpenCodesPlots = c(7,8,9,64,65,66,67,70,71,72,79,80,81,82,102)
OpenPlots = PlotDescriptorsYr2 %>% select(SITE,PLOT, PD_code)%>% filter(PD_code %in% OpenCodesPlots)
OpenPlots
ggplot(OpenPlots, aes(x = PD_code)) +
geom_histogram(breaks = seq(1,150, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of openness PD codes", x = "PD code")
ggplot(data = OpenPlots, aes(x = PD_code)) +
geom_histogram(breaks = seq(1,150, by = 10), col = "black", fill = "green") +
facet_wrap(~SITE)+
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
ggplot(PlotDescriptorsYr2, aes(PlotDescriptorsYr2$PD_code)) +
geom_histogram(breaks = seq(1,150, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of entered PD codes", x = "PD code")
NegativeCodesPlots = c(27,93,94,95,99)
NegativePlots = PlotDescriptorsYr2 %>% select(SITE, PD_code)%>% filter(PD_code %in% NegativeCodesPlots)
NegativePlots
ggplot(NegativePlots, aes(x = PD_code)) +
geom_histogram(breaks = seq(1,160, by = 10), col = "black", fill = "green")+
labs(title = "Histogram of negative PD codes", x = "PD code")
ScorePlots = table(OpenPlots$SITE, OpenPlots$PLOT)
#or equivalently
ScoresPlots = xtabs(~ SITE + PLOT, OpenPlots)
ScorePlots = table(OpenPlots$SITE, OpenPlots$PLOT)
ScorePlots
#or equivalently
ScoresPlots = xtabs(~ SITE + PLOT, OpenPlots)
ScorePlots[1,]
OpenCodesSites = c(8,9,10,24,86,87,90,91,92,93,105,106,107,108,109,110,111,112,113,114,115,116,117,208,209,210,211,212)
OpenSites = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% OpenCodesSites)
OpenSites
ScoreSites = OpenSites %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
max(ScoreSites$no_rows)
mean(ScoreSites$no_rows)
min(ScoreSites$no_rows)
ScoreSites
#or..more concisely!!
ScoresSites = table(Open$SITE)
ScoreSites = OpenSites %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
max(ScoreSites$no_rows)
mean(ScoreSites$no_rows)
min(ScoreSites$no_rows)
ScoreSites
#or..more concisely!!
ScoresSites = table(OpenSites$SITE)
ScoresSites
ScoresSites = table(OpenSites$SITE)
ScoreSites
knitr::opts_chunk$set(echo = TRUE)
#clear the workspace
rm(list = ls())
cat("\014")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
inputfile = 'table_DBH_live_counts_71-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
LookUpPlot = as.tbl(read.csv(fullfile))
