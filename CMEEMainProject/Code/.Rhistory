head(models)
models$meanTD
model1 = 0.2854521 + 0.0001995*(AllSiteVars$area_ratio)
-0.0121737*(AllSiteVars$meanph)
-0.0018080*(AllSiteVars$meanSOM)
+0.0079558(AllSiteVars$No_NVC)
model1 = 0.2854521 + 0.0001995*(AllSiteVars$area_ratio)
-0.0121737*(AllSiteVars$meanph)
-0.0018080*(AllSiteVars$meanSOM)
+0.0079558*(AllSiteVars$No_NVC)
+ 0.0017081*(AllSiteVars$pos_hetero_index)
plot(SitedataZ$slope,model1)
out.put
ggplot(SitedataZ, aes(x = meanpH, y = slope))+
geom_point()+
geom_smooth(method = loess)
ggplot(SitedataZ, aes(x = meanph, y = slope))+
geom_point()+
geom_smooth(method = loess)
amodel = lm(slope~area_ratio, meanph,meanSOM,Num_NVC,PHI, SitedataZ)
amodel = lm(slope ~ area_ratio, meanph, meanSOM, Num_NVC, PHI, SitedataZ)
colnames(SitedataZ)
amodel = lm(slope ~ area_ratio, meanph, meanSOM, Num_NVC, PHI, SitedataZ)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fit = predict(amodel,SitedataZ)
plot(fit,SitedataZ$slope)
summary(amodel)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmode,SitedataZ)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = cbind(fita,fitb,SitedataZ$slope)
g1 = ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
g1 = ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")
g1
head(fitdf)
colnames(fitdf) = c("fita", "fitb", "slope")
g1 = ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")
g1
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylims(0.1,0.5)
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.5)
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.5)+
geom_abline(slope = 1,intercept = 0)
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.5)+
xlim(0.1,0.5)
geom_abline(slope = 1,intercept = 0)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.5)+
xlim(0.1,0.5)
geom_abline(slope = 1,intercept = 0)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.5)+
xlim(0.1,0.5)+
geom_abline(slope = 1,intercept = 0)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)
summary(amodel)
summary(bmodel)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)+
annotate(fita: slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, fitb:slope ~ meanph + meanSOM + Num_NVC + PHI)
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)+
annotate("fita: slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, fitb:slope ~ meanph + meanSOM + Num_NVC + PHI"")
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)+
annotate("fita: slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, fitb:slope ~ meanph + meanSOM + Num_NVC + PHI")
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)+
annotate("text", label = "fita: slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, fitb:slope ~ meanph + meanSOM + Num_NVC + PHI")
amodel = lm(slope ~ area_ratio + meanph + meanSOM + Num_NVC + PHI, SitedataZ)
bmodel = lm(slope ~ meanph + meanSOM + Num_NVC + PHI, SitedataZ)
fita = predict(amodel,SitedataZ)
fitb = predict(bmodel,SitedataZ)
fitdf = as.data.frame(cbind(fita,fitb,SitedataZ$slope))
colnames(fitdf) = c("fita", "fitb", "slope")
ggplot(fitdf, aes(x = slope))+
geom_point(y = fita,colour = "blue")+
geom_point(y = fitb, colour = "red")+
ylim(0.1,0.45)+
xlim(0.1,0.45)+
geom_abline(slope = 1,intercept = 0)+
ggtitle("Two fits to models obtained from dredge function")
plot(amodel)
plot(bmodel)
data = Set_mean[-1]
mod_mean = lm(slope~., data=data, na.action = "na.fail")
models = dredge(mod_mean)
get.models(models, subset = delta<1)
head(models)
mod_mean
models=dredge(mod_mean)
models
models = dredge(mod_mean)
get.models(models, subset = delta<1)
library(dplyr)
library(zetadiv)
rm(list = ls())
cat("\014")
ground_flora = read.csv("../Data/GroundCover.csv")
ground_flora = ground_flora%>%filter(Yr_2 == 2)
veg_codes = read.csv("../Data/vegetation_codes.csv")
colnames(ground_flora) = c("SITE", "PLOT","NEST","Cover","BRC_number","Year")
colnames(veg_codes) = c("Species", "BRC_number")
flora = ground_flora%>% inner_join(veg_codes)
Richness = read.csv("../data/SiteRichness.csv")
create_dataframe = function(sitenum){
Site = flora%>%filter(SITE==sitenum)
BRC = unique(Site$BRC_number)
BRC = as.character(BRC)
columns = length(unique(Site$BRC_number))
rows = length(unique(Site$PLOT))
Sitedf = data.frame(matrix(ncol = columns, nrow = rows))
colnames(Sitedf) = BRC
plots = unique(Site$PLOT)
Sitedf$plotnumber = plots
for (i in seq_along(plots)){
plot_num = plots[i]
plot = Site%>%filter(PLOT==plot_num)
matches = match(plot$BRC_number,BRC)
for (j in 1:length(matches)){
col = matches[j]
Sitedf[i,col] = 1
}
}
Sitedf[is.na(Sitedf)]=0
return(Sitedf)
}
pres_abs_dfs = list()
for (i in 1:103){
pres_abs_dfs[[i]] = create_dataframe(i)
}
sitenum = 1
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
z_decline$zeta.val
get_zetas =  function(sitenum){
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = z_decline$zeta.val
return(zetas)
}
get_all_zetas = function(){
all_zetas = data.frame()
for (i in 1:103){
zs = get_zetas(i)
all_zetas = as.data.frame(cbind(all_zetas),zs)
}
return(all_zetas)
}
zetas_df = get_all_zetas()
tmp = c(1:5)
tmp
get_all_zetas = function(){
all_zetas = data.frame()
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
all_zetas = as.data.frame(cbind(all_zetas),zs)
}
return(all_zetas)
}
zetas_df = get_all_zetas()
zetas_df = get_all_zetas()
zetas_df = get_all_zetas()
all_zetas = data.frame()
i = 1
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
all_zetas = as.data.frame(cbind(all_zetas),zs)
zs = t(c(zs,pad))
all_zetas = as.data.frame(cbind(all_zetas),zs)
all_zetas = data.frame(nrow = 16)
all_zetas = as.data.frame(cbind(all_zetas),zs)
all_zetas = as.data.frame(matrix(nrow = 16, ncol = 103))
all_zetas = as.data.frame(cbind(all_zetas),zs)
View(all_zetas)
all_zetas[,i] = zs
View(zs)
zs = t(c(zs,pad))
zs
all_zetas[,i] = zs
View(all_zetas)
colnames(all_zetas) = c(1:103)
i
all_zetas$i = zs
?t
zs = c(zs,pad)
all_zetas$i = zs
colname = paste("Site",i)
all_zetas = data.frame()
all_zetas$colname = zs
View(all_zetas)
rownames(all_zetas) = c(1:16)
all_zetas = as.data.frame(matrix(nrow = 16))
View(all_zetas)
rownames(all_zetas) = c(1:16)
View(all_zetas)
all_zetas$colname = zs
colname
colname = paste("Site",i)
all_zetas[colname] = zs
all_zetas = as.data.frame(matrix(nrow = 16))
zetas_df = get_all_zetas()
get_all_zetas = function(){
browser()
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
colnames(all_zetas) = c(1:103)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
get_all_zetas = function(){
browser()
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
View(zetas_df)
zeta_df = zetas_df[-1]
zeta_df = zetas_df[,-1]
zetas_df = zetas_df[,-1]
pres_abs_dfs[[1]]
install.packages("numDeriv")
library(numDeriv)
?grad
?diff
diff(zetas_df$`Site 1`,1)
diff(zetas_df$`Site 1`,2)
d = diff(zeta_df$`Site 1`,1)
d2 = diff(d,1)
d2
order = c(1:16)
fits =  apply(data,2, function(x) lm(log(x)~ order), na.rm = TRUE)
fits =  apply(zetas_df,2, function(x) lm(log(x)~ order), na.rm = TRUE)
fits =  apply(zetas_df,2, function(x) lm(log(x)~ order, na.rm = TRUE))
?lm
fits =  apply(zetas_df,2, function(x) lm(log(x)~ order, na.omit = "TRUE"))
fits =  apply(zetas_df,2, function(x) lm(log(x)~ order, na.exclude = "TRUE"))
length(zetas_df[,15])
s15 = zetas_df[,15]
s15
s15 = s15[!is.na(s15)]
s15
length(s15)
l = length(s15)
seq(1,l,1)
i - 1
i = 1
model = list()
data = zetas_df
y = data[,i]
y = y[!is.na(y)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y~orders))
model[[i]] = lm(log(y)~orders))
model[[i]] = lm(log(y)~orders)
y
orders
log(0)
fun.zero.omit
?which
y = y[which(y)>0]
y = y[which(y)!=0]
y = y[which(y>0)]
y
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
model[i]]
model[[i]]
summary(model[[i]])
model[[1]]$coefficients
coef = model[[1]]$coefficients
coeg[[1]][[1]]
coef[[1]][[1]]
fits = get_fits(zeta_df)
get_fits = function(data){
#creates a list of linear models
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
return(model)
}
}
fits = get_fits(zeta_df)
View(fits)
get_fits = function(data){
#creates a list of linear models
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
}
return(model)
}
fits = get_fits(zeta_df)
s = summary(model[[1]])
s
s$coefficients
model[[1]]
model[[1]]$coefficients
model[[1]]$coefficients[[1]][[1]]
model[[1]]$coefficients[[1]][[2]]
model[[1]]$coefficients[[2]][[1]]
s = summary(model[[1]])
s$r.squared
get_coef =  function(model_list){
coefs_df = as.data.frame(matrix(nrow = 3))
for (i in 1:103){
int = model[[i]]$coefficients[[1]][[1]]
slope = model[[i]]$coefficients[[2]][[1]]
r2 = summary(model[[i]])$r.squared
col = c(int,slope,r2)
colname = paste("Site",i)
coefs_df[colname] = col
}
return(coef_df)
}
zetacoef = get_coef(fits)
i = 1
zetacoef = get_coef(fits)
coefs_df = as.data.frame(matrix(nrow = 3))
int = model[[i]]$coefficients[[1]][[1]]
slope = model[[i]]$coefficients[[2]][[1]]
r2 = summary(model[[i]])$r.squared
col = c(int,slope,r2)
colname = paste("Site",i)
coefs_df[colname] = col
View(coefs_df)
model[[103]]
View(fits)
View(fits)
View(fits)
model[[2]]
get_fits = function(data){
#creates a list of linear models
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
}
return(model)
}
fits = get_fits(zeta_df)
View(fits)
get_fits = function(data){
#creates a list of linear models
browser()
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
}
return(model)
}
fits = get_fits(zeta_df)
View(model)
View(model)
View(model)
View(fits)
View(fits)
fits = get_fits(zeta_df)
View(model)
View(model)
View(model)
model[[15]]
model[[5]]
View(model)
View(model)
View(model)
View(model)
View(fits)
