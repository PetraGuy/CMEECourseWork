#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'SorariaCompact1.csv'
Dataname = strsplit(inputfile, "\\.")[[1]][[1]]
fullfile = paste("../Data",inputfile,sep = '/')
Data = read.csv(fullfile)
speciesnames = as.character(unique(unlist(Data$Species))) # uselful for nameing things
numspecies = summary(Data$Species) # useful for comparisons
#Median imputation
median_replace1 = function(x){
ifelse(is.na(x), median(x,na.rm = TRUE), x)
}
median_replace2 = function(x){
apply(x,2,median_replace1)
}
Imputed_list = lapply(split.data.frame(Data[,2:12], Data$Species), FUN = median_replace2)
# Some algorthms are sensitive to the scale of the data, so here the entire dataframe is scaled
Scaled_df = scale(Imputed_df[-1])
#The imputed dataframe is a list with species as the elements, the following sticks it back together with a different name so both optiona are available
temp = do.call(rbind, Imputed_list)
Imputed_df = cbind(Data[1], temp)
# Some algorthms are sensitive to the scale of the data, so here the entire dataframe is scaled
Scaled_df = scale(Imputed_df[-1])
Scaled_df = cbind(Data[1], Scaled_df)
# but this might reduce the dissimilarity to much, so this is a semi-scaled datafrane.
temp = Imputed_df[-c(1,6,7,8,12)]
temp = scale(temp)
Semi_Scaled_df = cbind(Imputed_df[c(1,6:8,12)], temp)
# Model evaluation metrics
accuracy = function(atable){
a = round(sum(diag(atable)/sum(atable)), digits = 2)
return(a)
}
# precision = TP/( rest of that column in conf matrix = the other species id in same class)
precision = function(atable){
p = vector()
items = vector()
no_predictions = dim(atable)[2]
for (i in 1:no_predictions){
items[i] = paste("class",colnames(atable)[i], sep = "_")
p[i] = round(diag(atable)[i]/(sum((atable)[,i])), digits = 2)
}
precisions = cbind(items,p)
colnames(precisions) = c("Class", "Precision")
return(precisions)
}
#sensitivity = TP/ rest of that row = the other classes the algorithm has put species in
sensitivity = function(atable){
s = vector()
no_actuals = dim(atable)[1]
for (i in 1:no_actuals){
s[i] = round(diag(atable)[i]/(sum((atable)[i,])), digits = 2)
}
sensitivities = cbind(rownames(atable),s)
colnames(sensitivities) = c("Species", "Sensitivity")
return(sensitivities)
}
#Data sampling and test/train sets.
#This shuffles and splits the data
shuffle = function(dataset){
splits = list()
set.seed(42)
n = nrow(dataset)
shuffled = dataset[sample(n),]
train = shuffled[1:round(0.7*n),]
test = shuffled[(round(0.7*n)+1):n,]
splits[[1]] = train
splits[[2]] = test
return(splits)
}
#this subsets the data into species
create_train_test = function(dataset){
sets = as.character(unique(dataset[,1]))
train = data.frame()
test = data.frame()
split_data = list()
for (i in 1:length(sets)){
sub = subset(dataset, dataset[,1] == sets[i])
train_temp = shuffle(sub)[[1]]
test_temp = shuffle(sub)[[2]]
train = rbind(train, train_temp)
test = rbind(test, test_temp)
}
split_data[[1]] = train
split_data[[2]] = test
return(split_data)
}
#PS you can check the splits are correct with summary(train$species), summary(test$species)
#summary(maindata$species), this gives numbers in each species.
#to include a cross fold validation repeat above fold times
# performs the k means algorith over 10 repeats, returns BSS/Wss ratio, accuracy and
repeated_kmeans = function(dataset){
metrics_list = list()
accuracy_vector = vector()
ratio = vector()
species_no = data.frame(matrix(ncol = 7))
colnames(species_no) = speciesnames
sens = data.frame(row.names = speciesnames )
prec = data.frame(rownames = speciesnames)
for (i in 1:10){
kmeans_result = kmeans(dataset[-1], 7, 20, iter.max = 50, algorithm = "MacQueen")
ratio[i] = round(kmeans_result$tot.withinss/kmeans_result$totss, digits = 2)
kmeans_conf = table(Imputed_df$Species, kmeans_result$cluster)
accuracy_vector[i] = accuracy(kmeans_conf)
species = diag(kmeans_conf)
species_no = rbind(species_no, species)# just TP
s = sensitivity(kmeans_conf)
sens = cbind(sens, s[,2])
p = precision(kmeans_conf)
prec = cbind(prec,p[,2])
}
metrics_list[[1]] = ratio # wss/bss
metrics_list[[2]] = accuracy_vector #sum TP/no things done
metrics_list[[3]] = species_no[-1,]
metrics_list[[4]] = sens
metrics_list[[5]] = prec
return(metrics_list)
}
#Getting the results for the kmeans
#Imputed df without scaling
Imputed_kmeans = repeated_kmeans(Imputed_df)
#Semi scaled data
#Semi_scaled_kmeans = repeated_kmeans(Semi_Scaled_df)
# fully scaled data
Scaled_kmeans = repeated_kmeans(Scaled_df)
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("unstandardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display accuaracy for kmeans calcualted above.
acc_df = data.frame(nrow = 2)
acc_df = rbind(Imputed_kmeans[[2]],Scaled_kmeans[[2]])
rownames(acc_df) = c("non-standardized","standardized")
colnames(acc_df) = c("Run 1","Run 2","Run 3","Run 4","Run 5","Run 6","Run 7", "Run 8","Run 9","Run 10")
kable(acc_df, format = "latex", caption = "Accuracy")%>%
kable_styling(latex_options = "hold_position")
#Display percentage of true positives from the confusion matrix calcualted in kmeans chunk above
m1 = Imputed_kmeans[[3]]
#m2 = Semi_scaled_kmeans[[3]]
m3 = Scaled_kmeans[[3]]
m1_percent = round(apply(m1, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m1_percent) = c(1:10)
kable(m1_percent, format = "latex", caption = "Percentage of true positives for non-standarized data")%>%
kable_styling(latex_options = "hold_position")
m2_percent = round(apply(m2, 1, function(x) (x/numspecies)*100), digits = 2)
m3_percent = round(apply(m3, 1, function(x) (x/numspecies)*100), digits = 2)
colnames(m3_percent) = c(1:10)
kable(m3_percent, format = "latex", caption = "Percentage of true positives for standarized data")%>%
kable_styling(latex_options = "hold_position")
prec_df_Imputed = Imputed_kmeans[[4]]
colnames(prec_df_Imputed) = c(1:10)
kable(prec_df_Imputed, format = "latex", caption = "Precision of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
prec_df = Scaled_kmeans[[4]]
colnames(prec_df) = c(1:10)
kable(prec_df, format = "latex", caption = "Precision of kmeans with standardized data")%>%
kable_styling(latex_options = "hold_position")
sens_df_Imputed = Imputed_kmeans[[4]]
colnames(sens_df_Imputed) = c(1:10)
kable(sens_df_Imputed, format = "latex", caption = "Sensitivity of kmeans with non standardized data")%>%
kable_styling(latex_options = "hold_position")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,fig.pos = "H" ,comment=NA, fig.align ="centre")
#clear the workspace
rm(list = ls())
cat("\014")
#setwd("~/Documents/CMEECourseWork/MiniProject/Code")
library(ggplot2)
library(reshape) # both required for the box plots, otherwise they cant all be presented
# on one page and therefore difficult to analyse
library(rpart)
library(rpart.plot)# both required for the decision tree
library(knitr)
library(kableExtra) # for kable stylig options, to hold position on page
library(rmarkdown)
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
install.packages("visreg")
library(visreg)
?`visreg-package`
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
siterich =  read.csv("../Data/SiteRichness.csv")
sitevars = read.csv("..?/Data/SiteLevelVars.csv")
sitevars = read.csv("../Data/SiteLevelVars.csv")
View(sitevars)
View(siterich)
colnames(sitevars)
fit = lm(Richness ~ Northing + Easting + Alt_m + Area_ha + Perim_m +
Pos_Hetero_Index + Buffer3 + no_NVC + meandbh, data = sitevars)
visreg(fit)
visreg(fit, type = "contrast")
visreg(fit, type = "conditional")
summary(fit)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(ggplot2)
library(gridExtra)
#clear the workspace
rm(list = ls())
cat("\014")
#Get the data , enter input CSV file name here, for data in data directory
inputfile = 'LookUpSiteDescriptorCodes.csv'
fullfile = paste("../Data",inputfile, sep = "/")
LookUpSite = as.tbl(read.csv(fullfile))
inputfile = 'Site_descriptors00-03.csv'
fullfile = paste("../Data",inputfile, sep = "/")
SiteDescriptorsYr2 = as.tbl(read.csv(fullfile))
# these codes imply open areas, 8 - 10 are coppicing, 86 -93 are larger water features, 105-117 are glades and tracks
#208 - 212 are heaths, marsh, rivers and lakes.
PositiveCodesSites = c(8,9,10,12,13,14,15,16,17,18,24,54,55,56,57,58,59,61,62,63,64,65,86,87,88,89,90,91,92,93,105,106,107,108,109,110,111,112,113,114,115,116,150,151,152,153,157,158,208,209,210,211,212)
PositveSites = SiteDescriptorsYr2 %>% select(SITE, SD_code)%>% filter(SD_code %in% PositiveCodesSites)
View(PositveSites)
#the heterogeneity index for each site is the sum of the positive codes
PositiveHeterogIndices = PositveSites %>% group_by(SITE)%>% summarise(no_rows = length(SITE))
#max = (max(SiteHeterogenity$no_rows))
#means = round(mean(SiteHeterogenity$no_rows), digits = 2)
#min = (min(SiteHeterogenity$no_rows))
#stats =  tableGrob(rbind(max,means,min))
ggplot(data = PositiveHeterogIndices, aes(x = SITE, y = no_rows)) +
geom_bar(stat = "identity", col = "black")+
labs(title = "Positive Heterogenity Indices by Site", x = "Site", y = "Number of positive codes")
#grid.arrange(stats,p, ncol = 2)
View(PositiveHeterogIndices)
siterich =  read.csv("../Data/SiteRichness.csv")
sitevars = read.csv("../Data/SiteLevelVars.csv")
sitevars$Pos_Hetero_index[sitevars$Pos_Hetero_Index == NA] = 0
sitevars$Pos_Hetero_index[is.na(sitevars$Pos_Hetero_Index)] = 0
sitevars$Pos_Hetero_index[is.na(sitevars$Pos_Hetero_Index)] = 0
View(sitevars)
sitevars[is.na(sitevars)] = 0
View(sitevars)
fit = lm(Richness ~ Northing + Easting + Alt_m + Area_ha + Perim_m +
Pos_Hetero_Index + Buffer3 + no_NVC + meandbh, data = sitevars)
visreg(fit, type = "contrast")
summary(fit)
fitphysical = lm(Richness ~ Alt_m + Area_ha + Northing + Easting +
Perim_m + buffer3 + meandbh + meanpH + meanSOM + meanLBA, data =  sitevars)
tphysical = lm(Richness ~ Alt_m + Area_ha + Northing + Easting +
Perim_m + Buffer3 + meandbh + meanpH + meanSOM + meanLBA, data =  sitevars)
fitphysical = lm(Richness ~ Alt_m + Area_ha + Northing + Easting +
Perim_m + Buffer3 + meandbh + meanph+ meanSOM + meanLBA, data =  sitevars)
fithetero = lm(Richness ~ Pos_hetero_Indices + no_NVC + no_trees +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA)
fithetero = lm(Richness ~ Pos_hetero_Indices + no_NVC + no_trees +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
fithetero = lm(Richness ~ Pos_Hetero_Indices + no_NVC + no_trees +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
fithetero = lm(Richness ~ Pos_Hetero_Index + no_NVC + no_trees +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
summary(fitphysical)
summary(fithetero)
install.packages("car")
vif(fitphysical)
library(car)
vif(fitphysical)
vif(fithetero)
fithetero = lm(Richness ~ Pos_Hetero_Index + no_NVC + no_trees + no_MSG
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
fithetero = lm(Richness ~ Pos_Hetero_Index + no_NVC + no_trees + no_MSG +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
physicaldf = as.data.frame(cbind(sitevars$Alt_m, sitevars$Area_ha, sitevars$Perim_m, sitevars$Northing, sitevars$Easting
sitevars$Buffer3, sitevars$meandbh, sitevars$meanph, sitevars$meanSOM, sitevars$meanLBA))
heterodf = as.data.frame(cbind(sitevars$Pos_Hetero_Index, sitevars$no_NVC, sitevars$sd_pH, sitevars$sd_SOM, sitevars$no_MSG
+ sitevars$sd_LBA, sitevars$sd_meandbh, sitevars$no_trees))
pairs(physicaldf)
physicaldf = as.data.frame(cbind(sitevars$Alt_m, sitevars$Area_ha, sitevars$Perim_m, sitevars$Northing, sitevars$Easting
sitevars$Buffer3, sitevars$meandbh, sitevars$meanph, sitevars$meanSOM, sitevars$meanLBA))
heterodf = as.data.frame(cbind(sitevars$Pos_Hetero_Index, sitevars$no_NVC, sitevars$sd_pH, sitevars$sd_SOM, sitevars$no_MSG
+ sitevars$sd_LBA, sitevars$sd_meandbh, sitevars$no_trees))
physicaldf = as.data.frame(cbind(sitevars$Alt_m, sitevars$Area_ha, sitevars$Perim_m, sitevars$Northing, sitevars$Easting
sitevars$Buffer3, sitevars$meandbh, sitevars$meanph, sitevars$meanSOM, sitevars$meanLBA))
physicaldf = as.data.frame(cbind(sitevars$Alt_m, sitevars$Area_ha, sitevars$Perim_m,
sitevars$Northing, sitevars$Easting,sitevars$Buffer3,
sitevars$meandbh, sitevars$meanph, sitevars$meanSOM,
sitevars$meanLBA))
heterodf = as.data.frame(cbind(sitevars$Pos_Hetero_Index, sitevars$no_NVC,
sitevars$sd_pH, sitevars$sd_SOM, sitevars$no_MSG,
sitevars$sd_LBA, sitevars$sd_meandbh, sitevars$no_trees))
pairs(physicaldf)
colnames(physicaldf)
colnames(physicaldf) = c("Alt_m","Area_ha", "Perim_m",
"Northing", "Easting","Buffer3",
"meandbh", "meanph", "meanSOM",
colnames(heterodf) = c("Pos_Hetero_Index", "no_NVC", "sd_pH", "sd_SOM", "no_MSG",
"sd_LBA", "sd_meandbh","no_trees")
colnames(physicaldf) = c("Alt_m","Area_ha", "Perim_m",
"Northing", "Easting","Buffer3",
"meandbh", "meanph", "meanSOM",
"meanLBA")
colnames(heterodf) = c("Pos_Hetero_Index", "no_NVC", "sd_pH", "sd_SOM", "no_MSG",
"sd_LBA", "sd_meandbh","no_trees")
View(fitphysical)
View(fitphysical)
View(fitphysical)
View(fitphysical)
View(physicaldf)
View(physicaldf)
pairs(physicaldf)
pairs(heterodf)
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
library(latice)
library(lattice
lattice
library(lattice)
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.7, 0.7, txt, cex = cex.cor * r)
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
#r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor )
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
#r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor )
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
#r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 0.5 )
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
#r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 0.5 )
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 0.5 )
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 0.5 )
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 1 )
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 1 )
}
pairs(physicaldf, lower.panel = panel.smooth, upper.panel = panel.cor)
pairs(heterodf, lower.panel = panel.smooth, upper.panel = panel.cor)
?princomp
princomp(Richness ~ ., data = physicaldf_Rich)
physicaldf_Rich = as.data.frame(cbind(sitevars$Richness,physicaldf))
princomp(Richness ~ ., data = physicaldf_Rich)
princomp(Richness ~ ., data = physicaldf_Rich[-1])
physicaldf_Rich[-1]
View(physicaldf_Rich)
princomp(sitevars$Richness ~ ., data = physicaldf_Rich[-1])
princomp(sitevars$Richness ~ ., data = physicaldf_Rich[-1])
princomp( ~ ., data = physicaldf)
physicalpc = princomp( ~ ., data = physicaldf)
biplot(pycicalpc)
physicalpc = princomp( ~ ., data = physicaldf)
biplot(pycicalpc)
biplot(phycicalpc)
biplot(physicalpc)
heteropc = princomp(~., data = heterodf)
warnings()
biplot(heteropc)
heteropc
heteropc$loadings
heteropc$center
heteropc$scores
heteropc$call
biplot(heteropc, scale = 1)
biplot(physicalpc, scale = 1)
?vif
vif(fitphysical)
vif(fithetero)
summary(fithetero)
fithetero = lm(Richness ~ Pos_Hetero_Index + no_NVC + no_trees + no_MSG + sd_SOM +
sd_pH + no_MSG + sd_meandbh + sd_treedensity +sd_LBA, data = sitevars)
summary(fithetero)
fitphysical2 = fitphysical = lm(Richness ~ Alt_m + Area_ha + Northing +
Perim_m + Buffer3 + meandbh + meanph+ meanSOM + meanLBA, data =  sitevars)
fitphysical2 = fitphysical = lm(Richness ~ Alt_m + Area_ha + Northing +
Perim_m + Buffer3 + meandbh + meanph+ meanSOM + meanLBA, data =  sitevars)
summary(fitphysical2)
fitphysical3 = fitphysical = lm(Richness ~ Alt_m + Area_ha + Northing +
Perim_m + Buffer3 + meandbh +  meanSOM + meanLBA, data =  sitevars)
summary(fitphysical3)
summary(fitphysical)
fitphysical4 = fitphysical = lm(Richness ~  Area_ha + Northing +
Perim_m + Buffer3 + meandbh +  meanSOM + meanLBA, data =  sitevars)
summary(fitphysical4)
visreg(fitphysical)
fitphysical5 = fitphysical = lm(Richness ~  Area_ha + Northing +
Perim_m + Buffer3 + meandbh +  meanSOM , data =  sitevars)
summary(fitphysical5)
summary(fitphysical)
princomp(physicaldf)
fitphysical6 = fitphysical = lm(Richness ~  Area_ha + Northing +
Buffer3 + meandbh +  meanSOM + meanLBA, data =  sitevars)
summary(fitphysical6)
fitphysical6 = fitphysical = lm(Richness ~  Area_ha + Northing +
Buffer3 + meandbh +  meanSOM, data =  sitevars)
summary(fitted.values())
summary(fitphysical6
)
fitphysical6 = fitphysical = lm(Richness ~ Northing +
Buffer3 + meandbh +  meanSOM, data =  sitevars)
summary(fitphysical6)
physicalpc = princomp( ~ ., data = physicaldf, cor = TRUE, scores = TRUE)
View(physicalpc)
biplot(physicalpc)
install.packages("factoextra")
library(factoextra)
install.packages("factoextra", dependencies = TRUE)
library(FactoMineR)
?FactoMineR
plot.PCA(physicalpc)
physicalpc$loadings
physicalpc$loadings
library(FactoMineR)
PCA(physicaldf, scale.unit = TRUE, ncp = 10)
pcphysical = PCA(physicaldf, scale.unit = TRUE, ncp = 10)
pcphysical$eig
pcphysical$var$contrib
pcphysical$ind$contrib
pcphysical$call$col.w
pcphysical$eig
pcphysical$var
pcphysical$var$cor
pcphysical$var$coord
eig.val = get_eigenvalue(res.pca)
installed.packages()
install.packages("factoextra", dependencies = TRUE)
install.packages(cowplot)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
install.packages("rlang",type="win.binary")
