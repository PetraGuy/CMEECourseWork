data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, SD dataset",
subtitle = "numbers in red are variable importance")
#extract model averaged parameter estimates
predicted_Z = predict(mean_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$nestZ
fit = lm(empirical_Z ~ predicted_Z)
#extract model averaged parameter estimates
predicted_Z = predict(mean_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$zr
fit = lm(empirical_Z ~ predicted_Z)
View(site_data_outlier3)
View(site_data_outlier3)
#extract model averaged parameter estimates
predicted_Z = predict(mean_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$randomz
fit = lm(empirical_Z ~ predicted_Z)
R2 = round(summary(fit)$r.squared,2)
subtitle = paste("R2 = ",R2)
data = as.data.frame(cbind(predicted_Z, empirical_Z))
ggplot(data, aes(x = predicted_Z, y = empirical_Z))+
geom_point()+
geom_abline(intercept = 0, slope = 1)+
labs(title = "Observed versus predicted data, mean dataset",
subtitle = subtitle)
#extract model averaged parameter estimates
predicted_Z = predict(sd_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$zr
fit = lm(empirical_Z ~ predicted_Z)
#extract model averaged parameter estimates
predicted_Z = predict(sd_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$randomz
fit = lm(empirical_Z ~ predicted_Z)
R2 = round(summary(fit)$r.squared,2)
subtitle = paste("R2 = ",R2)
data = as.data.frame(cbind(predicted_Z, empirical_Z))
ggplot(data, aes(x = predicted_Z, y = empirical_Z))+
geom_point()+
geom_abline(intercept = 0, slope = 1)+
labs(title = "Observed versus predicted data, sd dataset",
subtitle = subtitle)
hist(site_data_zs_zr$zr)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, SD dataset",
subtitle = "numbers in red are variable importance")
#llok and z and rand z together
df = as.data.frame(cbind(site_data_zs_zr$zr,site_data_zs_zr$slope
ggplot(df,aes(value, fill=key))+
#llok and z and rand z together
df = as.data.frame(cbind(site_data_zs_zr$zr,site_data_zs_zr$slope))
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)+
theme_minimal()+
scale_fill_manual(values = c(x="zr",y="slope"))
library(tidyr)
df = as.data.frame(cbind(site_data_zs_zr$zr,site_data_zs_zr$slope))%>%gather(key,value)
View(df)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)+
theme_minimal()+
scale_fill_manual(values = c(x="zr",y="slope"))
View(df)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)+
theme_minimal()+
scale_fill_manual(values = c(x="red",y="blue"))
View(df)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)+
#theme_minimal()+
scale_fill_manual(values = c(x="red",y="blue"))
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)+
#theme_minimal()+
#scale_fill_manual(values = c(x="red",y="blue"))
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = FALSE)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.2)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.1)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.05)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.025)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.03)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.035)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.04)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.04,alpha = 0.5)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.04,alpha = 0.6)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.04,alpha = 0.4)
ggplot(df,aes(value, fill=key))+
geom_histogram(show.legend = TRUE,binwidth = 0.04,alpha = 0.5)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,binwidth = 0.04,alpha = 0.5)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)
rm(list = ls())
cat("\014")
library(dplyr)
plotrichness = read.csv("../Data/plot_rich.csv")
#plot richness includes the missing plots as 0's, col 1 in random row numbers
plotrichness = plotrichness[, -1]
#Input all the ground flora data
Data = read.csv("../Data/GroundCover.csv")
Data_Yr2 = Data %>% filter(Yr_2 == 2)#%>%select(SITE,PLOT,NEST,COV,Amalgams)
colnames(Data_Yr2) = c("SITE", "PLOT", "NEST", "Cover", "BRC_number", "Year")
veg_codes = read.csv("../Data/vegetation_codes.csv")
# the  bryophytes, lichen etc have already been removed from veg codes csv so join this with ground cover to eliminate bryophytes from counts
colnames(veg_codes) = c("Species", "BRC_number")
Data_Yr2_veg = Data_Yr2 %>% inner_join(veg_codes)
# now using Dat_Yr2_veg means analysis is carried out without bryophytes
get_sacs = function(s){
site = Data_Yr2_veg%>%filter(SITE == s)
num_plots = max(site$PLOT)
rand_f = data.frame()
#browser()
for (k in 1:1000){
path = sample(1:num_plots,num_plots, replace = FALSE)
f = vector()
this_plot = unique(site%>%filter(PLOT == path[1])%>%select(BRC_number))
for (j in 1:(num_plots-1)){
#browser()
next_plot = unique(site%>%filter(PLOT == path[j+1])%>%select(BRC_number))
f[j] = nrow(this_plot)
combo_list = full_join(this_plot,next_plot)
f[j+1] = nrow(combo_list)
this_plot = combo_list
}
rand_f = rbind(rand_f,f)
}
return(rand_f)
}
get_aves = function(sacs_df){
aves = colMeans(sacs_df)
return(aves)
}
get_z = function(a){
l = length(a)
end = 200*l
areas = seq(200,end,200)
df = as.data.frame(cbind(log(areas),log(a)))
colnames(df) = c("logarea","logfreq")
rownames(df) = c()
model = lm(logfreq~logarea,df)
z = model$coefficients[2][[1]]
return(z)
}
i = 1
rand_zs = vector()
m = get_sacs(i)
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code")
plotrichness = read.csv("../Data/plot_rich.csv")
#plot richness includes the missing plots as 0's, col 1 in random row numbers
plotrichness = plotrichness[, -1]
#Input all the ground flora data
Data = read.csv("../Data/GroundCover.csv")
Data_Yr2 = Data %>% filter(Yr_2 == 2)#%>%select(SITE,PLOT,NEST,COV,Amalgams)
colnames(Data_Yr2) = c("SITE", "PLOT", "NEST", "Cover", "BRC_number", "Year")
veg_codes = read.csv("../Data/vegetation_codes.csv")
# the  bryophytes, lichen etc have already been removed from veg codes csv so join this with ground cover to eliminate bryophytes from counts
colnames(veg_codes) = c("Species", "BRC_number")
Data_Yr2_veg = Data_Yr2 %>% inner_join(veg_codes)
get_sacs = function(s){
site = Data_Yr2_veg%>%filter(SITE == s)
num_plots = max(site$PLOT)
rand_f = data.frame()
#browser()
for (k in 1:1000){
path = sample(1:num_plots,num_plots, replace = FALSE)
f = vector()
this_plot = unique(site%>%filter(PLOT == path[1])%>%select(BRC_number))
for (j in 1:(num_plots-1)){
#browser()
next_plot = unique(site%>%filter(PLOT == path[j+1])%>%select(BRC_number))
f[j] = nrow(this_plot)
combo_list = full_join(this_plot,next_plot)
f[j+1] = nrow(combo_list)
this_plot = combo_list
}
rand_f = rbind(rand_f,f)
}
return(rand_f)
}
get_aves = function(sacs_df){
aves = colMeans(sacs_df)
return(aves)
}
get_z = function(a){
l = length(a)
end = 200*l
areas = seq(200,end,200)
df = as.data.frame(cbind(log(areas),log(a)))
colnames(df) = c("logarea","logfreq")
rownames(df) = c()
model = lm(logfreq~logarea,df)
z = model$coefficients[2][[1]]
return(z)
}
rand_zs = vector()
i = 1
m = get_sacs(i)
rm(list = ls())
cat("\014")
library(dplyr)
plotrichness = read.csv("../Data/plot_rich.csv")
#plot richness includes the missing plots as 0's, col 1 in random row numbers
plotrichness = plotrichness[, -1]
#Input all the ground flora data
Data = read.csv("../Data/GroundCover.csv")
Data_Yr2 = Data %>% filter(Yr_2 == 2)#%>%select(SITE,PLOT,NEST,COV,Amalgams)
colnames(Data_Yr2) = c("SITE", "PLOT", "NEST", "Cover", "BRC_number", "Year")
veg_codes = read.csv("../Data/vegetation_codes.csv")
# the  bryophytes, lichen etc have already been removed from veg codes csv so join this with ground cover to eliminate bryophytes from counts
colnames(veg_codes) = c("Species", "BRC_number")
Data_Yr2_veg = Data_Yr2 %>% inner_join(veg_codes)
# now using Dat_Yr2_veg means analysis is carried out without bryophytes
get_sacs = function(s){
site = Data_Yr2_veg%>%filter(SITE == s)
num_plots = max(site$PLOT)
rand_f = data.frame()
#browser()
for (k in 1:1000){
path = sample(1:num_plots,num_plots, replace = FALSE)
f = vector()
this_plot = unique(site%>%filter(PLOT == path[1])%>%select(BRC_number))
for (j in 1:(num_plots-1)){
#browser()
next_plot = unique(site%>%filter(PLOT == path[j+1])%>%select(BRC_number))
f[j] = nrow(this_plot)
combo_list = full_join(this_plot,next_plot)
f[j+1] = nrow(combo_list)
this_plot = combo_list
}
rand_f = rbind(rand_f,f)
}
return(rand_f)
}
get_aves = function(sacs_df){
aves = colMeans(sacs_df)
return(aves)
}
get_z = function(a){
l = length(a)
end = 200*l
areas = seq(200,end,200)
df = as.data.frame(cbind(log(areas),log(a)))
colnames(df) = c("logarea","logfreq")
rownames(df) = c()
model = lm(logfreq~logarea,df)
z = model$coefficients[2][[1]]
return(z)
}
i = 1
m = get_sacs(i)
a = get_aves(m)
l = length(a)
end = 200*l
areas = seq(200,end,200)
df = as.data.frame(cbind(log(areas),log(a)))
colnames(df) = c("logarea","logfreq")
rownames(df) = c()
model = lm(logfreq~logarea,df)
model
summary(model)
## NB - several libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(car) # for vif
library(reshape) # melt
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
PlotZdata = read.csv("../../Data/z_ave_fits.csv")
Zs = PlotZdata%>%select(Site, slope)
zeta_r = readRDS("../Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
site_data_zs = inner_join(site_data,Zs)
#add in the new random path z's
rand_zs = read.csv("../../Data/rand_zs.csv")
colnames(rand_zs) = c("Site","zr")
site_data_zs_zr=inner_join(site_data_zs,rand_zs)
View(site_data_zs_zr)
View(site_data_zs_zr)
# slect only required variables
#change to either slope or zr if you want minmax method or random method...."zr"
subset_all = site_data_zs_zr%>%select("Site","slope","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","z","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
#remove the wood with the largest area
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier1 = subset_all%>%filter(Site!=largest_area)
site_data_outlier1 = site_data_outlier1[,-3] # remove area column now
#remove the outlier in PHI
largest_PHI = as.numeric(subset_all%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier2 = site_data_outlier1%>%filter(Site!=largest_PHI)
largest_PHI = as.numeric(site_data_outlier2%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier3 = site_data_outlier2%>%filter(Site!=largest_PHI)
subset_sd = site_data_outlier3%>%select("Site","z",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio","zeta_r")
subset_mean = site_data_outlier3%>%select("Site","z",
"Northing", "PHI",  "meandbh",
"meanph", "Buffer", "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG","zeta_r")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_mean[,-1]
z = subset_mean[,2]
data$meanph = (data$meanph)^2
#rescale the data
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
rescaled_mean_data = as.data.frame(cbind(z, rescaled_mean_data))
#create the model
mod_mean = lm(z~., data=rescaled_mean_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_mean, main = "Mean dataset")
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_sd[,-1]
z = subset_mean[,2]
#rescale the data
library(arm) #for standarize
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(z, rescaled_sd_data))
#create the model
mod_sd = lm(z~., data=rescaled_sd_data, na.action = "na.fail")
#have a look at the linear model
par(mfrow =c(2,2))
plot(mod_sd, main = "SD dataset")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<1.5)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, Mean dataset",
subtitle = "numbers in red are variable importance")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_sd)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "effect")+
labs(title = "Model averaged results for delta <1.5, Plot Zs, SD dataset",
subtitle = "numbers in red are variable importance")
#extract model averaged parameter estimates
predicted_Z = predict(mean_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$zr
fit = lm(empirical_Z ~ predicted_Z)
#extract model averaged parameter estimates
predicted_Z = predict(mean_avg_models, full = TRUE)
empirical_Z =  site_data_outlier3$z
fit = lm(empirical_Z ~ predicted_Z)
R2 = round(summary(fit)$r.squared,2)
subtitle = paste("R2 = ",R2)
data = as.data.frame(cbind(predicted_Z, empirical_Z))
ggplot(data, aes(x = predicted_Z, y = empirical_Z))+
geom_point()+
geom_abline(intercept = 0, slope = 1)+
labs(title = "Observed versus predicted data, mean dataset",
subtitle = subtitle)
source('~/.active-rstudio-document')
View(Data_Yr2_veg)
i = 1
numplots = max(Data_Yr2_veg%>%filter(PLOT == i)%>%select(PLOT))
