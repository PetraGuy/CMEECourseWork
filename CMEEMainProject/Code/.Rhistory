#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
nearby_woods
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)
###############################
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)
###############################
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)
###############################
nearby_woods
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)
geom_text_repel(nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)
geom_text_repel(nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)+
geom_text_repel(nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)+
geom_text_repel(nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
nearby_woods
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)+
geom_text_repel(aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
nearby_woods
#select nearby woods
nearby_woods = woods%>%filter(Long> -1.3 & Lat < 51.5  )
map<- get_map(location = c(lon = 0, lat = 51.25),
color = "color",
source = "google",
maptype = "satellite",
zoom = 9)
ggmap(map, extent ='device')+
geom_point(aes(x = Long, y = Lat),data = nearby_woods, color="red", size=2, alpha=1)+
geom_text_repel(data = nearby_woods, aes(x = Long, y = Lat,label = GridRef),
size = 3, colour = "white")
###############################
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
plot_site = function(sitevector){
#browser()
for (i in 1:length(sitevector)){
site = sitevector[i]
cf_site = cum_rich_all[[site]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
siteno  = paste("Site",site)
p = ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
labs(title = siteno)+
theme(plot.title = element_text(size = 10))
plot_list[[i]] = p
}
return(plot_list)
}
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
best_wood = wood_rich[wood_rich$d == max(wood_rich$d),]
best_wood
best_wood$Site
best_wood = wood_rich[wood_rich$d == max(wood_rich$d),]
x = best_wood$Site
f_bestsite = spec_rich[[x]]
cf_bestsite = cum_rich_all[[x]]
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
f_bestsite = f_bestsite[!is.na]
f_bestsite = f_bestsite[!is.na]
f_bestsite[f_bestsite==0]=NA
f_bestsite[f_bestsite==0]=NA
cf_bestsite[cf_bestsite==0]=NA
f_bestsite = f_bestsite[!is.na]
melted_f = melt(f_bestsite)
melted_cf = melt(cf_bestsite)
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15")
cf_bestsite = cf_bestsite[-16,]
cf_bestsite$plot = plots
melted_cf = melt(cf_bestsite)
f_bestsite = f_bestsite[-16,]
melted_f = melt(f_bestsite)
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,15)), decreasing = FALSE)
melted_cf$area = areas
melted_f$area = areas
model_lme = lme(value~variable,random = ~1|plot, data = melted_cf, na.action = na.omit)
melted_f$area = as.factor(melted_f$area) # ps, wont plot as separate plots if x continous
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 83, best wood, spread of richness per nest across all plots")
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 83, best wood, spread of richness per nest across all plots")
#box plots
melted_f$area = as.factor(melted_f$area) # ps, wont plot as separate plots if x continous
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 83, best wood, spread of richness per nest across all plots")
#box plots now just space out neatly, not to scale, so cant put on same graph
# nlme log log models, NB log = ln
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
fit3 = predict(model_nlme_area_log)
melted_cf$fit3 = fit3
#model plot
ggplot(melted_cf)+
geom_point(aes(x=log(area),y=log(value),na.rm =TRUE), colour = "black") +
geom_line(aes(x=log(area), y = fit3, group = plot), colour = "red")+
geom_abline(intercept = 2.2497,slope = 0.2357, size = 2, colour = "blue")+
ggtitle("Site 83, best wood, species area curve")+
annotate("text",x = 2, y = 4, label  = "S = 9.9A^0.24")
#model plot for best wood
ggplot(melted_cf)+
geom_point(aes(x=log(area),y=log(value),na.rm =TRUE), colour = "black") +
geom_line(aes(x=log(area), y = fit3, group = plot), colour = "red")+
geom_abline(intercept = 2.2497,slope = 0.2357, size = 2, colour = "blue")+
ggtitle("Site 83, best wood, species area curve")+
annotate("text",x = 2, y = 4, label  = "S = 9.9A^0.24")
#raw data cf scatter plot
ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
ggtitle("Raw data, site 83, cumulative richness across all plots with increasing area")+
annotate("text", x = 75, y = 60,
label = "Change in richness due to area less than change in richness due to plot")
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
row = c(int,slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope")
return(coef_df)
}
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
row = c(int,slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope")
return(coef_df)
}
fits = fits_all_woods()
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
minvars = fits[which(fits$slope == min(fits$slope)),]
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))
#model plot for best wood
ggplot(melted_cf)+
geom_point(aes(x=log(area),y=log(value),na.rm =TRUE), colour = "black") +
geom_line(aes(x=log(area), y = fit3, group = plot), colour = "red")+
geom_abline(intercept = 2.2497,slope = 0.2357, size = 2, colour = "blue")+
ggtitle("Site 83, best wood, species area curve")+
annotate("text",x = 2, y = 4, label  = "S = 9.9A^0.24")
#scatter plots of raw cf for wosrt 8 woods
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
row = c(int,slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope")
return(coef_df)
}
fits = fits_all_woods()
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
minvars = fits[which(fits$slope == min(fits$slope)),]
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
row = c(int,slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope")
return(coef_df)
}
fits = fits_all_woods()
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
minvars = fits[which(fits$slope == min(fits$slope)),]
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))
#scatter plots of raw cf for wosrt 8 woods
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
# scatter plots of raw cf data for top 8 woods
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
#scatter plots of raw cf for wosrt 8 woods
lo_woods = wood_rich%>%filter(d<45)
site_to_plot = lo_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
#box plots
melted_f$area = as.factor(melted_f$area) # ps, wont plot as separate plots if x continous
ggplot(melted_f, (aes_string(x='area', y='value', na.rm = TRUE)) )+
geom_boxplot(na.rm = TRUE, outlier.shape = 7, outlier.size = 3)+
ggtitle("Site 83, best wood, spread of richness per nest across all plots")
#box plots now just space out neatly, not to scale, so cant put on same graph
#model plot for best wood
ggplot(melted_cf)+
geom_point(aes(x=log(area),y=log(value),na.rm =TRUE), colour = "black") +
geom_line(aes(x=log(area), y = fit3, group = plot), colour = "red")+
geom_abline(intercept = 2.2497,slope = 0.2357, size = 2, colour = "blue")+
ggtitle("Site 83, best wood, species area curve")+
annotate("text",x = 2, y = 4, label  = "S = 9.9A^0.24")
#raw data cf scatter plot best wood
ggplot(melted_cf)+
geom_point(aes(x = area, y = value), colour = "black")+
ggtitle("Raw data, site 83, cumulative richness across all plots with increasing area")+
annotate("text", x = 75, y = 60,
label = "Change in richness due to area less than change in richness due to plot")
##fit every wood and look at coefficients
#prepare data
plots = c("plot1","plot2","plot3","plot4","plot5","plot6","plot7",
"plot8","plot9","plot10","plot11","plot12","plot13","plot14","plot15","plot16")
area = c("4","25","50","100","200")
areas = sort(as.numeric(rep(area,16)), decreasing = FALSE)
fits_all_woods = function(){
coef_df = data.frame(matrix(ncol = 2, nrow = 0))
#prepare data
for (i in 1:103){
#browser()
cf_site = cum_rich_all[[i]]
cf_site$plot = plots
melted_cf = melt(cf_site)
melted_cf$area = areas
# zeros will freak this model out, make them NAs
melted_cf[melted_cf==0]=NA
#model
model_nlme_area_log = lme(log(value)~log(area),random = ~1|plot, data = melted_cf, na.action = na.omit)
#get coefficients
int = model_nlme_area_log$coefficients$fixed[[1]]
slope = model_nlme_area_log$coefficients$fixed[[2]]
row = c(int,slope)
coef_df = rbind(coef_df,row)
}
colnames(coef_df) = c("intercept","slope")
return(coef_df)
}
fits = fits_all_woods()
#max and min slope
maxvars = fits[which(fits$slope == max(fits$slope)),]
minvars = fits[which(fits$slope == min(fits$slope)),]
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))
maxvars
minvars
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))+
ggtitle("ln/ln fits for all woodlands")+
annotate("text", x = 3, y = 0.5,
label = "maximum slope 0.43, minumum slope = 0.098")
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))+
ggtitle("ln/ln fits for all woodlands")+
annotate("text", x = 3, y = 0.5,
label = "maximum slope 0.43, minumum slope = 0.098")+
labs(x = "ln(area)", y = "ln(richness")
ggplot()+
geom_abline(data = fits,aes(intercept = intercept, slope = slope), colour = "pink")+
geom_abline(data = maxvars,aes(intercept = intercept, slope = slope), colour = "red" )+
geom_abline(data = minvars,aes(intercept = intercept, slope = slope), colour = "blue" )+
scale_x_continuous(limits = c(0,5))+
scale_y_continuous(limits = c(0,4))+
ggtitle("ln/ln fits for all woodlands")+
annotate("text", x = 3, y = 0.5,
label = "maximum slope 0.43, minumum slope = 0.098")+
labs(x = "ln(area)", y = "ln(richness)")
# scatter plots of raw cf data for top 8 woods
up_woods =  wood_rich%>%filter(d>115)
site_to_plot = up_woods$Site
plot_list =list()
plots_all = plot_site(site_to_plot)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
grid.arrange(plots_all[[1]], plots_all[[2]], plots_all[[3]],
plots_all[[4]], plots_all[[5]], plots_all[[6]],
plots_all[[7]],plots_all[[8]], ncol = 2)
