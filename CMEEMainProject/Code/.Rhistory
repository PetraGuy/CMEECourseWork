hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31)
hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31,63)
hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31)
hist(octsnew, breaks = breaks)
f = freq(octsnew)
f = frequency(octsnew)
f
octsnew
sort(octsnew)
octs
length(octs)
octs[1]
octs[1][1]
octs[[1]]
octs[[1]][[1]]
z = octs[[1]]+octs[[2]]
z
z = octs[[10]] +octs[[9]]
a = octe[[1]]
a = octets[[1]]
b = octets[[2]]
tmp = sum_vect(a,b)
sum_vect = function(x,y) {
while (length(x)!= length(y)) {
if (length(x) < length(y))    {
short = x
long =y }
else{
short = y
long = x
}
newshort <- c(x, rep(0, length(long)-length(short)))
sum = newshort + long
return(sum)
}
print("vectors are the same length")
sum = (x + y)
return(sum)
}
tmp = sum_vect(a,b)
tmp
sum_vect = function(x,y) {
if (length(x) < length(y))    {
short = x
long =y
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
tmp = sum_vect(a,b)
tmp
a
a = octets[[1]]
a
octets
octets = question_16()
octets
a = octets[[2]]
b = octets[[3]]
c = octets[[6]]
d = sum_vect(a,b)
e = sum_vect(b,a)
b
a
sum_vect = function(x,y) {
if (length(x) < length(y))    {
short = x
long =y
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(y, rep(0, length(long)-length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
e = sum_vect(b,a)
e
f = sum_vect(b,c)
f
tmp = sum_vect(a,b)
sum = vector()
sum = sum + tmp
sum
tmp
sum = sum_vect(sum,tmp)
sum
sum/2
question_16 = function(){
octets = list()
sum = vector()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
#find the average of the octaves which are list elements of octets
sum = vector()
for (i in 1:t-1)
oct_1 = octets[[i]]
oct_2 = octets[[i+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
ave = sum/t
return(octets)
}
f = question_16()
question_16 = function(){
octets = list()
sum = vector()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
#find the average of the octaves which are list elements of octets
sum = vector()
for (i in 1:t-1){
oct_1 = octets[[i]]
oct_2 = octets[[i+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
}
ave = sum/t
return(ave)
}
f = question_16()
View(neutral_time_series_speciation)
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
x
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
x
abundance = species_abundance(x)
for ( j in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[j]] = octaves(abundance)
}
octets
sum = vector()
for (l in 1:(t-1)){
oct_1 = octets[[l]]
oct_2 = octets[[l+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
}
ave = sum/t
ave
hist(ave)
barplot(ave)
?barplot
names = c("1-3","4-7","8-32","33-63")
barplot(ave,names.arg = names)
names = c("1-3","4-7","8-32")
barplot(ave,names.arg = names)
names = c("1-3","4-7","8-31","32-63","64-127")
barplot(ave,names.arg = names)
barplot(ave)
dev.off()
barplot(ave)
?barplot
ave
names
names = c("1-3","4-7","8-31","32-63","64-127",">127")
barplot(ave,names.arg = names)
?barplot
barplot(ave,names.arg = names, main = "Frequency of abundances in octets")
barplot(ave,names.arg = names, main = "Frequency of abundances in octets", xlab = "octets")
barplot(ave,names.arg = names, main = "Frequency of abundances in octets", xlab = "abundances")
comm = generate_community(10)
comm
ab = species_abundance(comm)
ab
o =  octaves(ab)
o
?Sys.time
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
cat("\014")
setwd("~/Documents/CMEECourseWork/CMEEMainProject/Code")
data = read.csv("../Data/Birds_Marsh.csv")
View(data)
View(data)
data2001_data = data[data$YR == '2000',]
species = with(data2001_data, table(data2001_data$PLOT, data2001_data$NEST))
species = as.data.frame(species)
colnames(species) = c("Plot","Nest","frequency")
species = mutate(group_by(species,Plot), cumsum = cumsum(frequency))
species = mutate(group_by(species,Plot), cumsum = cumsum(frequency))
library(ggplot2)
ggplot(species, (aes_string(x='Nest', y='CumFreq')) )+
geom_boxplot()
library(dplyr)
species = mutate(group_by(species,Plot), cumsum = cumsum(frequency))
colnames(species) = c("Plot","Nest","Freq","CumFreq")
library(ggplot2)
ggplot(species, (aes_string(x='Nest', y='CumFreq')) )+
geom_boxplot()
ggplot(data = species) +  geom_point(aes(x=Nest,y=CumFreq))
knitr::opts_chunk$set(echo = TRUE)
x = (1:4)
y = c(z1,z2,z3,z4)
library(reshape)
species = melt(Sites)
library(reshape)
species = melt(Sites)
rm(list = ls())
graphics.off()
Site1 =  c(1:4)
Site2 = c(2:5)
Site3 = c(3:6)
Site4 = c(4:7)
Sites = cbind(Site1,Site2,Site3,Site4)
SiteList = list(Site1,Site2,Site3,Site4)
print(Sites)
All4 = Reduce(intersect, list(Site1,Site2,Site3,Site4))
richness = length(unique(All4))
print(c("richness", richness))
z4 = (All4)
print(c("z4", z4))
combs = combn(4,3)
richness = vector()
for (i in 1:ncol(combs)){
combo = combs[,i]
x =  Reduce(intersect, list(Sites[,combo[3]],Sites[,combo[2]],Sites[,combo[1]]))
print(x)
richness[i] = length(unique(x))
}
print(c("richness", richness))
z3 = mean(richness)
print(c("z3", zeta))
combs = combn(4,2)
richness = vector()
for (i in 1:ncol(combs)){
combo = combs[,i]
x =  Reduce(intersect, list(Sites[,combo[1]],Sites[,combo[2]]))
print(x)
richness[i] = length(unique(x))
}
print(c("richness", richness))
z2 = mean(richness)
print(c("z2",z2))
library(reshape)
species = melt(Sites)
richness = length(unique(species$value))
z1 = mean(richness)/4
print(c("z1", z1))
x = (1:4)
y = c(z1,z2,z3,z4)
plot(x,y)
proc.time()
proc.time()[1]
?proc.time
?Sys.time
Sys.time()
Sys.time()[1]
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
initialise_min = function(x){
rep(1,x)
return(x)
}
choose_two = function(x){
sample(x,2)
}
neutral_step_speciation = function(x,v){
p = runif(1)
if (v<p) {
index = choose_two(length(x))
x[index[1]] = x[index[2]]
}
else {
newspecies =  max(x) + 1
index = sample((length(x)), size = 1, replace = TRUE)
x[index] = newspecies
}
return(x)}
neutral_generation_speciation = function(x,v){
n =  round(length(x)/2)
for (i in 1:n){
x = neutral_step_speciation(x,v)
}
return(x)}
initialise_min = function(x){
rep(1,x)
return(x)
}
rm(list = ls())
initialise_min = function(x){
rep(1,x)
return(x)
}
choose_two = function(x){
sample(x,2)
}
neutral_step_speciation = function(x,v){
p = runif(1)
if (v<p) {
index = choose_two(length(x))
x[index[1]] = x[index[2]]
}
else {
newspecies =  max(x) + 1
index = sample((length(x)), size = 1, replace = TRUE)
x[index] = newspecies
}
return(x)}
neutral_generation_speciation = function(x,v){
n =  round(length(x)/2)
for (i in 1:n){
x = neutral_step_speciation(x,v)
}
return(x)}
size = 10
v = 0.1
clock = 60
comm = initalize_min(size)
comm = initalise_min(size)
comm = initialise_min(size)
return(x)}
proc.time()[1]
proc.time()
proc.time()[1]
proc.time()[1]
?proc.time
proc.time()[2]
proc.time()[2]
proc.time()[2]
cluster_run = function(){
size = 10
v = 0.1
clock = 60
comm = initialise_min(size)
start <- proc.time()[2]
duration <- 60
while(proc.tim()-start < duration) {
print(proc.time())
comm = neutral_generation_speciation(comm,v)
}}
x = cluster_run
x
x = cluster_run()
cluster_run = function(){
size = 10
v = 0.1
clock = 60
comm = initialise_min(size)
start <- proc.time()[2]
duration <- 60
while(proc.time()-start < duration) {
print(proc.time())
comm = neutral_generation_speciation(comm,v)
}}
x = cluster_run()
comm = initialise_min(size)
comm
comm = initialise_min(10)
comm
initialise_min(10)
proc.time
proc.time()
cluster_run = function(speciation_rate = 0.002125, size = 10, wall_time = 60, interval_rich = 0, interval_oct = 0,
burn_in_generation = 0) {
comm = initialise_min(size)
start <- proc.time()[3]
duration <- 60
while(proc.time()[3]-start < duration) {
comm = neutral_generation_speciation(comm,speciation_rate)
}}
comm = cluster_run()
comm = initialise_min(size)
comm
x = initialise_min(10)
x
initialise_min = function(x){
comm = rep(1,x)
return(comm)
}
initialise_max = function(x){
comm = seq(1:x)
return(comm)
}
generate_community = function(n){
comm = sample(x = c(1:10), size = n, replace = TRUE)
return(comm)
}
x =  initialise_min(10)
x
choose_two = function(x){
two = sample(x,2)
return(two)
}
initialise_min = function(x){
comm = rep(1,x)
return(comm)
}
choose_two = function(x){
two = sample(x,2)
return(two)
}
neutral_step_speciation = function(x,v){
p = runif(1)
if (v<p) {
index = choose_two(length(x))
x[index[1]] = x[index[2]]
}
else {
newspecies =  max(x) + 1
index = sample((length(x)), size = 1, replace = TRUE)
x[index] = newspecies
}
return(x)}
cluster_run = function(speciation_rate = 0.002125, size = 10, wall_time = 60, interval_rich = 0, interval_oct = 0,
burn_in_generation = 0) {
start <- proc.time()[3]
duration <- 60
while(proc.time()[3]-start < duration) {
comm = neutral_generation_speciation(comm,speciation_rate)
}}
com = initialise_min(10)
com
com =  cluster_run(com)
comm
com
cluster_run = function(speciation_rate = 0.002125, size = 10, wall_time = 60, interval_rich = 0, interval_oct = 0,
burn_in_generation = 0) {
start <- proc.time()[3]
duration <- 60
while(proc.time()[3]-start < duration) {
comm = neutral_generation_speciation(comm,speciation_rate)
}
return(comm)}
com =  cluster_run(com)
cluster_run = function(speciation_rate = 0.002125, size = 10, wall_time = 60, interval_rich = 0, interval_oct = 0,
burn_in_generation = 0) {
start <- proc.time()[3]
duration <- 60
comm = initialise_min(size)
while(proc.time()[3]-start < duration) {
comm = neutral_generation_speciation(comm,speciation_rate)
}
return(comm)}
com =  cluster_run()
com
species_richness = function(x){
r = length(unique(x))
return(r)
}
