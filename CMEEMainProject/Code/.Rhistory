"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code")
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(gridExtra)
zeta_r = readRDS("../Zeta/zeta_r")
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3]
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
site_data$Pos_Hetero_Index = x
zeta_r = readRDS("../Zeta/zeta_r")
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(gridExtra)
zeta_r = readRDS("../Zeta/zeta_r")
# get the data
site_data =  read.csv("../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
zeta_r = readRDS("../Zeta/zeta_r")
zeta_r = readRDS("/Zeta/zeta_r")
zeta_r = readRDS("Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
g1 = ggplot(site_data_outlier, aes(x=meanTD, y=Northing))+ geom_point()+geom_smooth(method = "lm")+
xlab("mean tree density")
g2 = ggplot(site_data_outlier, aes(x=Buffer, y=Northing))+ geom_point()+geom_smooth(method = "lm")
g3 =g2 = ggplot(site_data_outlier, aes(x=Buffer, y=Northing))+ geom_point()+geom_smooth(method = "lm")
grid.arrange(g1,g2, ncol = 2)
View(site_data_outlier)
View(site_data_outlier)
View(site_data)
g1 = ggplot(site_data, aes(x=Buffer, y=meanSOM))+ geom_point()+geom_smooth(method = "lm")
g1
gplot(site_data, aes(x=Buffer1, y=meanSOM))+ geom_point()+geom_smooth(method = "lm")
ggplot(site_data, aes(x=Buffer1, y=meanSOM))+ geom_point()+geom_smooth(method = "lm")
ggplot(site_data, aes(x=Buffer, y=Mean_N))+ geom_point()+geom_smooth(method = "lm")
ggplot(site_data, aes(x=Buffer1, y=Mean_N))+ geom_point()+geom_smooth(method = "lm")
View(site_data)
g1 = ggplot(site_data, aes(x=Buffer1, y=meanSOM))+ geom_point()+geom_smooth(method = "lm")
g2 = ggplot(site_data, aes(x=Buffer1, y=mean_N))+ geom_point()+geom_smooth(method = "lm")
grid.arrange(g1,g2,ncol = 2)
g1 = ggplot(site_data, aes(x=Buffer1, y=meanSOM))+ geom_point()+geom_smooth(method = "lm")+
xlab("Buffer")
g2 = ggplot(site_data, aes(x=Buffer1, y=mean_N))+ geom_point()+geom_smooth(method = "lm")+
xlab("Buffer")
grid.arrange(g1,g2,ncol = 2)
library(ggplot2)
install.packages("ggplot2")
install.packages("tidyr")
install.packages("dplyr")
library(dplyr)
library(tidyr)
library(ggplot2)
inslibrary(scales)
nestZsdf = readRDS("../nest_mixed_model_fits.RDS")
plotZsdf = exp_zs = read.csv("../../Data/zexp.csv")
nestZs = nestZsdf$slope
plotZs = plotZsdf$x
df = as.data.frame(cbind(nestZs,plotZs))%>%gather(key,value)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 14))
nestZsdf = readRDS("../nest_mixed_model_fits.RDS")
plotZsdf = exp_zs = read.csv("../../Data/zexp.csv")
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code")
nestZsdf = readRDS("../nest_mixed_model_fits.RDS")
plotZsdf = exp_zs = read.csv("../../Data/zexp.csv")
nestZsdf = readRDS("../nest_mixed_model_fits.RDS")
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code")
nestZsdf = readRDS("../nest_mixed_model_fits.RDS")
wd
nestZsdf = readRDS("nest_mixed_model_fits.RDS")
plotZsdf = exp_zs = read.csv("../Data/zexp.csv")
nestZs = nestZsdf$slope
plotZs = plotZsdf$x
df = as.data.frame(cbind(nestZs,plotZs))%>%gather(key,value)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 14))
install.packages("scales")
library(scales)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 14))
library(scales)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 14))
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)
install.packages("digest")
ggplot(df,aes(value, fill=key))+
geom_density(show.legend = TRUE,alpha = 0.5)+
xlab("z value")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 14))
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
install.packages("knitr")
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(corrplot)
install.packages("corrplot")
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(corrplot)
library(car) # for vif
install.packages("car")
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(corrplot)
library(car) # for vif
library(reshape) # melt
install.packages("reshape")
## NB - aseveral libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(corrplot)
library(car) # for vif
library(reshape) # melt
zeta_r = readRDS("../Zeta/zeta_r")
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
# slect only required variables
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
#remove the wood with the largest area
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier = subset_all%>%filter(Site!=largest_area)
site_data_outlier = site_data_outlier[,-3] # remove area column now
subset_sd = site_data_outlier%>%select("Site","Richness",
"PHI","Buffer","Northing",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio","zeta_r")
#,
subset_mean = site_data_outlier%>%select("Site","Richness",
"PHI", "Northing", "meandbh","Buffer",
"meanph",  "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG","zeta_r")
#,
#look at correaltions between explanatory variables
vars = site_data_outlier[,-c(1,2)]
mcor = round(cor(vars, method = "pearson", use = "na.or.complete"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,
title = "pearson correlation",
mar=c(0,0,1,0))
mcor = round(cor(vars, method = "spearman", use = "na.or.complete"),2)
corrplot(mcor, type = "upper", tl.pos = "td",
method = "number", tl.cex = 0.5, tl.col = 'black',tl.srt=45,
order = "hclust", diag = FALSE,
title = "spearman correlation",
mar=c(0,0,1,0))
##Models for means#############
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_mean[,-1]
richness = subset_mean[,2] # removed because going to scale in next chunk
#data$meanph2 = (data$meanph)^2 #just leave as meanpH because doesnt come out either way??
#dont do this because meanpH and meanpH2 correlated and messes it all up. Just accept that model wont select mean pH very well
#rescale the mean data
library(arm) #for standarize
install.packages("arm")
#rescale the mean data
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
rescaled_mean_data = as.data.frame(cbind(richness, rescaled_mean_data))
#rescale the SD data
data = subset_sd[,-1]
richness = subset_sd[,2]
rescaled_sd_data = apply(data[,-1],2, rescale)
rescaled_sd_data = as.data.frame(cbind(richness, rescaled_sd_data))
#create the model
mod_mean = lm(richness~., data=rescaled_mean_data, na.action = "na.fail")
#create the model
mod_sd = lm(richness~., data=rescaled_sd_data, na.action = "na.fail")
library(MuMIn) #dredge and avg
install.packages("MuMIn")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_mean)
model_set = get.models(models, subset = delta<2)
#do model averaging, subset means zero method
mean_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(mean_avg_models)
coefs =  mean_avg_models$coefficients
importance =  c(NA,(as.vector(mean_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "MEAN dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")
library(MuMIn) #dredge and avg
#get top models
models = dredge(mod_sd)
model_set = get.models(models, subset = delta<1.99)
#do model averaging, subset means zero method
sd_avg_models = model.avg(model_set, subset)
#select output data
summary = summary(sd_avg_models)
coefs =  sd_avg_models$coefficients
importance =  c(NA,(as.vector(sd_avg_models$importance)))
coef_matrix = summary$coefmat.full
coefs = coef_matrix[,1]
adj_se = coef_matrix[,3]
CI_lower =  coefs - 1.96*adj_se
CI_upper = coefs + 1.96*adj_se
output = round(as.data.frame(cbind(coefs,adj_se, CI_lower, CI_upper, importance)),2)
# make plot of the variables and CI
n = nrow(output)
data = output[c(2:n),]
data = data[,c(1,3,4)]
data = t(data)
data = as.data.frame(data)
melted = melt(data)
fun_mean <- function(x){
data = data.frame(y=mean(x),label=mean(x,na.rm=T))
data = round(data,2)
return(data)}
#(aes_string(x = 'variable', y='value', na.rm = TRUE)
melted$variable = as.factor(melted$variable)# ps, wont plot as separate plots if x continous
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "STANDARD DEVIATION dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")
theme(axis.text.x=element_text(angle=45,hjust=1), face = "bold")
theme(axis.text.x = element_text(face="bold", size=14, angle=45)
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
theme(axis.text.x = element_text(face="bold", size=14, angle=45)
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "STANDARD DEVIATION dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")+
theme(axis.text.x = element_text(face="bold", size=14, angle=45))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "STANDARD DEVIATION dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")+
theme(axis.text.x = element_text(face="bold", size=14, angle=45, hjust=1))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter", face = "bold",size = 14)+
labs(title = "STANDARD DEVIATION dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")+
theme(axis.text.x = element_text(face="bold", size=14, angle=45, hjust=1))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter", face = "bold")+
labs(title = "STANDARD DEVIATION dataset. Model averaged results for delta <2",
subtitle = "Numbers in red are importance")+
theme(axis.text.x = element_text(angle=45, hjust=1))+
theme(text = element_text(size = 14, face = "bold"))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter", face = "bold")+
labs(title = "STANDARD DEVIATION dataset" )+
theme(axis.text.x = element_text(angle=45, hjust=1))+
theme(text = element_text(size = 14, face = "bold"))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "MEAN dataset")+
labs(title = "STANDARD DEVIATION dataset" )+
theme(axis.text.x = element_text(angle=45, hjust=1))+
theme(text = element_text(size = 14, face = "bold"))
ggplot(melted,aes_string(x = 'variable', y ='value' ) )+
geom_boxplot(na.rm = TRUE, width = 0)+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)+
stat_summary(geom = "text", label = output$importance[-1],fun.y = max, hjust = 1, colour = "red")+
geom_abline(intercept = 0, slope = 0)+
labs(y = "Effect size and 95%CI",x = "Parameter")+
labs(title = "MEAN dataset" )+
theme(axis.text.x = element_text(angle=45, hjust=1))+
theme(text = element_text(size = 14, face = "bold"))
