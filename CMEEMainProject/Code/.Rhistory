d1 = tableGrob(DBH(2,10))
d2 = tableGrob(DBH(2,11))
I1 = tableGrob(In(2,10))
I2 = tableGrob(In(2,11))
grid.arrange(p1,d1,I1,p2,d2, I2, nrow = 2, as.table =TRUE)
p1 = PlotPlot(1,5)
d1 = tableGrob(DBH(1,5))
I1 = tableGrob(In(1,5))
grid.arrange(p1,d1,I1, nrow = 2, as.table = TRUE)
p1 = PlotPlot(80,2)
p2 = PlotPlot(80,1)
p3 = PlotPlot(2,8)
p4 = PlotPlot(7,14)
grid.arrange(p1,p2,p3,p4, nrow = 2)
#enter the lower and upper limit of the means in GetSites(lower,upper)
GetSites(0,10)
#You can repeatedly call this chunk to see different random selections of plots
#with means within the range specified
GetSites(10,15)
GetSites(15, 20)
GetSites(20,25)
GetSites(25,30)
GetSites(30,35)
p1 = PlotPlot(85,4)
p2 = PlotPlot(86,12)
m1 = tableGrob(means[85,4])
m2 = tableGrob(means[86,12])
grid.arrange(p1,m1,p2,m2, nrow = 2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
m1 = tableGrob(means[10,8])
med1 = tableGrob(Medians_df[10,8])
m2 = tableGrob(means[38,3])
med2 =tableGrob(Medians_df[38,3])
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
m1 = tableGrob(means[10,8])
med1 = tableGrob(Medians_df[10,8])
m2 = tableGrob(means[38,3])
med2 =tableGrob(Medians_df[38,3])
grid.arrange(p1,m1,med1,p2,m2,med2, nrow = 2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
m1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
m2 = (means[38,3])
med2 =Medians_df[38,3]
skew2 = Skews_df[38,8]
d1 = as.data.frame(cbind(m1,med1,skew1))
d2 = as.data.frame(cbind(m2,med2,skew2))
grid.arrange(p1,m1,med1,p2,m2,med2, nrow = 2)
d1
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
m1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
m2 = (means[38,3])
med2 =Medians_df[38,3]
skew2 = Skews_df[38,8]
d1 = tableGrob(as.data.frame(cbind(m1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(m2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
Skews_df[38,3]
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
m1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
m2 = (means[38,3])
med2 = Medians_df[38,3]
skew2 = Skews_df[38,3]
d1 = tableGrob(as.data.frame(cbind(m1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(m2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
mean1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
mean2 = (means[38,3])
med2 = Medians_df[38,3]
skew2 = Skews_df[38,3]
d1 = tableGrob(as.data.frame(cbind(m1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(m2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
mean1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
mean2 = (means[38,3])
med2 = Medians_df[38,3]
skew2 = Skews_df[38,3]
d1 = tableGrob(as.data.frame(cbind(m1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(m2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
mean1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
mean2 = (means[38,3])
med2 = Medians_df[38,3]
skew2 = Skews_df[38,3]
d1 = tableGrob(as.data.frame(cbind(mean1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(mean2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
DBH(10,8)
d = DBH(10,8)
y d$Count
y = d$Count
x = d$DBH_class
l = lm(y~x)
plot(l)
plot(y,x)
DBH(10,8)
plot(x,y)
lm
l
abline(38.67, -10.5)
l$coefficients
l$coefficients[[1]]
l$coefficients[[2]]
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
l = lm(plotdata$Count ~ plotdata$DBH_class)
slope = l$coefficients[[2]]
Regress_df[i,j] = slope
}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
View(DBH_Yr2_agg)
View(DBH_Yr2_agg)
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
l = lm(plotdata$DBH_class ~ plotdata$Count)
slope = l$coefficients[[2]]
Regress_df[i,j] = slope
}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
plotdata = DBH(1,1)
l = lm(plotdata$DBH_class ~ plotdata$Count)
l$coefficients[[2]]
DBH(1,1)
PlotPlot(1,1)
l
plotdata = DBH(3,3)
plotdata
?lm
l = lm(plotdata$Count ~ plotdata$DBH_class)
l
PlotPlot(3,3)
abline(3.14286, -0.03571)
plot(plotdata$DBH_class,plotdata$Count)
abline(3.14286, -0.03571)
sitedata = DBH_Yr2_agg%>%filter(SITE == 3)
plotdata = sitedata %>%filter(PLOT == 14)
plotdata
typeof(plotdata)
length(plotdata)
plotdata
nrow(plotdata)
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if nrow(plotdata > 0){
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if (nrow(plotdata) > 0){
l = lm(plotdata$DBH_class ~ plotdata$Count)
slope = l$coefficients[[2]]
Regress_df[i,j] = slope
}}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
View(Regress_df)
View(Regress_df)
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if (nrow(plotdata) > 0){
l = lm(plotdata$DBH_class ~ plotdata$Count)
slope = round(l$coefficients[[2]], digits = 2)
Regress_df[i,j] = slope
}}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
p1 = PlotPlot(2,10)
p2 = PlotPlot(2,11)
d1 = tableGrob(DBH(2,10))
d2 = tableGrob(DBH(2,11))
I1 = tableGrob(In(2,10))
I2 = tableGrob(In(2,11))
grid.arrange(p1,d1,I1,p2,d2, I2, nrow = 2, as.table =TRUE)
p1 = PlotPlot(1,5)
d1 = tableGrob(DBH(1,5))
I1 = tableGrob(In(1,5))
grid.arrange(p1,d1,I1, nrow = 2, as.table = TRUE)
p1 = PlotPlot(80,2)
p2 = PlotPlot(80,1)
p3 = PlotPlot(2,8)
p4 = PlotPlot(7,14)
grid.arrange(p1,p2,p3,p4, nrow = 2)
#some other numbers that might be useful
max_class = DBH_Yr2_agg%>%filter(DBH_class == max(DBH_class)) #=32, but not for many things
highest_freq = DBH_Yr2_agg%>%filter(Count == max(Count)) #=372 in dbh 1 at Site103 plot14
# modal_dbh  = Mode(DBH_Yr2_agg%>%select(DBH_class))#1
# get the means of each plot
means = data.frame()
dbh_classes = c(1:32)
dbh_values = seq(from = 7.5, to = 162.5, length = 32)
for (i in 1:103){
sitedata = DBH_Yr2_agg%>%filter(SITE == i)
for (j in 1:16) {
plotdata = sitedata%>%filter(PLOT == j)
means[i,j] = round(sum(plotdata$Count*(plotdata$DBH_class*5+2.5))/sum(plotdata$Count), digits = 2)
}
}
rownames(means) = c(1:103)
colnames(means) = c(1:16)
#the Nan a=might be an issue, I think its Ok to replace them with zeros
means = replace(means, is.na(means),0)
#enter the lower and upper limit of the means in GetSites(lower,upper)
GetSites(0,10)
#You can repeatedly call this chunk to see different random selections of plots
#with means within the range specified
GetSites(10,15)
GetSites(15, 20)
GetSites(20,25)
GetSites(25,30)
GetSites(30,35)
p1 = PlotPlot(85,4)
p2 = PlotPlot(86,12)
m1 = tableGrob(means[85,4])
m2 = tableGrob(means[86,12])
grid.arrange(p1,m1,p2,m2, nrow = 2)
# Calculate the medians of the plots
Medians = function(data){
Medians_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
med_class = median(rep(plotdata$DBH_class, plotdata$Count))
Med = (med_class*5 + 2.25)
Medians_df[i,j] = round(Med, digits = 2)
}
}
return(Medians_df)
}
Medians_df = Medians(DBH_Yr2_agg)
standard_dev = function(data){
SD_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
values = rep(plotdata$DBH_class, plotdata$Count)
values = values*5 + 2.5
SD_df[i,j] = round(sd(values), digits = 2)
}
}
return(SD_df)
}
SD = standard_dev(DBH_Yr2_agg)
SD[SD == 0] = NA # If SD 0 because 1 group, skew = inf and other calcs not poss.
#PS some standard devs = NA because only one count, some NA because no DBH data for
#that plot - i.e. no trees.
#PPS double checks
#sum(means == 0) #=136
#sum(is.na(Medians_df))#=136
#sum(is.na(SD))#=153 more coz of plots with count = 1
Skews_df = round(3*(means - Medians_df)/SD, digits = 2)
skewmins = apply(Skews_df,2, min, na.rm = TRUE)
skewmaxs = apply(Skews_df,2, max, na.rm = TRUE)
# as with means, get sites with skews between certain values
GetSites_meds = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((Skews_df[i, j] < upper & !is.na(Skews_df[i, j]) ) && (Skews_df[i, j] > lower) &!is.na(Skews_df[i, j]) ) {
m_df = rbind(m_df, c(i, j, Skews_df[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Skew")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
s = paste("Site",site)
p = paste("Plot",plot)
m = paste("Skew ", mu)
Title = paste(s, p, m, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
GetSites_meds(-2.4,-1.7)
GetSites_meds(-1.7, -1)
GetSites_meds(-1, 0)
GetSites_meds(0, 1)
GetSites_meds(1,2)
p1 = PlotPlot(10,8)
p2 = PlotPlot(38,3)
mean1 = (means[10,8])
skew1 = Skews_df[10,8]
med1 =(Medians_df[10,8])
mean2 = (means[38,3])
med2 = Medians_df[38,3]
skew2 = Skews_df[38,3]
d1 = tableGrob(as.data.frame(cbind(mean1,med1,skew1)))
d2 = tableGrob(as.data.frame(cbind(mean2,med2,skew2)))
grid.arrange(p1,d1,p2,d2, nrow = 2)
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if (nrow(plotdata) > 0){
l = lm(plotdata$DBH_class ~ plotdata$Count)
slope = round(l$coefficients[[2]], digits = 2)
Regress_df[i,j] = slope
}}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if (nrow(plotdata) > 0){
l = lm(plotdata$DBH_class ~ plotdata$Count)
slope = round(l$coefficients[[2]], digits = 2)
Regress_df[i,j] = slope
}}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
mins = apply(Regress_df, 2, min)
max = apply(Regress_df,2,max)
mins
max
View(Regress_df)
mins = apply(Regress_df, 2, min, na.rm = TRUE)
max = apply(Regress_df,2,max, na.rm = TRUE)
mins
max
min = min(apply(Regress_df, 2, min, na.rm = TRUE))
max = max(apply(Regress_df,2,max, na.rm = TRUE))
min
max
max
min-slope = min(apply(Regress_df, 2, min, na.rm = TRUE))
min_slope = min(apply(Regress_df, 2, min, na.rm = TRUE))
max_slope = max(apply(Regress_df,2,max, na.rm = TRUE))
GetSites_regress = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((Regress_df[i, j] < upper & !is.na(Regress_df[i, j]) ) && (Regress_df[i, j] > lower) &!is.na(Regress_df[i, j]) ) {
m_df = rbind(m_df, c(i, j, Regress_df[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Skew")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
s = paste("Site",site)
p = paste("Plot",plot)
m = paste("Skew ", mu)
Title = paste(s, p, m, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
GetSites_regress(-9,-5)
GetSites_regress = function(lower, upper) {
m_df = data.frame()
for (i in 1:103) {
for (j in 1:16) {
if ((Regress_df[i, j] < upper & !is.na(Regress_df[i, j]) ) && (Regress_df[i, j] > lower) &!is.na(Regress_df[i, j]) ) {
m_df = rbind(m_df, c(i, j, Regress_df[i, j]))
} } }
colnames(m_df) = c("Site", "Plot", "Slope")
plot_list = list()
if (nrow(m_df) >= 4) {
for (i in 1:4) {
rand = sample(nrow(m_df), 4)
tmp = rand[1]
rand_row = m_df[tmp, ]
site = rand_row[[1]]
plot = rand_row[[2]]
mu = rand_row[[3]]
s = paste("Site",site)
p = paste("Plot",plot)
m = paste("Slope ", mu)
Title = paste(s, p, m, sep = " ")
data = DBH_Yr2_agg %>% filter(SITE == site) %>% filter(PLOT == plot)
Plot = ggplot(data = data, aes(x = DBH_class, y = Count)) +
geom_bar(stat = "identity",position = "dodge",width=0.5,col="black",fill ="green") +
scale_x_continuous("DBH class", breaks = 1:32,
#labels = c(1:32),
limits = c(0, 32)) +
labs(title = Title) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
plot_list[[i]] = Plot
}
grid.arrange(grobs = plot_list, ncol = 2)
}
}
GetSites_regress(-9,-5)
DBH(9,6)
GetSites_regress(-9,-5)
GetSites_regress(-5,-2)
GetSites_regress(-2,0)
data = DBH(100,9)
data
l = lm(data$Count~data$DBH_class)
l
regress = function(data){
Regress_df = data.frame()
for (i in 1:103){
sitedata = data%>%filter(SITE == i)
for (j in 1:16){
plotdata = sitedata%>%filter(PLOT == j)
if (nrow(plotdata) > 0){
l = lm(plotdata$Count ~ plotdata$DBH_class)
slope = round(l$coefficients[[2]], digits = 2)
Regress_df[i,j] = slope
}}
}
return(Regress_df)
}
Regress_df = regress(DBH_Yr2_agg)
min_slope = min(apply(Regress_df, 2, min, na.rm = TRUE))
max_slope = max(apply(Regress_df,2,max, na.rm = TRUE))
GetSites_regress(-200,-100)
GetSites_regress(-100,-50)
GetSites_regress(-50,-20)
GetSites_regress(-20,0)
GetSites_regress(-20,0)
GetSites_regress(-20,0)
GetSites_regress(-20,0)
GetSites_regress(-20,0)
GetSites_regress(0,10)
GetSites_regress(10,16)
GetSites_regress(10,16)
GetSites_regress(10,16)
GetSites_regress(8,16)
GetSites_regress(8,17)
GetSites_regress(5,17)
