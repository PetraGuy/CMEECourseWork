data1 = as.data.frame(cbind(Richness,A))
data1 = data[,-1]
colnames(data1) = c("Richness","A")
ggplot(data = data1, aes(x = A, y = Richness))+
geom_point()+
geom_smooth(method = lm)
ggplot(data = data1, aes(x = A, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data1 = as.data.frame(cbind(Richness,A))
data1 = data[,-1]
data1 = as.data.frame(cbind(Richness,A))
data1 = data1[,-1]
colnames(data1) = c("Richness","A")
ggplot(data = data1, aes(x = A, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data3 = as.data.frame(cbind(CompleteSiteLevelvars$no_NVC, A))
colnames(data3) = c("no_NVC","A")
ggplot(data = data3, aes(x = A, y = no_NVC))+
geom_point()+
geom_smooth(method = lm)
g = vector()
for( i in 1:103){
z = emp_zetas[,i]
g = z[1]-z[2]
}
data4 = as.data.frame(cbind(Richness,g))
data4 = data4[,-1]
colnames(data1) = c("Richness","g")
ggplot(data = data1, aes(x = g, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data5 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, A))
colnames(data5) = c("PHI","g")
data5 = data5[-c(80,5,78),]
ggplot(data = data2, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data5 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, g))
colnames(data5) = c("PHI","g")
data5 = data5[-c(80,5,78),]
ggplot(data = data2, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data4 = as.data.frame(cbind(Richness,g))
data4 = data4[,-1]
colnames(data1) = c("Richness","g")
ggplot(data = data4, aes(x = g, y = Richness))+
geom_point()+
geom_smooth(method = lm)
View(data4)
g = vector()
for( i in 1:103){
z = emp_zetas[,i]
g[i] = z[1]-z[2]
}
data4 = as.data.frame(cbind(Richness,g))
data4 = data4[,-1]
colnames(data1) = c("Richness","g")
ggplot(data = data4, aes(x = g, y = Richness))+
geom_point()+
geom_smooth(method = lm)
View(data4)
colnames(data1) = c("Richness","g")
data4 = as.data.frame(cbind(Richness,g))
data4 = data4[,-1]
colnames(data4) = c("Richness","g")
ggplot(data = data4, aes(x = g, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data5 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, g))
colnames(data5) = c("PHI","g")
data5 = data5[-c(80,5,78),]
ggplot(data = data5, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data6 = as.data.frame(cbind(CompleteSiteLevelvars$no_NVC, A))
colnames(data6) = c("no_NVC","A")
ggplot(data = data6, aes(x = A, y = no_NVC))+
geom_point()+
geom_smooth(method = lm)
data6 = as.data.frame(cbind(CompleteSiteLevelvars$no_NVC, g))
colnames(data6) = c("no_NVC","A")
ggplot(data = data6, aes(x = g, y = no_NVC))+
geom_point()+
geom_smooth(method = lm)
r = vector()
for( i in 1:103){
z = emp_zetas[,i]
r[i] = z[1]/(z[1]-z[2])
}
r
r = vector()
for( i in 1:103){
z = emp_zetas[,i]
r[i] = (z[1]-z[2])/z[1]
}
data7 = as.data.frame(cbind(Richness,r))
View(data7)
View(data7)
data7 = as.data.frame(cbind(Richness,r))
data7 = data7[,-1]
colnames(data7) = c("Richness","r")
ggplot(data = data7, aes(x = r, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data5 = data5[-c(80,5,78),]
ggplot(data = data8, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data5 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data5 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
View(data8)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data8 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = g, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data8 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = r, y = PHI))+
geom_point()+
geom_smooth(method = lm)
data9 = as.data.frame(cbind(CompleteSiteLevelvars$no_NVC, r))
colnames(data9) = c("no_NVC","A")
ggplot(data = data9, aes(x = r, y = no_NVC))+
geom_point()+
geom_smooth(method = lm)
data7 = as.data.frame(cbind(Richness,r))
data7 = data7[,-1]
colnames(data7) = c("Richness","r")
ggplot(data = data7, aes(x = r, y = Richness))+
geom_point()+
geom_smooth(method = loess)
data7 = as.data.frame(cbind(Richness,r))
data7 = data7[,-1]
colnames(data7) = c("Richness","r")
ggplot(data = data7, aes(x = r, y = Richness))+
geom_point()+
geom_smooth(method = lm)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data8 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = r, y = PHI))+
geom_point()+
geom_smooth(method = loess)
data8 = as.data.frame(cbind(CompleteSiteLevelvars$Pos_Hetero_Index, r))
colnames(data8) = c("PHI","r")
data8 = data8[-c(80,5,78),]
ggplot(data = data8, aes(x = r, y = PHI))+
geom_point()+
geom_smooth(method = y~x^2)
?geom_smooth
modelled_zetas[[1]]
zeta_coef_lis[[1]]
zeta_coef_list[[1]]
modelled_coefs = readRDS("zeta_coefficients.RDS")
modelled_coefs[[1]]
View(modelled_coefs)
View(modelled_coefs)
modelled_coefs[[2]]
source('C:/dev/code/CMEECourseWork/CMEEMainProject/Code/Zeta/zeta.R')
source('C:/dev/code/CMEECourseWork/CMEEMainProject/Code/Zeta/zeta.R')
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code/Zeta")
ground_flora = read.csv("../../Data/GroundCover.csv")
ground_flora = ground_flora%>%filter(Yr_2 == 2)
veg_codes = read.csv("../../Data/vegetation_codes.csv")
colnames(ground_flora) = c("SITE", "PLOT","NEST","Cover","BRC_number","Year")
colnames(veg_codes) = c("Species", "BRC_number")
flora = ground_flora%>% inner_join(veg_codes)
Richness = read.csv("../../Data/SiteRichness.csv")
CompleteSiteLevelvars = read.csv("../Data/CompleteSiteLevelVars.csv")
CompleteSiteLevelvars = read.csv("../../Data/CompleteSiteLevelVars.csv")
#create the presence absence matrix
create_presence_absence = function(sitenum){
Site = flora%>%filter(SITE==sitenum)
BRC = unique(Site$BRC_number)
BRC = as.character(BRC)
columns = length(unique(Site$BRC_number))
rows = length(unique(Site$PLOT))
Sitedf = data.frame(matrix(ncol = columns, nrow = rows))
colnames(Sitedf) = BRC
plots = unique(Site$PLOT)
Sitedf$plotnumber = plots
for (i in seq_along(plots)){
plot_num = plots[i]
plot = Site%>%filter(PLOT==plot_num)
matches = match(plot$BRC_number,BRC)
for (j in 1:length(matches)){
col = matches[j]
Sitedf[i,col] = 1
}
}
Sitedf[is.na(Sitedf)]=0
return(Sitedf)
}
pres_abs_dfs = list()
for (i in 1:103){
pres_abs_dfs[[i]] = create_presence_absence(i)
}
saveRDS(pres_abs_dfs, "petras_presence_absence.RDS") ########presence absence
# presence absence df for each site now available in pres_abs_df[[sitenumber]]
########################
#uses Zeta.decline.ex function to get zeta values from single pres_abs_dfs
#returns zetas
get_zetas =  function(sitenum){
df =   df = pres_abs_dfs[[sitenum]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
zetas = round(z_decline$zeta.val,8)
return(zetas)
}
#run through all dfs in pres_abs_df and get df of all zetas
#returns df of all zetas
get_all_zetas = function(){
all_zetas = as.data.frame(matrix(nrow = 16))
rownames(all_zetas) = c(1:16)
for (i in 1:103){
zs = get_zetas(i)
short  = 16 - length(zs)
pad = rep(NA,short)
zs = c(zs,pad)
colname = paste("Site",i)
all_zetas[colname] = zs
}
return(all_zetas)
}
zetas_df = get_all_zetas()
zetas_df = zetas_df[,-1]
saveRDS(zetas_df,"empirical_zetas.RDS") ##############empirical zetas
get_fits_exp = function(data){
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~orders)
}
return(model)
}
#creates a list of linear models
# this is log/log fit so z = A(order)^B
#logz = logA + Blog(order)
# A = exp(int), B = slope
#takes each col of a df of zetas and returns power model
get_fits_power = function(data){
model = list()
for (i in 1:103){
y = data[,i]
y = y[!is.na(y)]
y = y[which(y>0)]
l = length(y)
orders = seq(1,l,1)
model[[i]] = lm(log(y)~log(orders))
}
return(model)
}
# get the coefficients, se, r2 from model object
get_coef =  function(model){
coefs_df = as.data.frame(matrix(nrow = 5))
for (i in 1:103){
coefs  = summary(model[[i]])$coefficients
int = coefs[[1]]
slope = coefs[[2]]
se_int = coefs[[3]]
se_slope = coefs[[4]]
r2 = summary(model[[i]])$r.squared
col = c(int,slope,se_int, se_slope,r2)
colname = paste("Site",i)
coefs_df[colname] = col
}
rownames(coefs_df) = c("int","slope","se_int","se_slope","R2")
coefs_df = coefs_df[,-1]
return(coefs_df)
}
fits_exp = get_fits_exp(zetas_df)
fits_power = get_fits_power(zetas_df)
zeta_coef_exp_pg = get_coef(fits_exp)
zeta_coef_power_pg = get_coef(fits_power)
get_zetas_coef =  function(){
#browser()
coef = data.frame(nrow = 4)
for (i in 1:103){
df =   df = pres_abs_dfs[[i]]
last.column = ncol(df)
z_df = df[-last.column]
rows = nrow(z_df)
z_decline = Zeta.decline.ex(z_df, 1:rows)
int_exp =  z_decline$zeta.exp[[1]][[1]]
slope_exp = z_decline$zeta.exp[[1]][[2]]
int_pl = z_decline$zeta.pl[[1]][[1]]
slope_pl =  z_decline$zeta.pl[[1]][[2]]
col = c(int_exp,slope_exp,int_pl,slope_pl)
coef = as.data.frame(cbind(coef,col))
}
rownames(coef)=c("exp int", "exp slope", "power int", "power slope")
coef = coef[-1,]
return(coef)
}
zeta_coef_zetadiv = get_zetas_coef()
zeta_coef_zetadiv = zeta_coef_zetadiv[,-1]
#put the zetadiv coefficients in the same format as my coef so they
#can all go intos same fucntion to create modelled zetas.
zeta_coef_exp_zetadiv = zeta_coef_zetadiv[1:2,]
zeta_coef_power_zetadiv = zeta_coef_zetadiv[3:4,]
zeta_coef_list = list()
zeta_coef_list[[1]] = zeta_coef_exp_pg
zeta_coef_list[[2]] = zeta_coef_exp_zetadiv
zeta_coef_list[[3]] = zeta_coef_power_pg
zeta_coef_list[[4]] = zeta_coef_power_zetadiv
saveRDS(zeta_coef_list,"zeta_coefficients.RDS")##########zeta coefficients
View(zeta_coef_list)
emp_zetas = readRDS("empirical_zetas.RDS")
modelled_coefs = readRDS("zeta_coefficients.RDS")
modelled_zetas = readRDS("modelled_zetas.RDS")
View(modelled_coefs)
View(modelled_coefs)
View(modelled_coefs)
View(modelled_zetas)
modelled_coefs[[1]]
modelled_zetas[[1]]
head(modelled_coefs[[1]])
diff_exp = vector()
diff_pwr = vector()
for (i in 1:103){
mod_z_exp = modelled_zetas[[1]][1,i]
mod_z_pwr = modelled_zetas[[3]][1,i]
z_emp = emp_zetas[1,i]
diff_exp[i] = z_emp - mod_z_exp
diff_pwr[i] = z_emp - mod_z_pwr
}
data = as.data.frame(cbind(diff_exp, diff_pwr))
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot()
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot()+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot(width = 0.5)+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot(width = 0.3)+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
ggplot(stack(data), aes(x = ind, y = values, colour = ind))+
geom_boxplot(width = 0.3)+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot(width = 0.3, fill = "blue")+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
ggplot(stack(data), aes(x = ind, y = values))+
geom_boxplot(width = 0.3, fill = "grey")+
ylab("Difference in empirical and modelled values")+
xlab("Model type")+
ggtitle("The empircal - modelled value for zeta_1" )
?nls
View(zetas_df)
View(emp_zetas)
?exp
?^
m1 = nls(y~a*exp(order^-b), data = emp_zetas[,1])
m1 = nls(y~a*exp(order^-b), data = emp_zetas)
colnames(emp_zetas) = "zeta"
View(emp_zetas)
m1 = nls(zeta~a*exp(order^-b), data = emp_zetas)
m1 = nls(.~a*exp(order^-b), data = emp_zetas)
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
y
x<-seq(0,16,1)
y<- emp_zetas[,1]
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b))
#get some estimation of goodness of fit
cor(y,predict(m))
y
x
x<-seq(1,16,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b))
x<-seq(1,16,1)
y<- emp_zetas[,1]
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b))
x
y
a = exp(log(y[1]-1))
a
a_start = exp(log(y[1]-1))
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b),start = list(a = a_start))
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b),start = list(a = a_start, b = 2.8))
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b),start = list(a = a_start, b = -1*2.8))
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*exp(x^b),start = list(a = 8.575, b = -1*1.28))
y = zetas_df[,1]
y
modelled_zetas[[1]]
modelled_zetas[[2]]
modelled_zetas[[3]]
modelled_zetas[[4]]
m = nls(y~a*(exp(1/x))*(b/x), start = list(a = 11, b = 1))
x = c(1:16)
y = emp_zetas[,1]
m = nls(y~a*(exp(1/x))*(b/x), start = list(a = 11, b = 1))
y
a
m = nls(y~a^(-1*b*x), start = list(a = 2, b = 0.1))
m = nls(y~a^(b*x), start = list(a = 2, b = -0.1))
m = nls.lm(y~a^(b*x), start = list(a = 2, b = -0.1))
install.packages("minipack.lm")
m = nls.lm(y~c*(exp(x^(a)))*exp(b*x), start = list(a = -2, b = -0.17, c = 10))
m = nls(y~c*(exp(x^(a)))*exp(b*x), start = list(a = -2, b = -0.17, c = 10))
m
p = predict(m)
p
cor(p,y)
plot(p,y)
plot(x = p, y = y)
p = predict(m,x)
p
data1 = as.data.frame(cbind(x,y))
data2 = as.data.frame(cbind(x,p))
ggplot(data1, aes(x = x, y = y) )+
geom_point()
ggplot(data1, aes(x = x, y = y) )+
geom_point()+
geom_point(data2, aes(y = p))
ggplot(data1, aes(x = x, y = y) )+
geom_point()+
geom_point(data2, aes(x = x,y = p))
View(data1)
View(data2)
ggplot(data1, aes(x = x, y = y) )+
geom_line()+
geom_line(data2, aes(x = x,y = p))
ggplot(data = data1, aes(x = x, y = y) )+
geom_line()+
geom_line(data = data2, aes(x = x,y = p))
ggplot(data = data1, aes(x = x, y = y) )+
geom_point()+
geom_point(data = data2, aes(x = x,y = p))
ggplot(data = data1, aes(x = x, y = y) )+
geom_point(colour = "red", size = 1)+
geom_point(data = data2, aes(x = x,y = p))
ggplot(data = data1, aes(x = x, y = y) )+
geom_point(colour = "red", size = 4)+
geom_point(data = data2, aes(x = x,y = p))
p
y
m = nls(y~c*(exp(x^(a)))*exp(b*x), start = list(a = 0.2, b = 0.1, c = 3))
m = nls(y~c*(exp(x^(a)))*exp(b*x), start = list(a = -0.2, b = -0.1, c = 3))
m
p = predict(m,x)
p
m = nls(y~c*(exp(x^(a)))*exp(b*x), start = list(a = -2, b = -0.17, c = 10))
p1 = predict(m,x)
m1 = nls(y~c*(exp(x^(a)))*exp(b*x), start = list(a = -2, b = -0.17, c = 10))
p1 = predict(m1,x)
cor(p,y)
m2 = nls(y2~c*(exp(x^(a)))*exp(b*x), start = list(a = -0.2, b = -0.1, c = 3))
y2 = emp_zetas[,2]
m2 = nls(y2~c*(exp(x^(a)))*exp(b*x), start = list(a = -0.2, b = -0.1, c = 3))
p2 = predict(m2,x)
cor(p,y2)
p2
cor(p2,y2)
data3 = as.data.frame(cbind(x,y2))
data4 = as.data.frame(cbind(x,p2))
ggplot(data = data3, aes(x = x, y = y2) )+
geom_point(colour = "red", size = 4)+
geom_point(data = data4, aes(x = x,y = p2))
ggplot(data = data3, aes(x = x, y = y2) )+
geom_point(size = 4)+
geom_point(data = data4, aes(x = x,y = p2), colour = "red")
m1
m2
