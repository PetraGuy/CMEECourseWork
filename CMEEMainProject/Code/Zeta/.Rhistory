sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
#check:
emp_zetas_subset = emp_zetas[-(sites_to_remove),]
Richness_check = get_rich_mod(emp_zetas_subset)
mod_rich = get_rich_mod(new_mod_zetas)
get_zeta_df = function(){
zeta_min_df = data.frame()
zeta_max_df = data.frame()
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
}
#look at errors in actual richness and predicted richnes for order = 16
#calcuale the min zeta vector, need to know if there NAs
# and only do for the ones we know will work
#so removing sites_to_remove and outliers
#sites to remove did not converge for nls and outliers gave weird results in richness model
total_to_remove = c(sites_to_remove,outliers)
emp_zetas_subset = emp_zetas[,-total_to_remove]
k = ncol(emp_zetas_subset)
# get the coefficients for this site, site i
get_coefs = function(i){
coefficients = vector()
coeffs = list()
coefficients[1] = new_mod_coefs[[i]][[1]] #a
coefficients[2] = new_mod_coefs[[i]][[4]] #se a
coefficients[3] = new_mod_coefs[[i]][[2]] #b
coefficients[4] = new_mod_coefs[[i]][[5]] #se b
coefficients[5] = new_mod_coefs[[i]][[3]] #c
coefficients[6] = new_mod_coefs[[i]][[6]] #se c
amin = coefficients[1]+coefficients[2]
a = coefficients[1]
amax = coefficients[1]-coefficients[2]
bmin = coefficients[3]+coefficients[4]
b = coefficients[3]
bmax = coefficients[3]-coefficients[4]
cmin = coefficients[5]-coefficients[6]
c = coefficients[5]
cmax = coefficients[5]+coefficients[6]
as = c(amin,a,amax)
bs = c(bmin,b,bmax)
cs = c(cmin,c,cmax)
coeffs[[1]] = as
coeffs[[2]] = bs
coeffs[[3]] = cs
return(coeffs) #coeffs[[1]] is amin,a and amax for site 1
}
get_a_zeta = function(i,a,b,c){
zeta = c*exp(i^a)*exp(i*b)
return(zeta)
}
get_site_zetas = function(a,b,c){
zetas = vector()
for (j in 1:16){
zeta[j] = get_a_zeta(j,a,b,c)
}
return(zetas)
}
get_rich_mod = function(data){
nCr = vector()
Rich_mod = vector()
for (i in 1:k){
zs = data[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
get_zeta_df = function(){
zeta_min_df = data.frame()
zeta_max_df = data.frame()
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
}
get_zeta_df = function(){
zetas = list()
zeta_min_df = data.frame()
zeta_max_df = data.frame()
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
get_zeta_df()
get_zeta_df = function(){
browser()
zetas = list()
zeta_min_df = data.frame()
zeta_max_df = data.frame()
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
get_zeta_df()
coeffs[[1]][[1]]n
#look at errors in actual richness and predicted richnes for order = 16
#calcuale the min zeta vector, need to know if there NAs
# and only do for the ones we know will work
#so removing sites_to_remove and outliers
#sites to remove did not converge for nls and outliers gave weird results in richness model
total_to_remove = c(sites_to_remove,outliers)
emp_zetas_subset = emp_zetas[,-total_to_remove]
k = ncol(emp_zetas_subset)
# get the coefficients for this site, site i
get_coefs = function(i){
coefficients = vector()
coeffs = list()
coefficients[1] = new_mod_coefs[[i]][[1]] #a
coefficients[2] = new_mod_coefs[[i]][[4]] #se a
coefficients[3] = new_mod_coefs[[i]][[2]] #b
coefficients[4] = new_mod_coefs[[i]][[5]] #se b
coefficients[5] = new_mod_coefs[[i]][[3]] #c
coefficients[6] = new_mod_coefs[[i]][[6]] #se c
amin = coefficients[1]+coefficients[2]
a = coefficients[1]
amax = coefficients[1]-coefficients[2]
bmin = coefficients[3]+coefficients[4]
b = coefficients[3]
bmax = coefficients[3]-coefficients[4]
cmin = coefficients[5]-coefficients[6]
c = coefficients[5]
cmax = coefficients[5]+coefficients[6]
as = c(amin,a,amax)
bs = c(bmin,b,bmax)
cs = c(cmin,c,cmax)
coeffs[[1]] = as
coeffs[[2]] = bs
coeffs[[3]] = cs
return(coeffs) #coeffs[[1]] is amin,a and amax for site 1
}
get_a_zeta = function(i,a,b,c){
zeta = c*exp(i^a)*exp(i*b)
return(zeta)
}
get_site_zetas = function(a,b,c){
zetas = vector()
for (j in 1:16){
zetas[j] = get_a_zeta(j,a,b,c)
}
return(zetas)
}
get_rich_mod = function(data){
nCr = vector()
Rich_mod = vector()
for (i in 1:k){
zs = data[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
get_zeta_df = function(){
browser()
zetas = list()
zeta_min_df = data.frame()
zeta_max_df = data.frame()
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
get_zeta_df()
get_zeta_df = function(){
browser()
zetas = list()
zeta_min_df = data.frame(nrow = 16)
zeta_max_df = data.frame(nrow = 16)
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
get_zeta_df()
nn
get_zeta_df = function(){
#browser()
zetas = list()
zeta_min_df = data.frame(nrow = 16)
zeta_max_df = data.frame(nrow = 16)
for (i in 1:k){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
zeta_minmax = get_zeta_df()
zeta_minmax[[1]]
ncols(zeta_minmax)
ncols(zeta_minmax[[1]])
ncol(zeta_minmax[[1]])
View(coeffs)
coeffs[[1]]
new_mod_coefs[[1]]
View(new_mod_coefs)
View(new_mod_coefs)
k
total_to_remove
sites
sites - outliers
sites[-outliers]
outliers
subset_sites = site[-outliers]
subset_sites = sites[-outliers]
get_zeta_df = function(){
#browser()
zetas = list()
zeta_min_df = data.frame(nrow = 16)
zeta_max_df = data.frame(nrow = 16)
for (i in 1:subset_sites){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
zeta_minmax = get_zeta_df()
get_zeta_df = function(){
#browser()
zetas = list()
zeta_min_df = data.frame(nrow = 16)
zeta_max_df = data.frame(nrow = 16)
for (i in subset_sites){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df
zetas[[2]] = zeta_max_df
return(zetas)
}
zeta_minmax = get_zeta_df()
zeta_minmax[[1]]
rich_mins = get_rich_mod(zeta_minmax[[1]])
rich_max = get_rich_mod(zeta_minmax[[2]])
View(subset_woods_cut)
rich_mins = get_rich_mod(zeta_minmax[[1]])
rich_mod = subset_woods_cut$mod_rich
rich_max = get_rich_mod(zeta_minmax[[2]])
rich_emp = subset_woods_cut$Richness
rich_mins
rich_max
rich_mod
zeta_minmax[[1]]
k
ncol(subset_woods_cut)
length(subset_sites)
length(total_to_remove)
ncol(emp_zetas)
total_to_remove = c(sites_to_remove,outliers)
emp_zetas_subset = emp_zetas[,-total_to_remove]
k = ncol(emp_zetas_subset)
k
ncol(emp_zetas_subset)
total_to_remove
emp_zetas_subset[,1]
ncol(emp_zetas)
103-14
`substring<-`()
subset_sites
length(subset_sites)
data = zeta_minmax[[1]]
i = 1
zs = data[,i]
zs
data
zeta_minmax[[2]]
get_zeta_df = function(){
#browser()
zetas = list()
zeta_min_df = data.frame(nrow = 16)
zeta_max_df = data.frame(nrow = 16)
for (i in subset_sites){
coef = get_coefs(i)
zetamins = get_site_zetas(coef[[1]][[1]],coef[[2]][[1]],coef[[3]][[1]])
zetamax = get_site_zetas(coef[[1]][[3]],coef[[2]][[3]],coef[[3]][[3]])
zeta_min_df = cbind(zeta_min_df,zetamins)
zeta_max_df = cbind(zeta_max_df,zetamax)
}
zetas[[1]] = zeta_min_df[,-1]
zetas[[2]] = zeta_max_df[,-1]
return(zetas)
}
zeta_minmax = get_zeta_df()
zeta_minmax[[1]]
rich_mins = get_rich_mod(zeta_minmax[[1]])
i = 1
nCr = vector()
Rich_mod = vector()
data = zeta_minmax[[1]]
zs = data[,i]
zs
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
sum(S)
zeta_minmax = get_zeta_df()
rich_mins = get_rich_mod(zeta_minmax[[1]])
zeta_minmax[[1]]
View(zeta_minmax)
nCr = vector()
Rich_mod = vector()
for (i in 1:k){
zs = data[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
data[,1]
get_rich_mod = function(data){
nCr = vector()
Rich_mod = vector()
for (i in 1:89){
zs = data[,i]
l = length(zs)
z = vector()
sign = vector()
for (j in 1:l){
nCr[j] = choose(l,j)
sign[j] = (-1)^(j+1)
z[j] = zs[j]
}
S = nCr*sign*z
Rich_mod[i] = sum(S)
}
return(Rich_mod)
}
rich_mins = get_rich_mod(zeta_minmax[[1]])
rich_mod = subset_woods_cut$mod_rich
rich_max = get_rich_mod(zeta_minmax[[2]])
rich_emp = subset_woods_cut$Richness
rich_mins
rich_max
rich_mod
rich_err = rich_max - rich_mins
rich_err
rich_percent_err = rich_err/rich_emp
rich_percent_err
rich_percent_err = (rich_err/rich_emp)*100
barplot(rich_percent_err)
boxplot(rich_percent_err)
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "black")
rich_percent_err = as.data.frame((rich_err/rich_emp)*100)
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "black")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
ylab = ("percentage error")+
annotate("text", x = 4, y = 25, label = "(maximum modelled richnes - minimum modelled richnes)/actual richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
ylab = ("percentage error")+
annotate("text", x = 4, y = 25, label = "(maximum modelled richness - minimum modelled richness)/actual richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
ylab = ("percentage error")+
annotate("text", x = 4, y = 25, label = "stuff")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
ylab = ("percentage error"
ggplot()+
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs = (y = "percentage error")+
annotate("text", x = 4, y = 25, label = "stuff")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs = (y = "percentage error")+
labs(caption =  "stuff")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
labs(caption =  "stuff")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
labs(caption =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", x = 1,y = 60, label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", x = 0.5,y = 60, label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", x = 0.75,y = 60, label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", x = 0.8,y = 60, label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
annotate("text", x = 0.85,y = 60, label =  "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
ggtitle( "(max modelled richness - min modelled richness)/observed richness")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
ggtitle( "(max modelled richness - min modelled richness)/observed richness")+
annotate("text",x = 0.8, y = 65, label = "three quarters of the errors in the modelled richness are below 25% ")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error")+
ggtitle( "(max modelled richness - min modelled richness)/observed richness")+
annotate("text",x = 0.9, y = 65, label = "three quarters of the errors in the modelled richness are below 25% ")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error in modelled richness")+
ggtitle( "(max modelled richness - min modelled richness)/observed richness")+
annotate("text",x = 0.9, y = 65, label = "three quarters of the errors in the modelled richness are below 25% ")
ggplot()+
geom_boxplot(data = rich_percent_err, aes(x = "", y = rich_percent_err),width = 0.3, fill = "grey")+
labs (y = "percentage error in modelled richness")+
labs(x = "")+
ggtitle( "(max modelled richness - min modelled richness)/observed richness")+
annotate("text",x = 0.9, y = 65, label = "three quarters of the errors in the modelled richness are below 25% ")
