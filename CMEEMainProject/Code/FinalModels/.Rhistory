varnames = c("Northing" ,"PHI","Buffer", "no_NVC",
"sd_pH" , "sd_LBA", "sd_meandbh","sd_TD")
grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,ncol =2)
grid.arrange(g1,g2,g3,g4,g5,g6,g7,ncol =2)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
cat("\014")
library(dplyr)
library(rpart)
library(rpart.plot)
library(gbm)#bgm
library(caret)
library(Metrics) #rmse
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD")
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio")
subset_mean = subset_all%>%select("Richness",
"Northing", "PHI",  "meandbh",
"meanph", "Buffer", "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG")
#Using bootstrapping and CV but without train an test set (see Kuhn p67)
#Do a by hand tune first to explore what's might happen at the limits
#gbm we can tune:n.trees,interaction.depth,shrinkage,n.minobsinnode
set.seed(1)
model = gbm(formula = Richness~.,
data = subset_mean,
n.minobsinnode = 5,
bag.fraction = 0.8 ,
interaction.depth =5,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,subset_mean,10000)
rmse(actual = subset_mean$Richness,
predicted = pred)
summary(model,n.trees=10000)
#Using bootstrapping and CV but without train an test set (see Kuhn p67)
#Do a by hand tune first to explore what's might happen at the limits
#gbm we can tune:n.trees,interaction.depth,shrinkage,n.minobsinnode
set.seed(1)
model = gbm(formula = Richness~.,
data = subset_mean,
n.minobsinnode = 5,
bag.fraction = 0.8 ,
interaction.depth =5,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
summary(model,n.trees=10000)
subset_sd = subset_all%>%select("Richness",
"PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio")
subset_mean = subset_all%>%select("Richness",
"PHI",  "meandbh",
"meanph", "Buffer", "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG")
#Using bootstrapping and CV but without train an test set (see Kuhn p67)
#Do a by hand tune first to explore what's might happen at the limits
#gbm we can tune:n.trees,interaction.depth,shrinkage,n.minobsinnode
set.seed(1)
model = gbm(formula = Richness~.,
data = subset_mean,
n.minobsinnode = 5,
bag.fraction = 0.8 ,
interaction.depth =5,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,subset_mean,10000)
rmse(actual = subset_mean$Richness,
predicted = pred)
summary(model,n.trees=10000)
#redo above in a loop
nodes  = seq(2,10,1)
idepth = seq(2,6,1)
bag = seq(0.5,0.8,0.1)
hyper_grid = expand.grid(nodes = nodes, bag = bag, idepth = idepth)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
set.seed(1)
model = gbm(formula = Richness~.,
data = subset_mean,
n.minobsinnode = hyper_grid$nodes[i],
bag.fraction = hyper_grid$bag[i] ,
interaction.depth =hyper_grid$idepth[i[]],
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
oob_err[i] = model$train.error[length(model$train.error)]
}
nodes  = seq(2,10,1)
idepth = seq(2,6,1)
bag = seq(0.5,0.8,0.1)
hyper_grid = expand.grid(nodes = nodes, bag = bag, idepth = idepth)
oob_err = c()
#OK, lets try that then
model = gbm(formula = Richness~.,
data = subset_mean,
n.minobsinnode = 2,
bag.fraction = 0.8 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,subset_mean,10000)
rmse(actual = subset_mean$Richness,
predicted = pred)
summary(model,n.trees=10000)
#now need a train and test set
set.seed(5)
assignment <- sample(1:2, size = nrow(subset_mean), prob = c(0.75,0.25), replace = TRUE)
train <- subset_mean[assignment == 1, ]
test <- subset_mean[assignment == 2, ]
nodes  = seq(2,10,1)
idepth = seq(2,6,1)
bag = seq(0.5,0.8,0.1)
hyper_grid = expand.grid(nodes = nodes, bag = bag, idepth = idepth)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
set.seed(1)
model = gbm(formula = Richness~.,
data = train,
n.minobsinnode = hyper_grid$nodes[i],
bag.fraction = hyper_grid$bag[i] ,
interaction.depth =hyper_grid$idepth[i[]],
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
oob_err[i] = model$train.error[length(model$train.error)]
}
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
s = summary(model)
s
s[1]
s[[1]]
s[1][1]
s[[1]][[1]]
s[[1]][[1]]
s[[1]][[2]]
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
s
s[,1]
varImp(model)
barchart(s)
?barchart
?barchart
s[[2]]
x = s[[1]]
y = s[[2]]
data = as.data.frame(cbind(x,y))
colnames(data) = c("variable","relative importance")
colnames(data) = c("variable","RI")
ggplot(data=data,aes(x=variable,y=RI))+geom_bar()
ggplot(data=data,aes(x=variable,y=RI))+geom_bar(stat = "identity")
data
x
x[1]
x[[1]]
x
unlist(x)
typeof(x)
unlist(s)
s=unlist(s)
s
s[2,]
typeof(s)
s[1]
s[2]
getTree(model)
model
s
s = summary(model)
s
barplot(s)
typeof(s)
str(s)
s$var
s$var[1]
s$var[[1]]
x = as.factor(s$var)
x
typeof(x)
x = as.character(s$var)
x
y = s$rel.inf
data = as.data.frame(cbind(x,y))
data
barplot(data)
barplot(data, height = y)
ggplot(data=data, aes(x = as.factor(x),y=y))+geom_bar(stat = "identity")
ggplot(data=data, aes(x = x,y=y))+geom_bar(stat = "identity")
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
#run model on test set
model = gbm(formula = Richness~.,
data = test,
n.minobsinnode = 3,
bag.fraction = 0.7 ,
interaction.depth =6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
print( model$train.error[length(model$train.error)])
pred <- predict(model,test,10000)
rmse(actual = test$Richness,
predicted = pred)
summary(model,n.trees=10000)
?summary
model
model$var.names
ss = summary(model)
ss$rel.inf
ss$var
plot.gbm(model)
x
data
data$x
data = data[order(data$y)]
data$x
data$x = factor(data$x, levels = data$x[order(data$y)])
ggplot(data=data,aes(x = x,y = y))+geom_bar(stat = "identity")
data$y
data$y = as.numeric(data$y)
data$x = factor(data$x, levels = data$x[order(data$y)])
ggplot(data=data,aes(x = x,y = y))+geom_bar(stat = "identity")
data
s
x = as.character(s$var)
y = as.numeric(s$rel.inf)
x
y
data = as.data.frame(cbind(x,y))
data
datanew = data[order(y),]
datanew
ggplot(data=data, aes(x = x,y = y))+geom_bar(stat = "identity")
data$var = factor(data$x)
data
ggplot(data=data, aes(x = var(),y = y))+geom_bar(stat = "identity")
ggplot(data=data, aes(x = var,y = y))+geom_bar(stat = "identity")
data$var = factor(data$x, as.character(data$x))
data
ggplot(data=data, aes(x = var,y = y))+geom_bar(stat = "identity")
barplot(data$var,data$y)
data = as.data.frame(cbind(s$var,s$rel.inf))
data
s$var
as.factor(s$var)
as.character(s$var)
?factor
str(dara)
str(data)
data = as.data.frame(as.factor(s$var),as.numeric(s$rel.inf))
data
data = as.data.frame(as.character(s$var),as.numeric(s$rel.inf))
x = as.character(s$var)
RI = as.numeric(s$rel.inf)
data = as.data.frame(cbind(x,RI))
data
str(data)
data$RI = double()
data
data$x <- factor(data$x, levels = data$x[order(data$RI)])
data$x
data
data$x <- factor(data$x, levels = data$x[order(data$RI,decreasing = FALSE)])
str(data)
x
y
typeof(y)
data = as.data.frame(cbind(x,y))
type.convert()
str(data)
as.numeric(levels(data$y))[data$y]
str(data)
data$y = as.numeric(levels(data$y))[data$y]
str(data)
data
data$x <- factor(data$x, levels = data$x[order(data$x)])
ggplot(x, aes(x = x, y = y)) + theme_bw() + geom_bar(stat = "identity")
str(data)
data
ggplot(data = , aes(x = x, y = y)) + theme_bw() + geom_bar(stat = "identity")
data
str(data)
data$x <- factor(data$x, levels = data$x[order(data$y)])
str(data)
ggplot(data = , aes(x = x, y = y)) + theme_bw() + geom_bar(stat = "identity")
data
ggplot(data = , aes(x = x, y = y)) +  geom_bar(stat = "identity")
barplot(data)
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")
s = summary(model,n.trees=10000)
s = summary(model,n.trees=10000)
s = summary(model,n.trees=10000)
x = s$var
y = s$rel.inf
data = as.data.frame(cbind(x,y))
data$y = as.numeric(levels(data$y))[data$y]
data$x <- factor(data$x, levels = data$x[order(data$y)])
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")
s = summary(model,n.trees=10000)
s$var
s = summary(model,n.trees=10000)
x = as.character(s$var)
y = s$rel.inf
data = as.data.frame(cbind(x,y))
data$y = as.numeric(levels(data$y))[data$y]
data$x <- factor(data$x, levels = data$x[order(data$y)])
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")
pred
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")+
ylabs("relitive influence")+
xlabs("")
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")+
ylab("relitive influence")+
xlab("")
ggplot(data =data , aes(x = x, y = y)) +  geom_bar(stat = "identity")+
ylab("relative influence")+
xlab("")
