hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 10,
nodesize = 2,
sampsize = 53)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
# make train and test sets
set.seed(1)
assignment <- sample(1:2, size = nrow(subset_sd), prob = c(0.75,0.25), replace = TRUE)
# Create a train, validation and tests from the original data frame
train <- subset_sd[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_sd[assignment == 2, ]  # subset the grade data frame to validation indices only
mtry = seq(2,11,1)
nodesize = seq(2,10,2)
sampsize = nrow(train)*c(0.7,0.8)
hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 10,
nodesize = 2,
sampsize = 53)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
mtry = seq(2,11,1)
nodesize = seq(2,10,2)
sampsize = nrow(train)*c(0.7,0.8)
hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 10,
nodesize = 2,
sampsize = 53)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
varimp = cbind(varimp,vi)
}
means = rowMeans(varimp)
ordered_means = as.data.frame(round(sort(means, decreasing = TRUE),1))
colnames(ordered_means) = "Average %IncMSE"
ordered_means
# make train and test sets
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_NVC","sd_pH","sd_LBA",
"sd_meandbh","sd_TD","area_ratio")
set.seed(1)
assignment <- sample(1:2, size = nrow(subset_sd), prob = c(0.75,0.25), replace = TRUE)
# Create a train, validation and tests from the original data frame
train <- subset_sd[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_sd[assignment == 2, ]  # subset the grade data frame to validation indices only
mtry = seq(2,11,1)
nodesize = seq(2,10,2)
sampsize = nrow(train)*c(0.7,0.8)
hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 2,
sampsize = 53)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
varimp = cbind(varimp,vi)
}
means = rowMeans(varimp)
ordered_means = as.data.frame(round(sort(means, decreasing = TRUE),1))
colnames(ordered_means) = "Average %IncMSE"
ordered_means
# make train and test sets
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_NVC","sd_pH","sd_LBA",
"sd_meandbh","sd_TD","area_ratio")
#removed sd_SOM and no_MSG cos -ve %IncMSE
set.seed(1)
assignment <- sample(1:2, size = nrow(subset_sd), prob = c(0.75,0.25), replace = TRUE)
# Create a train, validation and tests from the original data frame
train <- subset_sd[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_sd[assignment == 2, ]  # subset the grade data frame to validation indices only
mtry = seq(2,11,1)
nodesize = seq(2,10,2)
sampsize = nrow(train)*c(0.7,0.8)
hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 2,
sampsize = 53)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
varimp = cbind(varimp,vi)
}
means = rowMeans(varimp)
ordered_means = as.data.frame(round(sort(means, decreasing = TRUE),1))
colnames(ordered_means) = "Average %IncMSE"
ordered_means
# make train and test sets
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_NVC","sd_pH","sd_LBA",
"sd_meandbh","sd_TD")
#removed sd_SOM and no_MSG cos -ve %IncMSE
set.seed(1)
assignment <- sample(1:2, size = nrow(subset_sd), prob = c(0.75,0.25), replace = TRUE)
# Create a train, validation and tests from the original data frame
train <- subset_sd[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_sd[assignment == 2, ]  # subset the grade data frame to validation indices only
mtry = seq(2,11,1)
nodesize = seq(2,10,2)
sampsize = nrow(train)*c(0.7,0.8)
hyper_grid = expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
oob_err = c()
for (i in 1:nrow(hyper_grid)){
# browser()
model = randomForest(formula = Richness~.,
data = train,
mtry = hyper_grid$mtry[i],
nodesize = hyper_grid$nodesize[i] ,
sampsize = hyper_grid$sampsize[i] )
oob_err[i] = model$mse[length(model$mse)]
}
opt_i = which.min(oob_err)
print(hyper_grid[opt_i,])
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
varimp = cbind(varimp,vi)
}
means = rowMeans(varimp)
ordered_means = as.data.frame(round(sort(means, decreasing = TRUE),1))
colnames(ordered_means) = "Average %IncMSE"
ordered_means
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
v = varImp(forest)
v[1]
typeof(v)
v[[1]]
v[[1]][[1]]
rownames(v)
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
varImpPlot(forest)
varImp(forest)
sum(v)
r = rownames(v)
r[1]
v/max(V)
v/max(v)
order(v)
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 3,
nodesize = 6,
sampsize = 61)
pred= predict(object = forest, newdata = test)
rmse(actual = test$Richness,
predicted = pred)
v = varImp(v)
v
v = varImp(forest)
v
order(v)
?order
order(v, decreasing = FALSE)
order(v, decreasing = TRUE
)
o = order(v)
o[1]
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
o = order(vi, decreasing = TRUE)
varimp_o = cbind(varimp,o)
}
o
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
vi
o = order(vi, decreasing = TRUE)
o
varimp_o = cbind(varimp,o)
varimp = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
o = order(vi, decreasing = TRUE)
varimp_o = cbind(varimp,o)
}
View(varimp_o)
varimp_o = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
o = order(vi, decreasing = TRUE)
varimp_o = cbind(varimp_o,o)
}
View(varimp_o)
View(varimp_o)
occurances(varimp_o[1,])
occurences(varimp_o[1,])
table(varimp_o[1,])
?table
?occurences
?count
count(varimp_o[1,])
varimp_o[1,]
x = varimp_o[-1,]
table(x[1,])
x = varimp[1,]
x
x = varimp_o[1,]
x
x = x[-1]
x
table(x)
x
varimp_o = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
o = order(vi, decreasing = TRUE)
varimp_o = as.data.frame(cbind(varimp_o,o))
}
View(varimp_o)
varimp_o = varimp_0[-1,]
varimp_o = varimp_o[-1,]
View(varimp_o)
varimp_o = varimp_o[,-1]
View(varimp_o)
x = varimp_o[1,]
x
table(x)
x = varimp_o[4,]
table(x)
typeof(x)
x = unlist(x)
table(x)
Northings = unlist(varimp_o[1,])
Northings_table = table(Northings)
Northings_table
varimp_o = data.frame(nrow = 8 )
for (i in 1:100){
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
vi = varImp(forest)
o = order(vi, decreasing = TRUE)
varimp_o = as.data.frame(cbind(varimp_o,o))
}
varimp_o = varimp_o[,-1]
Northings = unlist(varimp_o[1,])
Northings_table = table(Northings)
Northings_table
PHI = unlist(varimp_o[2,])
PHI_table = table(PHI)
PHI_table
boxplot(PHI_table)
barchart(PHI_table)
Northings = unlist(varimp_o[1,])
Northings_table = table(Northings)
PHI = unlist(varimp_o[2,])
PHI_table = table(PHI)
Buffer = unlist(varimp_o[3,])
Buffer_table = table(Buffer)
no_NVC = unlist(varimp_o[4,])
no_NVC_table = table(no_NVC)
sd_pH = unlist(varimp_o[5,])
sd_pH_table = table(sd_pH)
sd_LBA = unlist(varimp_o[6,])
sd_LBA_table = table(sd_LBA)
sd_meanDBH = unlist(varimp_o[7,])
sd_meanDBH_table = table(sd_meanDBH)
sd_TD = unlist(varimp_o[8,])
sd_TD_table = table(sd_TD)
library(gridExtra)
Northings_table
PHI_table
g1 = ggplot(data = Northings_table, aes(x = "",y = feq))+geom_bar
g1 = ggplot(data = as.data.frame(Northings_table), aes(x = "",y = feq))+geom_bar
g1 = ggplot(data = as.data.frame(Northings_table), aes(x = "",y = feq))+ geom_bar()
g1
ggplot(data = as.data.frame(Northings_table), aes(x = "",y = freq))+ geom_bar()
as.data.frame(PHI_table)
ggplot(data = as.data.frame(Northings_table), aes(x = "PHI",y = Freq))+ geom_bar()
ggplot(data = as.data.frame(Northings_table), aes(x = "PHI",y = Freq))+ geom_bar(stat = "identity")
ggplot(data = as.data.frame(Northings_table), aes(x = "PHI",y = Freq))+ geom_bar(stat = "identity")
ggplot(data = as.data.frame(Northings_table), aes(x = PHI,y = Freq))+ geom_bar(stat = "identity")
as.data.frame(PHI_table)["PHI"]
as.data.frame(PHI_table)["Freq"]
ggplot(data = as.data.frame(Northings_table), aes(x = PHI,y = Freq))+ geom_bar(stat = "identity")
ggplot(data = as.data.frame(Northings_table), aes(x = PHI))+
geom_bar(y = Freq)
ggplot(data = as.data.frame(Northings_table), aes(x = PHI,y=Freq))+
geom_bar()
data = as.data.frame(Northings_table
)
data
ggplot(data = as.data.frame(PHI_table), aes(x = PHI, y=Freq))+
geom_bar()
ggplot(data = as.data.frame(PHI_table), aes(x = PHI, y=Freq))+
geom_bar(stat = "identity")
geom_bar(stat = "identity")
data = as.data.frame(PHI_table)
data
data = as.data.frame(PHI_table)
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar(stat = "identity")
geom_bar(stat = "identity")
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar(stat = "count")
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar()
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar()
data = as.data.frame(PHI_table)
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar()
ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar(stat = "identity")
sd_meanDBH = unlist(varimp_o[7,])
Northings = unlist(varimp_o[1,])
Northings_table = table(Northings)
data = as.data.frame(Northings_table)
g1 = ggplot(data = data, aes(x = Northings, y=Freq))+
geom_bar(stat = "identity")
PHI = unlist(varimp_o[2,])
PHI_table = table(PHI)
data = as.data.frame(PHI_table)
g2 = ggplot(data = data, aes(x = PHI, y=Freq))+
geom_bar(stat = "identity")
Buffer = unlist(varimp_o[3,])
Buffer_table = table(Buffer)
data = as.data.frame(Buffer_table)
g3 = ggplot(data = data, aes(x = Buffer, y=Freq))+
geom_bar(stat = "identity")
no_NVC = unlist(varimp_o[4,])
no_NVC_table = table(no_NVC)
data = as.data.frame(no_NVC_table)
g4 = ggplot(data = data, aes(x = no_NVC, y=Freq))+
geom_bar(stat = "identity")
sd_pH = unlist(varimp_o[5,])
sd_pH_table = table(sd_pH)
data = as.data.frame(sd_pH_table)
g5 = ggplot(data = data, aes(x = sd_pH, y=Freq))+
geom_bar(stat = "identity")
sd_LBA = unlist(varimp_o[6,])
sd_LBA_table = table(sd_LBA)
data = as.data.frame(sd_LBA_table)
g6 = ggplot(data = data, aes(x = sd_LBA, y=Freq))+
geom_bar(stat = "identity")
sd_meanDBH = unlist(varimp_o[7,])
sd_meanDBH_table = table(sd_meanDBH)
data = as.data.frame(sd_meanDBH_table)
g7 = ggplot(data = data, aes(x = sd_meanDBH, y=Freq))+
geom_bar(stat = "identity")
sd_TD = unlist(varimp_o[8,])
sd_TD_table = table(sd_TD)
data = as.data.frame(sd_TD_table)
g8 = ggplot(data = data, aes(x = sd_TD, y=Freq))+
geom_bar(stat = "identity")
grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,ncol =2)
ggplot(data = data, aes(x = Northings, y=Freq))+
geom_bar(stat = "identity", width = 0.5)
data = as.data.frame(Northings_table)
ggplot(data = data, aes(x = Northings, y=Freq))+
geom_bar(stat = "identity", width = 0.5)
g1 = ggplot(data = data, aes(x = Northings, y=Freq))+
geom_bar(stat = "identity", width = 0.25)
ggplot(data = data, aes(x = Northings, y=Freq))+
geom_bar(stat = "identity", width = 0.25)
