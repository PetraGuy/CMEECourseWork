site_data = inner_join(zeta_r,site_data)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_mean = subset_all%>%select("Richness",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
subset_sd = subset_all%>%select("Richness",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"zeta_r")
rmse_test = 0
rmse_train = 0
#varimp_o = data.frame(nrow = 8 )
vars = (colnames(subset_mean[-1]))
vis = c(0,0,0,0,0,0,0,0,0,0,0)
for (i in 1:100){
assignment <- sample(1:2, size = nrow(subset_mean), prob = c(0.75,0.25), replace = TRUE)
train <- subset_mean[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_mean[assignment == 2, ]
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
pred_test= predict(object = forest, newdata = test)
pred_train = predict(object = forest, newdata= train)
rmse_test = rmse_test + rmse(actual = test$Richness, predicted = pred_test)
rmse_train = rmse_train + rmse(actual = train$Richness, predicted = pred_train)
vis = vis + varImp(forest)$Overall
#o = order(vi, decreasing = TRUE)
#varimp_o = as.data.frame(cbind(varimp_o,o))
}
subset_mean = subset_all%>%select("Richness",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_mean = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"zeta_r")
rmse_test = 0
rmse_train = 0
#varimp_o = data.frame(nrow = 8 )
vars = (colnames(subset_mean[-1]))
vis = c(0,0,0,0,0,0,0,0,0,0,0)
for (i in 1:100){
assignment <- sample(1:2, size = nrow(subset_mean), prob = c(0.75,0.25), replace = TRUE)
train <- subset_mean[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_mean[assignment == 2, ]
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
pred_test= predict(object = forest, newdata = test)
pred_train = predict(object = forest, newdata= train)
rmse_test = rmse_test + rmse(actual = test$Richness, predicted = pred_test)
rmse_train = rmse_train + rmse(actual = train$Richness, predicted = pred_train)
vis = vis + varImp(forest)$Overall
#o = order(vi, decreasing = TRUE)
#varimp_o = as.data.frame(cbind(varimp_o,o))
}
rmse_test = round(rmse_test/100,2)
rmse_train = round(rmse_train/100,2)
vis_rnd = (round(vis/100,2))
vis_df = data.frame(IncMSE = length(variables))
vis_df = as.data.frame(cbind(vars,vis_rnd))
vis_df$vis_rnd = as.numeric(levels(vis_df$vis_rnd))[vis_df$vis_rnd]
ggplot(data = vis_df , aes(x = reorder(vars, -vis_rnd), y = vis_rnd)) +
geom_bar(stat = "identity")+
ylab("%IncMSE")+
xlab("")+
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Inc MSE for 100 bootstrapped random forests")+
annotate("text", x = 10, y = 15, label = paste("rmse train set = ", rmse_train))+
annotate("text", x = 10, y = 14, label = paste("rmse test set = ", rmse_test))
rmse_test = 0
rmse_train = 0
#varimp_o = data.frame(nrow = 8 )
vars = (colnames(subset_sd[-1]))
vis = c(0,0,0,0,0,0,0,0,0,0,0)
for (i in 1:100){
assignment <- sample(1:2, size = nrow(subset_sd), prob = c(0.75,0.25), replace = TRUE)
train <- subset_sd[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_sd[assignment == 2, ]
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
pred_test= predict(object = forest, newdata = test)
pred_train = predict(object = forest, newdata= train)
rmse_test = rmse_test + rmse(actual = test$Richness, predicted = pred_test)
rmse_train = rmse_train + rmse(actual = train$Richness, predicted = pred_train)
vis = vis + varImp(forest)$Overall
#o = order(vi, decreasing = TRUE)
#varimp_o = as.data.frame(cbind(varimp_o,o))
}
rmse_test = round(rmse_test/100,2)
rmse_train = round(rmse_train/100,2)
vis_rnd = (round(vis/100,2))
vis_df = data.frame(IncMSE = length(variables))
vis_df = as.data.frame(cbind(vars,vis_rnd))
vis_df$vis_rnd = as.numeric(levels(vis_df$vis_rnd))[vis_df$vis_rnd]
ggplot(data = vis_df , aes(x = reorder(vars, -vis_rnd), y = vis_rnd)) +
geom_bar(stat = "identity")+
ylab("%IncMSE")+
xlab("")+
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Inc MSE for 100 bootstrapped random forests")+
annotate("text", x = 10, y = 15, label = paste("rmse train set = ", rmse_train))+
annotate("text", x = 10, y = 14, label = paste("rmse test set = ", rmse_test))
partialPlot(forest,train,no_NVC)
rmse_test = 0
rmse_train = 0
#varimp_o = data.frame(nrow = 8 )
vars = (colnames(subset_mean[-1]))
vis = c(0,0,0,0,0,0,0,0,0,0,0)
for (i in 1:100){
assignment <- sample(1:2, size = nrow(subset_mean), prob = c(0.75,0.25), replace = TRUE)
train <- subset_mean[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_mean[assignment == 2, ]
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
pred_test= predict(object = forest, newdata = test)
pred_train = predict(object = forest, newdata= train)
rmse_test = rmse_test + rmse(actual = test$Richness, predicted = pred_test)
rmse_train = rmse_train + rmse(actual = train$Richness, predicted = pred_train)
vis = vis + varImp(forest)$Overall
#o = order(vi, decreasing = TRUE)
#varimp_o = as.data.frame(cbind(varimp_o,o))
}
rmse_test = round(rmse_test/100,2)
rmse_train = round(rmse_train/100,2)
vis_rnd = (round(vis/100,2))
vis_df = data.frame(IncMSE = length(variables))
vis_df = as.data.frame(cbind(vars,vis_rnd))
vis_df$vis_rnd = as.numeric(levels(vis_df$vis_rnd))[vis_df$vis_rnd]
ggplot(data = vis_df , aes(x = reorder(vars, -vis_rnd), y = vis_rnd)) +
geom_bar(stat = "identity")+
ylab("%IncMSE")+
xlab("")+
theme(axis.text.x=element_text(angle = 45, hjust = 1))+
ggtitle("Inc MSE for 100 bootstrapped random forests")+
annotate("text", x = 10, y = 15, label = paste("rmse train set = ", rmse_train))+
annotate("text", x = 10, y = 14, label = paste("rmse test set = ", rmse_test))
partialPlot(forest,train,Northing)
rm(list = ls())
cat("\014")
library(dplyr)
library(rpart)
library(rpart.plot)
library(gbm)#bgm
library(caret)
library(Metrics) #rmse
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
zeta_r = readRDS("../Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(zeta_r,site_data)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"zeta_r")
subset_mean = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
get_traintest = function(datasubset){
#browser()
traintest = list()
assignment <- sample(1:2, size = nrow(datasubset), prob = c(0.7,0.3), replace = TRUE)
traintest[[1]] <- datasubset[assignment == 1, ]
traintest[[2]]  <- datasubset[assignment == 2, ]
return(traintest)
}
get_model = function(traintest){
train = traintest[[1]]
model = gbm(formula = Richness~.,
data = train,
n.minobsinnode = 2,
bag.fraction = 0.8 ,
interaction.depth = 6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
return(model)
}
get_rmse = function(model,traintest){
rmses = list()
trainset = traintest[[1]]
testset = traintest[[2]]
ntree_opt = gbm.perf(model, method = "cv",oobag.curve = FALSE)
pred_train = predict(model,trainset, ntree_opt)
pred_test <- predict(model,testset,ntree_opt)
rmses[[1]] = rmse(actual = trainset$Richness, predicted = pred_train)
rmses[[2]] = rmse(actual = testset$Richness,   predicted = pred_test)
return(rmses)
}
get_rel_infl = function(model){
s = summary(model,n.trees=10000)
x = as.character(s$var)
y = s$rel.inf
data = as.data.frame(cbind(x,y))
data$y = as.numeric(levels(data$y))[data$y]
data$x <- factor(data$x, levels = data$x[order(data$y)])
return(data)
}
get_influence = function(datasubset,relinfl) {
vars = colnames(datasubset[-1])
ris = vector()
for (var in vars){
ris[var] = as.vector(filter(relinfl,relinfl$x == var)[2])
}
return(ris)
}
add_list_elements = function(list1,list2){
list_sum = list()
length = length(list1)
for (i in 1:length){
list_sum[[i]] = list1[[i]]+list2[[i]]
}
return(list_sum)
}
data = get_traintest(dataset)
model = get_model(data)
datasubset - subset_mean
datasubset = subset_mean
traintest = list()
assignment <- sample(1:2, size = nrow(datasubset), prob = c(0.7,0.3), replace = TRUE)
traintest[[1]] <- datasubset[assignment == 1, ]
traintest[[2]]  <- datasubset[assignment == 2, ]
train = traintest[[1]]
model = gbm(formula = Richness~.,
data = train,
n.minobsinnode = 2,
bag.fraction = 0.8 ,
interaction.depth = 6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
partialPlot(model,train,zeta_r)
plot.gbm(model,Northing)
View(train)
plot.gbm(model,i.var = 2)
plot.gbm(model,i.var = 1)
plot.gbm(model,i.var = 12)
plot.gbm(model,i.var = 2)
rm(list = ls())
cat("\014")
library(dplyr)
library(rpart)
library(rpart.plot)
library(gbm)#bgm
library(caret)
library(Metrics) #rmse
library(randomForest)
library(gridExtra)
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
zeta_r = readRDS("../Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(zeta_r,site_data)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_mean = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"zeta_r")
rmse_test = 0
rmse_train = 0
#varimp_o = data.frame(nrow = 8 )
vars = (colnames(subset_mean[-1]))
assignment <- sample(1:2, size = nrow(subset_mean), prob = c(0.75,0.25), replace = TRUE)
train <- subset_mean[assignment == 1, ]    # subset the grade data frame to training indices only
test <- subset_mean[assignment == 2, ]
forest = randomForest(formula = Richness~., data = train,importance = TRUE,
mtry = 4,
nodesize = 8,
sampsize = 61)
partialPlot(train,train.meanpH)
partialPlot(train,train,meanpH)
partialPlot(forest,train,meanpH)
View(train)
partialPlot(forest,train,meanph)
rm(list = ls())
cat("\014")
library(dplyr)
library(rpart)
library(rpart.plot)
library(gbm)#bgm
library(caret)
library(Metrics) #rmse
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
site_data = site_data[,-1]
zeta_r = readRDS("../Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(zeta_r,site_data)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
subset_all = site_data%>%select("Site","Richness","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","Richness","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
subset_sd = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"zeta_r")
subset_mean = subset_all%>%select("Richness",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
datasubset = subset_mean
traintest = list()
assignment <- sample(1:2, size = nrow(datasubset), prob = c(0.7,0.3), replace = TRUE)
traintest[[1]] <- datasubset[assignment == 1, ]
traintest[[2]]  <- datasubset[assignment == 2, ]
train = traintest[[1]]
model = gbm(formula = Richness~.,
data = train,
n.minobsinnode = 2,
bag.fraction = 0.8 ,
interaction.depth = 6,
n.trees = 10000,
distribution = "gaussian",
cv.folds =5)
View(train)
plot.gbm(model, i.var = 10)
## NB - several libraries mask each other here - arm masks dplyr and corrplot, therefore open libraries #as required.
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Richness modelling
rm(list = ls())
cat("\014")
library(dplyr) # everything
library(ggplot2)
library(car) # for vif
library(reshape) # melt
# get the data
site_data =  read.csv("../../Data/CompleteSiteLevelVars.csv")
PlotZdata = read.csv("../../Data/z_ave_fits.csv")
Zs = PlotZdata%>%select(Site, slope)
zeta_r = readRDS("../Zeta/zeta_r")
Site = c(1:103)
zeta_r = as.data.frame(cbind(Site,zeta_r))
site_data = inner_join(site_data,zeta_r)
#mean impute the missing PHI
meanPHI = round(mean(site_data$Pos_Hetero_Index, na.rm = TRUE),2)
x = site_data$Pos_Hetero_Index
x[is.na(x)] = meanPHI
site_data$Pos_Hetero_Index = x
site_data_zs = inner_join(site_data,Zs)
View(site_data_zs)
rand_zs = read.csv(".../Data/rand_zs.csv")
setwd("C:/dev/code/CMEECourseWork/CMEEMainProject/Code/FinalModels")
rand_zs = read.csv(".../../Data/rand_zs.csv")
#add in the new random path z's
rand_zs = read.csv("../../Data/rand_zs.csv")
View(rand_zs)
View(site_data_zs)
View(site_data_zs)
plot(site_data_zs$slope,rand_zs$x)
zr
zr = rand_zs$x
plot(site_data_zs$slope,zr)
View(site_data_zs)
colnames(rand_zs) = c("Site","zr")
site_data_zs_zr=inner_join(site_data_zs,rand_zs)
# slect only required variables
subset_all = site_data_zs%>%select("Site","slope","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
colnames(subset_all) = c("Site","nestZ","Area",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meanTD","zeta_r")
#remove the wood with the largest area
largest_area = as.numeric(subset_all%>%filter(Area == max(Area))%>%select(Site))
site_data_outlier1 = subset_all%>%filter(Site!=largest_area)
site_data_outlier1 = site_data_outlier1[,-3] # remove area column now
#remove the outlier in PHI
largest_PHI = as.numeric(subset_all%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier2 = site_data_outlier1%>%filter(Site!=largest_PHI)
largest_PHI = as.numeric(site_data_outlier2%>%filter(PHI == max(PHI))%>%select(Site))
site_data_outlier3 = site_data_outlier2%>%filter(Site!=largest_PHI)
subset_sd = site_data_outlier3%>%select("Site","nestZ",
"Northing", "PHI","Buffer",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_TD","area_ratio","zeta_r")
subset_mean = site_data_outlier3%>%select("Site","nestZ",
"Northing", "PHI",  "meandbh",
"meanph", "Buffer", "meanSOM","meanLBA",
"meanTD","area_ratio", "no_NVC",
"no_MSG","zeta_r")
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
# we know richness vs ph usually unimodal around .5, therefore fit to meanpH^2
data = subset_mean[,-1]
nestZ = subset_mean[,2]
data$meanph = (data$meanph)^2
#rescale the data
library(arm) #for standarize
rescaled_mean_data = apply(data[,-1],2, rescale)
rescaled_mean_data = as.data.frame(cbind(nestZ, rescaled_mean_data))
# slect only required variables
#change to either slope or zr if you want minmax method or random method
subset_all = site_data_zs_zr%>%select("Site","zr","Area_ha",
"Northing", "Pos_Hetero_Index","Buffer3",
"no_MSG", "no_NVC","sd_pH","sd_SOM","sd_LBA",
"sd_meandbh","sd_treedensity","area_ratio",
"meandbh","meanph", "meanSOM","meanLBA",
"meantreedensity","zeta_r")
