if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
SomeOperation = function(v) {
if (sum(v) > 0)
return (v*100)
}
return(v)
M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))
x = 1:20
y = factor(rep(letters[1:5], each = 4))
y
tapply(x,y,sum)
attach(iris)
print(iris)
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
require(dplyr)
install.packages("dplyr")
library(dplyr)
dplyr::tbl_df(iris)
dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length >7)
dplyr::slice(iris, 10:15)
?tibble
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tmpdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile)
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])
#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)
#This is the heights calcultion
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile
)
Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m
)
?mapply
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyData = read.csv("../Data/trees.csv")
TreeHeight = function(distance, angle) {
radians =  angle*pi/180
height = distance * tan(radians)
print(height)
}
Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")
MyData = read.csv("../Data/trees.csv")
MyFunction <- function(Arg1, Arg2) {
print(paste("Argument", as.character(Arg1), "is a", class(Arg1)))
print(paste("Argument", as.character(Arg2), "is a", class(Arg2)))
return(c(Arg1,Arg2))
}
MyFunction(1,2)
MyFunction("Bob","Geoff")
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
rm(list=ls())
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2 <- stochricknew()))
set.seed(1)
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("non vectorized system time is")
print(system.time(res1 <- stochrick()))
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
MyFuncn
plot(Exponential(), type = "1", main = "Exponential growth")
N
N
N
N
N
plot(Exponential(), type = "1", main = "Exponential growth")
?plot
Exponential <- function (N0 = 1, r =1, generations = 10){
N <- rep(NA, generations)
N[1] <-N0
for (t in 2:generations) {
N[t] <- N[t-1]*exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "l", main = "Exponential growth")
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) {
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
}
return(N)
}
# Now write another code called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
MyMatrix =  stochricknew
# print("Vectorized Stochastic Ricker takes:")
print(system.time(stochrick()))
M = matrix(runif(1000000), 1000,1000)
SumAllElements =  function(M) {
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
library(ggplot2)
SparrowsData = read.table("../Data/SparrowSize.txt", header = TRUE)
Winghist = ggplot(SparrowsData, aes(Wing))+
geom_histogram()
BodyMassHist = ggplot(SparrowsData, aes(Mass))+
geom_histogram()
BillHist = ggplot(SparrowsData, aes(Bill))+
geom_histogram()
MeanBill = mean(SparrowsData$Bill, na.rm = TRUE)
setwd("~/Documents/CMEECourseWork/Week4/Code")
load("~/Documents/CMEECourseWork/Week4/Code/Sparrows2.R")
rm(oist = ls())
rm(list = ls())
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
rm(list = ls())
library(ggplot2)
library(gridExtra) # for multiple plots
#library(dplyr) #not used yet
library(moments) # for skewness
library(MASS)
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
SparrowsData = as.data.frame(read.table("../Data/SparrowSize.txt", header = TRUE))
NumericCols = sapply(SparrowsData, is.numeric)
ScaledData = sapply(SparrowsData[,3:6], scale)
SparrowsNormalised = cbind(SparrowsData[,1:2], ScaledData, SparrowsData[,7:8])
### function to calcualte the mode ####
estimate_mode <- function(x) {
d <- density(x, na.rm = TRUE)
d$x[which.max(d$y)]
}
###     Sats for unnormalised data   ####
SparrowMeans = round(colMeans(as.data.frame(SparrowsData[,4:6]), na.rm = TRUE), digits = 2)
Variances =  sapply(SparrowsData[,NumericCols], var, na.rm = TRUE)
SparrowVars = round(Variances, digits = 2)[4:6]
Sparrowsd = round(sqrt(Variances[4:6]), digits = 2)
SparrowMedians = sapply(SparrowsData[,4:6], median, na.rm = TRUE)
SparrowModes = sapply(SparrowsData[,4:6], estimate_mode)
Skews = sapply(SparrowsData[,NumericCols], skewness, na.rm = TRUE)
SparrowSkews = round(Skews[4:6], digits = 2)
NormTests = sapply(SparrowsData[,4:6], shapiro.test)
SparrowStats = rbind(SparrowMeans, SparrowMedians, SparrowModes, SparrowVars, Sparrowsd, SparrowSkews, NormTests)
colnames(SparrowStats) = c("Bill", "Wing", "Mass")
#rownames(SparrowStats) = c("Mean", "Variance", "StandDev", "Skewness")
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
print(SparrowStats)
rm(list = ls())
#!/usr/bin/env Rscript
# Starting again with Sparrows in a more logical order
rm(list = ls())
library(ggplot2)
library(gridExtra) # for multiple plots
#library(dplyr) #not used yet
library(moments) # for skewness
library(MASS)
###   Import and normalise Data #####
SparrowsData = as.data.frame(read.table("../Data/SparrowSize.txt", header = TRUE))
NumericCols = sapply(SparrowsData, is.numeric)
ScaledData = sapply(SparrowsData[,3:6], scale)
SparrowsNormalised = cbind(SparrowsData[,1:2], ScaledData, SparrowsData[,7:8])
### function to calcualte the mode ####
estimate_mode <- function(x) {
d <- density(x, na.rm = TRUE)
d$x[which.max(d$y)]
}
View(SparrowsData)
View(SparrowsData)
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_boxplot()+
facet_grid(Sex.1)
}
?facet_grid
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_boxplot()+
facet_grid(. ~ Sex.1)
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_boxplot()+
facet_grid(. ~ Sex)
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x = 1, y = Wing, group = Sex1))+
geom_boxplot()
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x = 1, y = Wing, group = Sex.1))+
geom_boxplot()
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Sex.1, y = Wing))+
geom_boxplot()
View(SparrowsNormalised)
View(SparrowsNormalised)
sort(SparrowsData$Bill)
SparrowStats
SparrowMeans = round(colMeans(as.data.frame(SparrowsData[,4:6]), na.rm = TRUE), digits = 2)
Variances =  sapply(SparrowsData[,NumericCols], var, na.rm = TRUE)
SparrowVars = round(Variances, digits = 2)[4:6]
Sparrowsd = round(sqrt(Variances[4:6]), digits = 2)
SparrowMedians = sapply(SparrowsData[,4:6], median, na.rm = TRUE)
SparrowModes = sapply(SparrowsData[,4:6], estimate_mode)
Skews = sapply(SparrowsData[,NumericCols], skewness, na.rm = TRUE)
SparrowSkews = round(Skews[4:6], digits = 2)
NormTests = sapply(SparrowsData[,4:6], shapiro.test)
SparrowStats = rbind(SparrowMeans, SparrowMedians, SparrowModes, SparrowVars, Sparrowsd, SparrowSkews, NormTests)
colnames(SparrowStats) = c("Bill", "Wing", "Mass")
#rownames(SparrowStats) = c("Mean", "Variance", "StandDev", "Skewness")
###### Plots for un normalised data  ########################
#dev.off()
plot1 <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Wing))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[2]]))+
geom_density()
plot1a <- ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(x=1, y = Wing))+
geom_boxplot()+
coord_flip()
plot2 <- ggplot(data = subset(SparrowsData, !is.na(Mass)) , aes(Mass))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[3]]))
geom_density()
plot2a <- ggplot(data=subset(SparrowsData, !is.na(Mass)), aes(x=1, y = Mass))+
geom_boxplot()+
coord_flip()
plot3 <- ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(Bill))+
geom_histogram(bins = 25)+
geom_vline(data=SparrowsData, aes(xintercept =  SparrowMeans[[1]]))
geom_density()
plot3a <-   ggplot(data=subset(SparrowsData, !is.na(Bill)), aes(x=1, y = Bill))+
geom_boxplot()+
coord_flip()
grid.arrange(plot1,plot1a, plot2,plot2a, plot3, plot3a)
### More plots to examine fits etc ####
ggplot(data=subset(SparrowsData, !is.na(Wing)), aes(Sex.1, y = Wing))+
geom_boxplot()
print(SparrowStats)
#gives max-liklihod estimtors
#fitdistr(c(na.exclude(SparrowsData$Bill)), "normal")
mean(SparrowsNormalised$Bill)
mean(SparrowsNormalised$Bill, na.rm = TRUE)
?by
StandError =  function(data){
SE = sd(data, na.rm = TRUE)/sqrt(length(data, na.omit = TRUE)
}
StandError =  function(data){
SE = sd(data, na.rm = TRUE)/sqrt(length(data, na.omit = TRUE)
}
StandError =  function(data){
SE = sd(data, na.rm = TRUE)/sqrt(length(data, na.omit = TRUE))
}
StandError(SparrowsData$Bill)
?length
?na.omit
StandError(SparrowsData$Bill)
StandError =  function(data){
data = na.omit(data)
SE = sd(data, na.rm = TRUE)/sqrt(length(data))
}
StandError =  function(data){
data = na.omit(data)
SE = sd(data, na.rm = TRUE)/sqrt(length(data))
}
StandError(SparrowsData$Bill)
x = StandError(SparrowsData$Bill)
x
?by
SparrowSE = by(SparrowsData[,4:6], StandError)
SparrowSE = tapply(apply(SparrowsData[,4:6]), Year, StandError)
SparrowSE = tapply(apply(SparrowsData[,4:6]), Year, StandError)
?tapply(vector, index, function)
SparrowSE = tapply(apply(SparrowsData[,4:6]), Year, StandError)
SparrowSE = apply(SparrowsData[,4:6], function(x) tapply(x, years, StandError))
SparrowSE = apply(SparrowsData[,4:6],1, function(x) tapply(x, years, StandError))
SparrowSE = apply(SparrowsData[,4:6],1, function(x) tapply(x, SparrowsData$years, StandError))
SparrowSE = apply(SparrowsData[,4:6],1, function(x) tapply(x, SparrowsData$year, StandError))
library(dplyr)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
