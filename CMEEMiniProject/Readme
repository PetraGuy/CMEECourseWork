R version 3.2.3 (2015-12-10)
Python 2.7.12
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.3 LTS

Data.
The only data file required is SorariaCompact1.csv in the /Data directory.

Libraries.

Modelling libraries required:

ggplot2_2.2.1 (boxplots)
reshape_0.8.7 (in order to present all the boxplots on one page) depends R>2.6.1
rpart_4.1-11(for the decision tree) dependencies R>2.15.0, 
rpart.plot_2.1.2(for the tree plot) depends R>3.2.0 rpart > 4.1-10
knitr_1.17  (to knit the Rmarkdown file) depends R>3.1.0
kableExtra_0.7.0 knitr_1.17  (this was the only way I could find to produced reasonable looking, numbered tables)

Rmarkdown packages required
lineno (for line numbering)
setspace (for line spacing)
float (for fixing images in the text, but this didn't seem to be working anyway)

Python packages used
subprocess (to use command line and run bash)

Directory structure

Code
MiniProjMainDocument.Rmd - rmarkdown file containg all code and text
run_MiniProject.py - Execute this to compile the rmarkdowndocument. NB, evince is used to open the pdf which produces some error codes. The document opens, and SO implies these error codes are not important but relate to the document vier being opened from command line.
bashrender.sh python was unable to render the rmarkdown file and it was much easier to do that from a bash script within the python script.

Data
Sorariacompact1.csv. data used in the project

Documents

bibliography.bib. Bibliography for the project
ProjectText.odt. Text for the rmd file was written here and copied in. This allowed word count and was easier to manipulate.
Sorbusaucuparia.pdf. Nice cover picture (Wiki images) for front of project.


Sandbox
Various practice code which might be useful.

Dataflow
run_MiniProject.py, this will move files to correct locations and execute the bashrender program. After rendering the documents will be mved back out of Code, including the .pdf output



